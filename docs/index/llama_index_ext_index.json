{
    "ramblemaxx/terminal.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "interface",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_interface",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "interface",
                        "default": null
                    }
                ],
                "docstring": "Set the interface after initialization."
            }
        ],
        "classes": [
            {
                "name": "ChatTerminal",
                "docstring": "Terminal with chat and command handling."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Terminal",
            "Optional",
            "Style"
        ]
    },
    "ramblemaxx/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RambleMaxx"
        ]
    },
    "ramblemaxx/app.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_mount",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Set up interface after app is mounted."
            },
            {
                "name": "compose",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create the interface layout."
            },
            {
                "name": "action_toggle_sidebar",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Toggle the side panel."
            }
        ],
        "classes": [
            {
                "name": "RambleMaxx",
                "docstring": "Terminal-based interface for Scramble."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "App",
            "ComposeResult",
            "Horizontal",
            "Vertical",
            "Header",
            "Footer",
            "MarkdownViewer",
            "MAXXInterface",
            "ChatTerminalWidget"
        ]
    },
    "ramblemaxx/__main__.py": {
        "functions": [
            {
                "name": "handle_sigint",
                "parameters": [
                    {
                        "name": "signum",
                        "default": null
                    },
                    {
                        "name": "frame",
                        "default": null
                    }
                ],
                "docstring": "Handle Ctrl+C gracefully."
            },
            {
                "name": "main",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "signal",
            "RambleMaxx"
        ]
    },
    "tools/generate_code_index.py": {
        "functions": [
            {
                "name": "list_files",
                "parameters": [
                    {
                        "name": "root_dir",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "additional_paths",
                        "default": null
                    }
                ],
                "docstring": "Recursively list all Python files in the repo and additional paths (excluding virtual envs and non-Python files). "
            },
            {
                "name": "extract_symbols_and_docs",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": "Parse the file using AST and extract classes, functions, their docstrings, and parameters. "
            },
            {
                "name": "generate_code_index",
                "parameters": [
                    {
                        "name": "root_dir",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "extra_paths",
                        "default": null
                    }
                ],
                "docstring": "Main function to generate the codebase index. "
            },
            {
                "name": "generate_external_index",
                "parameters": [
                    {
                        "name": "extra_paths",
                        "default": null
                    }
                ],
                "docstring": "Generate index only for the given external paths (no root project files). "
            },
            {
                "name": "save_to_json",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    },
                    {
                        "name": "output_dir",
                        "default": null
                    },
                    {
                        "name": "filename",
                        "default": null
                    }
                ],
                "docstring": "Save the generated index to a JSON file in the specified directory. "
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [
            "todos",
            "todo",
            "fixme",
            "todos"
        ],
        "imports": [
            "ast",
            "os",
            "json",
            "Path"
        ]
    },
    "tools/do_the_chores.py": {
        "functions": [
            {
                "name": "parse_priority",
                "parameters": [
                    {
                        "name": "priority_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "scan_file",
                "parameters": [
                    {
                        "name": "filepath",
                        "default": null
                    }
                ],
                "docstring": "Scan a file for TODO comments."
            },
            {
                "name": "generate_markdown",
                "parameters": [
                    {
                        "name": "todos_by_file",
                        "default": null
                    }
                ],
                "docstring": "Generate formatted markdown with categorization."
            },
            {
                "name": "main",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Priority",
                "docstring": null
            },
            {
                "name": "TodoItem",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "re",
            "Path",
            "datetime",
            "Dict",
            "List",
            "Tuple",
            "NamedTuple",
            "Enum"
        ]
    },
    "tests/test_ollama_model.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "tests/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "living_room/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/config.py": {
        "functions": [
            {
                "name": "is_living_room",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Check if we're in living room mode"
            },
            {
                "name": "get_neo4j_config",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get Neo4j connection configuration"
            },
            {
                "name": "get_redis_config",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get Redis configuration"
            }
        ],
        "classes": [
            {
                "name": "Config",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Dict",
            "Any",
            "os",
            "Path",
            "load_dotenv"
        ]
    },
    "scramble/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RambleInterface",
            "Coordinator",
            "AnthropicLLMModel",
            "MagicScroll",
            "Config"
        ]
    },
    "scramble/__main__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "cli"
        ]
    },
    "ramble/context_controller.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "interface",
                        "default": null
                    }
                ],
                "docstring": "Initialize with reference to parent interface."
            }
        ],
        "classes": [
            {
                "name": "ContextController",
                "docstring": "Handles context-related commands and operations."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Dict",
            "Any",
            "Table",
            "datetime",
            "logging"
        ]
    },
    "ramble/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RambleCLI"
        ]
    },
    "ramble/app.py": {
        "functions": [
            {
                "name": "cli",
                "parameters": [],
                "docstring": "Ramble - Context-aware CLI chat interface"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_CONFIG', ctx=Load())"
                    },
                    {
                        "name": "config",
                        "default": null
                    }
                ],
                "docstring": "Initialize the CLI with core components."
            }
        ],
        "classes": [
            {
                "name": "AppConfig",
                "docstring": "Main application configuration."
            },
            {
                "name": "RambleCLI",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "sys",
            "click",
            "Dict",
            "TypedDict",
            "Optional",
            "Console",
            "RambleInterface",
            "setup_logging",
            "get_logger"
        ]
    },
    "ramblemaxx/ui/themes.py": {
        "functions": [
            {
                "name": "get_theme",
                "parameters": [
                    {
                        "name": "name",
                        "default": "Constant(value='default')"
                    }
                ],
                "docstring": "Get a theme by name."
            }
        ],
        "classes": [
            {
                "name": "MAXXTheme",
                "docstring": "Theme configuration for RambleMAXX."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "dataclass"
        ]
    },
    "ramblemaxx/ui/code.py": {
        "functions": [],
        "classes": [
            {
                "name": "CodePanelTool",
                "docstring": "Tool for managing the code panel."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LocalTool",
            "Dict",
            "Any",
            "Literal",
            "Optional"
        ]
    },
    "ramblemaxx/ui/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramblemaxx/ui/chat.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='user')"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "message_type",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "render",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ChatMessage",
                "docstring": "Individual chat message with role-based styling."
            },
            {
                "name": "ChatLog",
                "docstring": "Scrollable chat history with markdown support."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Static",
            "reactive",
            "Markdown",
            "Optional"
        ]
    },
    "ramblemaxx/tools/code.py": {
        "functions": [],
        "classes": [
            {
                "name": "CodePanelTool",
                "docstring": "Tool for managing the code panel."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LocalTool",
            "Dict",
            "Any",
            "Literal",
            "Optional"
        ]
    },
    "ramblemaxx/tools/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LocalTool",
            "ToolInterface",
            "ToolRegistry"
        ]
    },
    "ramblemaxx/tools/docs.py": {
        "functions": [],
        "classes": [
            {
                "name": "DocumentViewerTool",
                "docstring": "Tool for controlling the document viewer panel."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LocalTool",
            "Dict",
            "Any",
            "Literal",
            "Optional"
        ]
    },
    "ramblemaxx/tools/ui_tools.py": {
        "functions": [],
        "classes": [
            {
                "name": "ModelSelectorTool",
                "docstring": "Tool for managing model selection."
            },
            {
                "name": "ThemeSwitcherTool",
                "docstring": "Tool for controlling UI themes."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LocalTool",
            "Dict",
            "Any",
            "Literal",
            "Optional"
        ]
    },
    "ramblemaxx/tools/viz.py": {
        "functions": [],
        "classes": [
            {
                "name": "VisualizerTool",
                "docstring": "Tool for data visualization."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LocalTool",
            "Dict",
            "Any",
            "Literal",
            "Optional"
        ]
    },
    "boneyard/semantic_compressor/core/store.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "validate_timestamps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Validate and normalize timestamps in all contexts."
            },
            {
                "name": "_load_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Load or create store metadata."
            },
            {
                "name": "_create_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create fresh store metadata."
            },
            {
                "name": "_save_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Save store metadata."
            },
            {
                "name": "_load_contexts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Load all contexts from storage directory."
            },
            {
                "name": "_get_chain",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Internal method to get chain contexts."
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context",
                        "default": null
                    }
                ],
                "docstring": "Store a compressed context."
            },
            {
                "name": "get_recent_contexts",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=48)"
                    },
                    {
                        "name": "hours",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_conversation_summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get summary of conversation history."
            },
            {
                "name": "list",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "List all stored contexts."
            },
            {
                "name": "reindex",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Rebuild context index and chain relationships."
            },
            {
                "name": "get_date_range",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get date range of all contexts."
            },
            {
                "name": "get_date_range_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get human readable date range string."
            },
            {
                "name": "add_with_full",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context",
                        "default": null
                    }
                ],
                "docstring": "Store both compressed and full versions of a context."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "store_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_conversation_chain",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Public method to access conversation chains."
            },
            {
                "name": "find_contexts_by_timeframe",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Find contexts using natural language time reference."
            },
            {
                "name": "select_contexts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "candidates",
                        "default": null
                    }
                ],
                "docstring": "Select contexts within token budget with improved scoring."
            },
            {
                "name": "process_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Process message and select relevant contexts."
            },
            {
                "name": "build_chain",
                "parameters": [
                    {
                        "name": "start_id",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ContextStore",
                "docstring": "Manages basic storage and retrieval of contexts."
            },
            {
                "name": "ContextManager",
                "docstring": "Handles higher-level context operations and chain management."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Optional",
            "Any",
            "Union",
            "Tuple",
            "Path",
            "pickle",
            "logging",
            "dateparser",
            "datetime",
            "timedelta",
            "json",
            "numpy",
            "SemanticCompressor",
            "Context"
        ]
    },
    "boneyard/semantic_compressor/core/config.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize configuration manager."
            }
        ],
        "classes": [
            {
                "name": "APIConfig",
                "docstring": "API configuration including model settings."
            },
            {
                "name": "StorageConfig",
                "docstring": "Storage configuration for MagicScroll."
            },
            {
                "name": "InterfaceConfig",
                "docstring": "Interface configuration for both Ramble and RambleMAXX."
            },
            {
                "name": "Config",
                "docstring": "Central configuration management for Scramble."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "Optional",
            "Path",
            "yaml",
            "logging",
            "aiofiles",
            "dataclass",
            "datetime"
        ]
    },
    "boneyard/semantic_compressor/core/scroll.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "filter_view",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "models",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "since",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "until",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Get filtered view of the scroll."
            },
            {
                "name": "_get_context_thread",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Get the thread of entries related to a context."
            }
        ],
        "classes": [
            {
                "name": "ScrollEntry",
                "docstring": "A single entry in the scroll."
            },
            {
                "name": "Scroll",
                "docstring": "The continuous timeline of all interactions.\nThis is the core concept - everything else builds on this."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "datetime",
            "List",
            "Optional",
            "Dict",
            "Any",
            "UUID",
            "uuid4"
        ]
    },
    "boneyard/semantic_compressor/core/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Context",
            "SemanticCompressor",
            "ContextStore",
            "AnthropicClient"
        ]
    },
    "boneyard/semantic_compressor/core/model_coordinator.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize the coordinator with LLMHarness."
            },
            {
                "name": "detect_model_from_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Public method for detecting which model to use based on message content."
            },
            {
                "name": "_detect_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Internal model detection implementation."
            },
            {
                "name": "_build_system_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "contexts",
                        "default": null
                    }
                ],
                "docstring": "Build system message from contexts."
            }
        ],
        "classes": [
            {
                "name": "ModelCoordinator",
                "docstring": "Coordinates model interactions and maintains model state."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "datetime",
            "LLMHarness",
            "Context"
        ]
    },
    "boneyard/semantic_compressor/core/api.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value='claude-3-5-sonnet-latest')"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "compressor",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_context_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize the Anthropic client."
            },
            {
                "name": "_build_messages_from_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "contexts",
                        "default": null
                    }
                ],
                "docstring": "Convert contexts into a list of messages for the API."
            },
            {
                "name": "_build_system_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "contexts",
                        "default": null
                    }
                ],
                "docstring": "Build system message incorporating context themes and relevant information."
            },
            {
                "name": "send_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=1024)"
                    },
                    {
                        "name": "contexts",
                        "default": "Constant(value=0.7)"
                    },
                    {
                        "name": "max_tokens",
                        "default": null
                    },
                    {
                        "name": "temperature",
                        "default": null
                    }
                ],
                "docstring": "Send a message to Claude with conversation persistence."
            }
        ],
        "classes": [
            {
                "name": "AnthropicClient",
                "docstring": "Handles interaction with Anthropic's API with semantic compression and conversation persistence."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Optional",
            "Any",
            "Union",
            "Iterable",
            "anthropic",
            "pickle",
            "Message",
            "TextBlock",
            "ToolUseBlock",
            "ContentBlock",
            "TextBlockParam",
            "MessageParam",
            "NotGiven",
            "NOT_GIVEN",
            "logging",
            "datetime",
            "timedelta",
            "Context",
            "SemanticCompressor",
            "ContextManager",
            "global_stats"
        ]
    },
    "boneyard/semantic_compressor/core/context.py": {
        "functions": [
            {
                "name": "__eq__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "other",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__hash__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "text_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get full text content from compressed tokens."
            },
            {
                "name": "size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return the size of the compressed context in tokens."
            },
            {
                "name": "token_count",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get actual token count from metadata or estimate from compressed tokens."
            },
            {
                "name": "parent_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get parent context ID if it exists."
            },
            {
                "name": "summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Generate a brief summary of this context."
            }
        ],
        "classes": [
            {
                "name": "Context",
                "docstring": "Represents a compressed conversation context."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "field",
            "Dict",
            "List",
            "Any",
            "Optional",
            "Literal",
            "datetime",
            "numpy",
            "dateparser"
        ]
    },
    "boneyard/semantic_compressor/core/scroll_manager.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_detect_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Detect which model to use based on message."
            }
        ],
        "classes": [
            {
                "name": "ScrollManager",
                "docstring": "Manages the scroll and model interactions."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Scroll",
            "ScrollEntry",
            "LLMHarness"
        ]
    },
    "boneyard/semantic_compressor/core/stats.py": {
        "functions": [
            {
                "name": "compression_ratio",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "tokens_saved",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "record_compression",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "original_tokens",
                        "default": null
                    },
                    {
                        "name": "compressed_tokens",
                        "default": null
                    },
                    {
                        "name": "similarity_score",
                        "default": null
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Record a new compression operation"
            },
            {
                "name": "record_token_usage",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input_tokens",
                        "default": null
                    },
                    {
                        "name": "output_tokens",
                        "default": null
                    },
                    {
                        "name": "context_tokens",
                        "default": null
                    }
                ],
                "docstring": "Record token usage for a conversation turn"
            },
            {
                "name": "get_compression_summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "hours",
                        "default": null
                    }
                ],
                "docstring": "Get summary statistics for compression operations"
            },
            {
                "name": "get_token_usage_summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "hours",
                        "default": null
                    }
                ],
                "docstring": "Get summary statistics for token usage"
            },
            {
                "name": "generate_stats_table",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "hours",
                        "default": null
                    }
                ],
                "docstring": "Generate a rich table with stats for CLI display"
            }
        ],
        "classes": [
            {
                "name": "CompressionStats",
                "docstring": null
            },
            {
                "name": "StatsTracker",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "Dict",
            "List",
            "Optional",
            "datetime",
            "timedelta",
            "UTC",
            "numpy",
            "logging",
            "Table"
        ]
    },
    "boneyard/semantic_compressor/core/compressor.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='sentence-transformers/all-MiniLM-L6-v2')"
                    },
                    {
                        "name": "model_name",
                        "default": "Constant(value=128)"
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_handle_short_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cleaned_lines",
                        "default": null
                    }
                ],
                "docstring": "Process short text into a single chunk."
            },
            {
                "name": "set_compression_level",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Set compression parameters based on level."
            },
            {
                "name": "_should_combine_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunk1",
                        "default": null
                    },
                    {
                        "name": "chunk2",
                        "default": null
                    }
                ],
                "docstring": "Determine if two chunks should be combined based on compression level."
            },
            {
                "name": "split_into_sentences",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Enhanced sentence splitting based on compression level."
            },
            {
                "name": "_chunk_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Split text with enhanced compression control."
            },
            {
                "name": "_calculate_similarity",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "original_text",
                        "default": null
                    },
                    {
                        "name": "compressed_text",
                        "default": null
                    }
                ],
                "docstring": "Calculate semantic similarity between original and compressed text."
            },
            {
                "name": "compress",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Compress text with enhanced metadata and stats tracking."
            },
            {
                "name": "find_similar",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=0.1)"
                    },
                    {
                        "name": "contexts",
                        "default": null
                    },
                    {
                        "name": "top_k",
                        "default": null
                    },
                    {
                        "name": "recency_weight",
                        "default": null
                    }
                ],
                "docstring": "Find contexts using enhanced similarity scoring."
            },
            {
                "name": "save_current_chunk",
                "parameters": [],
                "docstring": "Helper to save current chunk if not empty."
            }
        ],
        "classes": [
            {
                "name": "CompressionLevel",
                "docstring": "Compression level settings."
            },
            {
                "name": "SemanticCompressor",
                "docstring": "Core compression engine for semantic compression of text."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "uuid",
            "numpy",
            "datetime",
            "UTC",
            "logging",
            "SentenceTransformer",
            "Context",
            "global_stats",
            "nltk",
            "sent_tokenize",
            "os",
            "zipfile"
        ]
    },
    "boneyard/semantic_compressor/core/app_bak.py": {
        "functions": [
            {
                "name": "cli",
                "parameters": [
                    {
                        "name": "ctx",
                        "default": null
                    }
                ],
                "docstring": "Ramble - Context-aware CLI chat interface"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_CONFIG', ctx=Load())"
                    },
                    {
                        "name": "config",
                        "default": null
                    }
                ],
                "docstring": "Initialize the CLI with core components."
            },
            {
                "name": "set_display",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "display",
                        "default": null
                    }
                ],
                "docstring": "Set the display component."
            },
            {
                "name": "set_output_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": "Set raw output handler (for RambleMAXX)."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ramble",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_mount",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Set up Ramble output capture."
            }
        ],
        "classes": [
            {
                "name": "ContextConfig",
                "docstring": "Configuration settings for context management."
            },
            {
                "name": "ScoringConfig",
                "docstring": "Configuration settings for context scoring."
            },
            {
                "name": "AppConfig",
                "docstring": "Main application configuration."
            },
            {
                "name": "RambleCLI",
                "docstring": null
            },
            {
                "name": "RambleDisplay",
                "docstring": "Display for the Ramble interface."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "sys",
            "os",
            "click",
            "datetime",
            "Optional",
            "Dict",
            "Any",
            "TypedDict",
            "SemanticCompressor",
            "ContextManager",
            "AnthropicClient",
            "console",
            "logger",
            "setup_logging",
            "show_welcome",
            "CommandHandler",
            "MessageHandler",
            "inspect",
            "reindex",
            "detailed_stats",
            "config",
            "console",
            "logger",
            "setup_logging",
            "prompt_user",
            "show_welcome",
            "CommandHandler",
            "MessageHandler",
            "Static",
            "Console",
            "RenderableType",
            "Markdown",
            "asyncio"
        ]
    },
    "boneyard/semantic_compressor/utils/results_manager.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "store_level_result",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    },
                    {
                        "name": "metrics",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_level_result",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "save_compression_result",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "test_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metrics",
                        "default": null
                    },
                    {
                        "name": "expectations",
                        "default": null
                    },
                    {
                        "name": "passed",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ResultsManager",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "datetime",
            "UTC",
            "Dict",
            "Any",
            "Optional",
            "json"
        ]
    },
    "boneyard/semantic_compressor/utils/test_SemanticCompressor.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "docs/scrambled_archive_do_not_read/architecture_diagrams/20241215/interface_base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize interface."
            },
            {
                "name": "format_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Format standard prompt with timestamp."
            },
            {
                "name": "get_capabilities",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return interface capabilities."
            },
            {
                "name": "has_capability",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "capability",
                        "default": null
                    }
                ],
                "docstring": "Check if interface has specific capability."
            }
        ],
        "classes": [
            {
                "name": "InterfaceBase",
                "docstring": "Base class for scramble interfaces."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "ABC",
            "abstractmethod",
            "asyncio",
            "datetime"
        ]
    },
    "scramble/interface/ramble_interface.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_model_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": "Set the model name to use.\n\nArgs:\n    name: The name of the model to use"
            },
            {
                "name": "format_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Format prompt based on current style."
            },
            {
                "name": "format_model_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Format prompt for model responses."
            }
        ],
        "classes": [
            {
                "name": "RambleInterface",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Literal",
            "Optional",
            "Console",
            "Coordinator",
            "InterfaceBase",
            "get_logger",
            "os"
        ]
    },
    "scramble/interface/message_controller.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "interface",
                        "default": null
                    }
                ],
                "docstring": "Initialize with reference to parent interface."
            },
            {
                "name": "_store_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Store the message and response as context."
            },
            {
                "name": "process_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "use_all_contexts",
                        "default": null
                    }
                ],
                "docstring": "Select relevant contexts for the message."
            }
        ],
        "classes": [
            {
                "name": "MessageController",
                "docstring": "Handles message processing and model interactions."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Dict",
            "Any",
            "datetime",
            "dateparser",
            "Context",
            "uuid4",
            "numpy",
            "Context"
        ]
    },
    "scramble/interface/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RambleInterface",
            "InterfaceBase"
        ]
    },
    "scramble/interface/interface_base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize interface."
            },
            {
                "name": "format_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Format prompt for display."
            }
        ],
        "classes": [
            {
                "name": "InterfaceBase",
                "docstring": "Base interface that supports core Scramble functionality."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Dict",
            "Any",
            "Optional",
            "datetime",
            "asyncio",
            "get_logger",
            "Coordinator"
        ]
    },
    "scramble/interface/tool_controller.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "interface",
                        "default": null
                    }
                ],
                "docstring": "Initialize with reference to parent interface."
            }
        ],
        "classes": [
            {
                "name": "ToolController",
                "docstring": "Handles tool registration and execution."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "ScrollTool",
            "LocalTool",
            "ToolRegistry"
        ]
    },
    "scramble/interface/maxx_interface.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/interface/observer_concept.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_expression_frame",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get current frame of animation."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='phi-2')"
                    },
                    {
                        "name": "model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "compose",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ObserverDisplay",
                "docstring": "A rich animated observer display."
            },
            {
                "name": "LocalAIHandler",
                "docstring": "Handles local AI processing for observer."
            },
            {
                "name": "RambleMaxx",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Static",
            "ComposeResult",
            "Container",
            "Animation",
            "Console",
            "Text",
            "Image",
            "numpy"
        ]
    },
    "scramble/coordinator/coordinator.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize the coordination system."
            },
            {
                "name": "_get_responding_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "mentioned_model",
                        "default": null
                    }
                ],
                "docstring": "Determine which model should respond."
            },
            {
                "name": "find_model_mentions",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Find all @model mentions in a message."
            },
            {
                "name": "get_active_models",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get list of currently active model names."
            }
        ],
        "classes": [
            {
                "name": "Coordinator",
                "docstring": "Coordinator for model and scroll system."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "cast",
            "datetime",
            "re",
            "get_logger",
            "ActiveConversation",
            "TemporalProcessor",
            "MessageEnricher",
            "MagicScroll",
            "LLMModelBase",
            "AnthropicLLMModel",
            "OllamaLLMModel",
            "ConfigManager"
        ]
    },
    "scramble/coordinator/active_conversation.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize conversation state."
            },
            {
                "name": "add_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Add a model to the conversation."
            },
            {
                "name": "remove_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Remove a model from the conversation."
            },
            {
                "name": "parse_addressed_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Parse message for @model addressing with case-insensitive matching.\nReturns (addressed_model, cleaned_message)"
            },
            {
                "name": "should_model_respond",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Determine if a model should respond based on conversation state."
            },
            {
                "name": "get_context_for_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Get any missed context for a model."
            },
            {
                "name": "get_last_n_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "n",
                        "default": null
                    }
                ],
                "docstring": "Get the last n messages from the conversation."
            },
            {
                "name": "get_messages_since",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "timestamp",
                        "default": null
                    }
                ],
                "docstring": "Get all messages since a specific timestamp."
            },
            {
                "name": "format_conversation",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Format the conversation for storage."
            },
            {
                "name": "format_conversation_for_storage",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Format conversation for storage with metadata."
            }
        ],
        "classes": [
            {
                "name": "ConversationMessage",
                "docstring": "Represents a single message in the conversation."
            },
            {
                "name": "ActiveConversation",
                "docstring": "Represents a live conversation session."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "field",
            "datetime",
            "Set",
            "List",
            "Optional",
            "Dict",
            "Any"
        ]
    },
    "scramble/coordinator/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Coordinator",
            "ActiveConversation"
        ]
    },
    "scramble/coordinator/message_enricher.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "magic_scroll",
                        "default": null
                    },
                    {
                        "name": "temporal_processor",
                        "default": null
                    }
                ],
                "docstring": "Initialize with required components."
            },
            {
                "name": "_check_memory_triggers",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Check for memory trigger patterns and return matches with their patterns."
            },
            {
                "name": "_extract_topics_from_matches",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "matches",
                        "default": null
                    }
                ],
                "docstring": "Extract relevant topics from the memory trigger matches."
            },
            {
                "name": "_format_enriched_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context",
                        "default": null
                    },
                    {
                        "name": "original_message",
                        "default": null
                    }
                ],
                "docstring": "Format the enriched context with the original message."
            }
        ],
        "classes": [
            {
                "name": "EnrichedContext",
                "docstring": "Container for different types of enriched context."
            },
            {
                "name": "MessageEnricher",
                "docstring": "Enriches messages with relevant historical context."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Set",
            "Tuple",
            "dataclass",
            "field",
            "datetime",
            "timedelta",
            "re",
            "get_logger",
            "MagicScroll",
            "EntryType",
            "TemporalProcessor",
            "TemporalReference"
        ]
    },
    "scramble/coordinator/temporal_processor.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse_temporal_references",
                "parameters": [
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Parse temporal references from message content using dateparser."
            }
        ],
        "classes": [
            {
                "name": "TemporalReference",
                "docstring": "Type for temporal reference information."
            },
            {
                "name": "TemporalProcessor",
                "docstring": "Processes temporal references in messages."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Dict",
            "Any",
            "Optional",
            "dateparser"
        ]
    },
    "scramble/model_config/config_manager.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize configuration manager."
            }
        ],
        "classes": [
            {
                "name": "ConfigManager",
                "docstring": "Manages model configurations and API keys."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "Optional",
            "Path",
            "yaml",
            "logging",
            "aiofiles"
        ]
    },
    "scramble/magicscroll/ms_search.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "index",
                        "default": null
                    }
                ],
                "docstring": "Initialize with reference to MSIndex."
            }
        ],
        "classes": [
            {
                "name": "MSSearch",
                "docstring": "Handles search operations across Neo4j and Redis."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "TYPE_CHECKING",
            "datetime",
            "dataclass",
            "NodeWithScore",
            "QueryBundle",
            "PGRetriever",
            "VectorContextRetriever",
            "MetadataFilter",
            "MetadataFilters",
            "FilterOperator",
            "MSEntry",
            "EntryType",
            "SearchResult",
            "get_logger",
            "MSIndex"
        ]
    },
    "scramble/magicscroll/ms_store.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='magicscroll')"
                    },
                    {
                        "name": "namespace",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "redis_client",
                        "default": null
                    }
                ],
                "docstring": "Initialize store with Redis client."
            },
            {
                "name": "redis",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Access to Redis client."
            }
        ],
        "classes": [
            {
                "name": "RedisStore",
                "docstring": "Redis storage for MagicScroll entries using LlamaIndex RedisDocumentStore."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Redis",
            "Optional",
            "Dict",
            "Any",
            "logging",
            "Document",
            "RedisDocumentStore",
            "MSEntry",
            "asyncio",
            "functools"
        ]
    },
    "scramble/magicscroll/ms_entity.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize with compiled regex patterns."
            },
            {
                "name": "extract_entities",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Extract entities from content using all available methods."
            },
            {
                "name": "_extract_structured_entities",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Extract entities using regex patterns."
            },
            {
                "name": "_extract_noun_phrases",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Extract potential noun phrases using basic patterns.\nThis is a simple implementation - could be enhanced with proper NLP."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "graph_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize with reference to graph manager."
            }
        ],
        "classes": [
            {
                "name": "ExtractedEntity",
                "docstring": "Represents an extracted entity with context."
            },
            {
                "name": "EntityExtractor",
                "docstring": "Extracts entities from conversation content."
            },
            {
                "name": "EntityManager",
                "docstring": "Manages entity relationships and metadata."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Set",
            "Dict",
            "Any",
            "Optional",
            "re",
            "dataclass",
            "get_logger"
        ]
    },
    "scramble/magicscroll/ms_index.py": {
        "functions": [
            {
                "name": "literal_query",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Create a Query object from a string, casting to LiteralString."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize basic attributes."
            },
            {
                "name": "add_entry",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "entry",
                        "default": null
                    }
                ],
                "docstring": "Synchronous add entry - called internally."
            }
        ],
        "classes": [
            {
                "name": "MSIndex",
                "docstring": "LlamaIndex implementation for MagicScroll."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "datetime",
            "timezone",
            "timedelta",
            "List",
            "Dict",
            "Any",
            "Optional",
            "cast",
            "AsyncGraphDatabase",
            "AsyncDriver",
            "Query",
            "LiteralString",
            "Settings",
            "Document",
            "StorageContext",
            "PropertyGraphIndex",
            "Neo4jPropertyGraphStore",
            "SentenceSplitter",
            "HuggingFaceEmbedding",
            "RedisDocumentStore",
            "Config",
            "get_logger",
            "MSEntry",
            "EntryType",
            "MSGraphManager",
            "RedisStore",
            "SearchResult",
            "MSSearch",
            "asyncio",
            "functools",
            "MSSearch",
            "MSSearch",
            "Ollama"
        ]
    },
    "scramble/magicscroll/ms_graph.py": {
        "functions": [
            {
                "name": "literal_query",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Create a Query object from a string, casting to LiteralString."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "neo4j_driver",
                        "default": null
                    }
                ],
                "docstring": "Initialize with Neo4j driver."
            }
        ],
        "classes": [
            {
                "name": "MSGraphManager",
                "docstring": "Handles Neo4j graph operations for MagicScroll."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Set",
            "datetime",
            "asyncio",
            "AsyncGraphDatabase",
            "AsyncDriver",
            "Query",
            "Neo4jError",
            "get_logger",
            "MSEntry",
            "LiteralString",
            "cast"
        ]
    },
    "scramble/magicscroll/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MagicScroll",
            "MSEntry",
            "MSConversation",
            "MSDocument",
            "MSImage",
            "MSCode",
            "EntryType",
            "MSIndex",
            "RedisStore",
            "MSSearch",
            "MSGraphManager",
            "SearchResult"
        ]
    },
    "scramble/magicscroll/ms_types.py": {
        "functions": [],
        "classes": [
            {
                "name": "SearchResult",
                "docstring": "Container for search results with source and confidence information."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "dataclass",
            "MSEntry"
        ]
    },
    "scramble/magicscroll/ms_entry.py": {
        "functions": [
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert entry to dictionary format."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Create entry from dictionary format."
            },
            {
                "name": "from_neo4j",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Create entry from Neo4j node.\n\nNote: The node parameter is typed as Any to avoid circular imports,\nbut it should be a neo4j.graph.Node."
            },
            {
                "name": "to_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert entry to LlamaIndex Document for storage/indexing."
            },
            {
                "name": "from_document",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": "Create entry from LlamaIndex Document.\n\nNote: This assumes the document was created from an MSEntry.\nIt reconstructs the original entry type from metadata."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "content",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "EntryType",
                "docstring": "Types of entries in MagicScroll."
            },
            {
                "name": "MSEntry",
                "docstring": "Base class for MagicScroll entries."
            },
            {
                "name": "MSConversation",
                "docstring": "A conversation entry - fully implemented."
            },
            {
                "name": "MSDocument",
                "docstring": "A document entry (PDF, text, etc) - NOT YET IMPLEMENTED.\nWill require appropriate LlamaIndex Reader (PDFReader, etc)\nto convert to text before storage."
            },
            {
                "name": "MSImage",
                "docstring": "An image entry - NOT YET IMPLEMENTED.\nWill require ImageReader or similar to extract/generate \ntext content before storage."
            },
            {
                "name": "MSCode",
                "docstring": "A code entry - NOT YET IMPLEMENTED.\nMay require special handling for language-specific parsing\nor documentation extraction."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "field",
            "datetime",
            "Enum",
            "Dict",
            "Any",
            "Optional",
            "uuid",
            "Document"
        ]
    },
    "scramble/magicscroll/magic_scroll.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "config",
                        "default": null
                    }
                ],
                "docstring": "Initialize with config."
            }
        ],
        "classes": [
            {
                "name": "MagicScroll",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Union",
            "datetime",
            "MSEntry",
            "EntryType",
            "MSIndex",
            "MSSearch",
            "SearchResult",
            "get_logger",
            "Config",
            "config"
        ]
    },
    "scramble/utils/logging.py": {
        "functions": [
            {
                "name": "setup_logging",
                "parameters": [
                    {
                        "name": "level",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "debug_session",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Configure logging with minimal format."
            },
            {
                "name": "get_logger",
                "parameters": [
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": "Get a logger with the proper format."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "sys",
            "Optional",
            "List",
            "RichHandler",
            "Console",
            "Path",
            "datetime",
            "Config"
        ]
    },
    "scramble/utils/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/utils/migrate_contexts.py": {
        "functions": [
            {
                "name": "safe_unpickle",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": "Safely unpickle a context file with error handling."
            },
            {
                "name": "extract_text_content",
                "parameters": [
                    {
                        "name": "compressed_tokens",
                        "default": null
                    }
                ],
                "docstring": "Extract text content from compressed tokens."
            },
            {
                "name": "create_full_file",
                "parameters": [
                    {
                        "name": "context_data",
                        "default": null
                    },
                    {
                        "name": "base_path",
                        "default": null
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Create a .full file containing the conversation text."
            },
            {
                "name": "migrate_contexts",
                "parameters": [
                    {
                        "name": "ramble_dir",
                        "default": "Constant(value='~/.ramble')"
                    }
                ],
                "docstring": "Migrate existing .ctx files to the new storage hierarchy."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "pickle",
            "Path",
            "json",
            "datetime",
            "Dict",
            "Any",
            "List",
            "Optional"
        ]
    },
    "scramble/service_client/base_service_client.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/service_client/service_manager.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "server_id",
                        "default": null
                    },
                    {
                        "name": "config",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_server",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "server_id",
                        "default": null
                    }
                ],
                "docstring": "Get a server by ID"
            }
        ],
        "classes": [
            {
                "name": "ServerConfig",
                "docstring": "Configuration for a tool server"
            },
            {
                "name": "ServerCommand",
                "docstring": "Command to start a server"
            },
            {
                "name": "ToolServer",
                "docstring": "Represents a single tool server"
            },
            {
                "name": "ToolServerManager",
                "docstring": "Manages multiple tool servers"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "Dict",
            "Optional",
            "List",
            "asyncio",
            "logging",
            "ToolClient"
        ]
    },
    "scramble/service_client/tool_service_client.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/service_client/contextual_service_client.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/model/ollama_llm_model.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Basic initialization."
            },
            {
                "name": "_prepare_chat_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert message history to Ollama-compatible chat format."
            },
            {
                "name": "_get_model_options",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "additional_options",
                        "default": null
                    }
                ],
                "docstring": "Get model options from config and additional options."
            },
            {
                "name": "get_model_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get information about the current model."
            }
        ],
        "classes": [
            {
                "name": "OllamaModelOptions",
                "docstring": "Type definition for Ollama model options."
            },
            {
                "name": "OllamaLLMModel",
                "docstring": "Implementation for Ollama-based local LLM models."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "AsyncGenerator",
            "Union",
            "Optional",
            "List",
            "TypedDict",
            "logging",
            "AsyncClient",
            "LLMModelBase",
            "Message"
        ]
    },
    "scramble/model/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AnthropicLLMModel",
            "LLMModelBase",
            "ModelBase"
        ]
    },
    "scramble/model/model_base.py": {
        "functions": [],
        "classes": [
            {
                "name": "ModelBase",
                "docstring": "Base abstract class for all models"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "ClassVar"
        ]
    },
    "scramble/model/oai_llm_model.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "OAILLMModel",
                "docstring": "OpenAI model implementation."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "AsyncGenerator",
            "List",
            "cast",
            "MessageParam",
            "ModelParam",
            "logging",
            "LLMModelBase"
        ]
    },
    "scramble/model/other_llm_model.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Basic initialization."
            },
            {
                "name": "get_model_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get information about the current model."
            }
        ],
        "classes": [
            {
                "name": "OtherLLMModel",
                "docstring": "Implementation for other LLM providers."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "AsyncGenerator",
            "Union",
            "Optional",
            "LLMModelBase"
        ]
    },
    "scramble/model/anthropic_llm_model.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize the Anthropic model."
            },
            {
                "name": "_format_messages_with_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Format messages for the Anthropic API with context."
            },
            {
                "name": "_create_anthropic_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "role",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Create a message in Anthropic's format."
            },
            {
                "name": "get_model_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get information about model capabilities."
            }
        ],
        "classes": [
            {
                "name": "AnthropicLLMModel",
                "docstring": "Implementation for Anthropic Claude models using official SDK."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "AsyncGenerator",
            "List",
            "cast",
            "Optional",
            "Union",
            "AsyncAnthropic",
            "MessageParam",
            "ModelParam",
            "logging",
            "datetime",
            "LLMModelBase",
            "Message",
            "Role"
        ]
    },
    "scramble/model/llm_model_base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Basic initialization only. Use create() instead."
            },
            {
                "name": "_trim_context_if_needed",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Trim context buffer if it exceeds max length."
            },
            {
                "name": "_add_to_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "role",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Add a message to the context buffer."
            }
        ],
        "classes": [
            {
                "name": "Message",
                "docstring": "Type for standardized message format."
            },
            {
                "name": "LLMModelBase",
                "docstring": "Base class adding Scramble-specific features to LLM models."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "AsyncGenerator",
            "Union",
            "List",
            "Literal",
            "TypedDict",
            "Optional",
            "datetime",
            "asyncio",
            "time",
            "logging",
            "ABC",
            "abstractmethod",
            "ModelBase",
            "ConfigManager"
        ]
    },
    "scramble/tool/tool_registry.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ToolRegistry",
                "docstring": "Registry for all types of tools."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Dict",
            "Any",
            "Literal",
            "Optional",
            "LocalTool",
            "MCPTool",
            "DynamicTool"
        ]
    },
    "scramble/tool/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/tool/tool_interface.py": {
        "functions": [],
        "classes": [
            {
                "name": "ToolInterface",
                "docstring": "Interface that UIs must implement for tool support."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Dict",
            "Any",
            "ScrollTool"
        ]
    },
    "scramble/tool/tool_base.py": {
        "functions": [],
        "classes": [
            {
                "name": "ScrollTool",
                "docstring": "Base class for all tools."
            },
            {
                "name": "LocalTool",
                "docstring": "Tool that runs locally in the same process."
            },
            {
                "name": "MCPTool",
                "docstring": "Tool that runs on a remote MCP server."
            },
            {
                "name": "DynamicTool",
                "docstring": "Tool created by models at runtime."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Dict",
            "Any",
            "Optional",
            "List",
            "Literal",
            "ScrollEntry"
        ]
    },
    "scramble/interface/widgets/base_textual_widget.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "register_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "method",
                        "default": null
                    }
                ],
                "docstring": "Register a widget method as a tool."
            },
            {
                "name": "set_interface",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "interface",
                        "default": null
                    }
                ],
                "docstring": "Connect widget to interface."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "widget",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "BaseTextualWidget",
                "docstring": "Base class for Scramble widgets."
            },
            {
                "name": "BaseMessage",
                "docstring": "Base message type for Scramble Base widgets."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Widget",
            "Dict",
            "Any",
            "Optional",
            "LocalTool",
            "asyncio"
        ]
    },
    "scramble/interface/widgets/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "scramble/interface/widgets/chat_terminal_widget.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "update_terminal_size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Update terminal size based on widget size."
            },
            {
                "name": "write",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Write text to the terminal."
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear the terminal screen."
            },
            {
                "name": "render",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Render the terminal content."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sender",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ChatTerminalWidget",
                "docstring": "A terminal-like widget optimized for chat interactions."
            },
            {
                "name": "Input",
                "docstring": "Message sent when user submits input."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Message",
            "Key",
            "Segment",
            "Style",
            "pyte",
            "BaseTextualWidget"
        ]
    },
    "scramble/db/neo4j/scripts/apply_schema.py": {
        "functions": [
            {
                "name": "wait_for_neo4j",
                "parameters": [
                    {
                        "name": "uri",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "max_attempts",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "delay",
                        "default": null
                    }
                ],
                "docstring": "Wait for Neo4j to become available"
            },
            {
                "name": "apply_schema_file",
                "parameters": [
                    {
                        "name": "driver",
                        "default": null
                    },
                    {
                        "name": "schema_file",
                        "default": null
                    }
                ],
                "docstring": "Apply a single schema file"
            },
            {
                "name": "main",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "time",
            "GraphDatabase",
            "Path"
        ]
    },
    "scramble/tool/mcp/protocol.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool_interface",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MCPHandler",
                "docstring": "Handles MCP (Managed Chat Protocol) interactions."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Any",
            "Optional",
            "MCPCommand",
            "MCPResponse",
            "ToolInterface"
        ]
    },
    "scramble/tool/mcp/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MCPHandler",
            "MCPCommand",
            "MCPResponse"
        ]
    },
    "scramble/tool/mcp/types.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramble/ui/console.py": {
        "functions": [
            {
                "name": "get_prompt_cyberpunk",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "get_prompt_minimal",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "get_prompt_terminal",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "get_prompt_scroll",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "prompt_user",
                "parameters": [
                    {
                        "name": "prompt_style",
                        "default": "Constant(value='scroll')"
                    }
                ],
                "docstring": "Get user input with styled prompt."
            },
            {
                "name": "setup_logging",
                "parameters": [
                    {
                        "name": "console",
                        "default": null
                    }
                ],
                "docstring": "Configure application logging with rich handler."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Console",
            "RichHandler",
            "Prompt",
            "Style",
            "datetime",
            "logging"
        ]
    },
    "ramble/ui/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramble/ui/welcome.py": {
        "functions": [
            {
                "name": "show_welcome",
                "parameters": [
                    {
                        "name": "store",
                        "default": null
                    }
                ],
                "docstring": "Show welcome message and stats."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Console",
            "Panel",
            "Table",
            "ContextStore"
        ]
    },
    "ramble/ui/panels.py": {
        "functions": [
            {
                "name": "show_help",
                "parameters": [],
                "docstring": "Show help message."
            },
            {
                "name": "show_contexts",
                "parameters": [
                    {
                        "name": "store",
                        "default": null
                    }
                ],
                "docstring": "Show stored contexts with semantic chunks."
            },
            {
                "name": "show_stats",
                "parameters": [
                    {
                        "name": "cli",
                        "default": null
                    }
                ],
                "docstring": "Show enhanced system statistics."
            },
            {
                "name": "show_compression_analysis",
                "parameters": [
                    {
                        "name": "cli",
                        "default": null
                    }
                ],
                "docstring": "Show detailed compression analysis."
            },
            {
                "name": "show_similarity_debug",
                "parameters": [
                    {
                        "name": "cli",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Show similarity scores for all contexts."
            },
            {
                "name": "add_stats_row",
                "parameters": [
                    {
                        "name": "timeframe",
                        "default": null
                    },
                    {
                        "name": "stats",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Table",
            "Panel",
            "Markdown",
            "datetime",
            "console",
            "logger"
        ]
    },
    "ramble/tools/terminal.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramble/tools/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramble/commands/config.py": {
        "functions": [
            {
                "name": "config",
                "parameters": [],
                "docstring": "Show current configuration settings."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "click",
            "Table",
            "Panel",
            "console",
            "RambleCLI"
        ]
    },
    "ramble/commands/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramble/commands/inspect.py": {
        "functions": [
            {
                "name": "inspect",
                "parameters": [
                    {
                        "name": "context_id",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Inspect context files and compare full/compressed versions."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "click",
            "pickle",
            "Table",
            "console",
            "RambleCLI"
        ]
    },
    "ramble/commands/stats.py": {
        "functions": [
            {
                "name": "detailed_stats",
                "parameters": [
                    {
                        "name": "hours",
                        "default": null
                    }
                ],
                "docstring": "Show detailed statistics for the last N hours."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "click",
            "Table",
            "Panel",
            "console",
            "RambleCLI"
        ]
    },
    "ramble/commands/reindex.py": {
        "functions": [
            {
                "name": "reindex",
                "parameters": [],
                "docstring": "Rebuild context index from stored files."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "click",
            "Table",
            "console",
            "RambleCLI"
        ]
    },
    "ramble/handlers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "ramble/handlers/debug.py": {
        "functions": [
            {
                "name": "toggle_debug",
                "parameters": [
                    {
                        "name": "cmd",
                        "default": null
                    }
                ],
                "docstring": "Toggle debug mode."
            },
            {
                "name": "show_context_dates",
                "parameters": [
                    {
                        "name": "cli",
                        "default": null
                    }
                ],
                "docstring": "Debug helper to show all context dates."
            },
            {
                "name": "show_context_selection",
                "parameters": [
                    {
                        "name": "cli",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Debug helper to show context selection process."
            },
            {
                "name": "inspect_contexts",
                "parameters": [
                    {
                        "name": "cli",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_id",
                        "default": null
                    }
                ],
                "docstring": "Inspect context files and compare versions."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Optional",
            "Table",
            "Text",
            "console",
            "logger"
        ]
    },
    "ramble/handlers/messages.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cli",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "process_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "use_all_contexts",
                        "default": null
                    }
                ],
                "docstring": "Process message and select relevant contexts."
            }
        ],
        "classes": [
            {
                "name": "MessageHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Context",
            "console",
            "logger",
            "dateparser",
            "datetime",
            "Markdown"
        ]
    },
    "ramble/handlers/commands.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cli",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "handle_command",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cmd",
                        "default": null
                    }
                ],
                "docstring": "Handle CLI commands."
            },
            {
                "name": "handle_sim_command",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "args",
                        "default": null
                    }
                ],
                "docstring": "Handle similarity command."
            },
            {
                "name": "handle_test_command",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "args",
                        "default": null
                    }
                ],
                "docstring": "Handle test command."
            }
        ],
        "classes": [
            {
                "name": "CommandHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Optional",
            "Table",
            "Panel",
            "console",
            "logger",
            "panels",
            "debug"
        ]
    },
    "build/lib/src/scramble/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Context",
            "SemanticCompressor",
            "ContextStore",
            "AnthropicClient"
        ]
    },
    "build/lib/src/scramble/__main__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "cli"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/service_context.py": {
        "functions": [
            {
                "name": "set_global_service_context",
                "parameters": [
                    {
                        "name": "service_context",
                        "default": null
                    }
                ],
                "docstring": "Helper function to set the global service context."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Create a ServiceContext from defaults.\n\nNOTE: Deprecated, use llama_index.settings.Settings instead or pass in\nmodules to local functions/methods/interfaces."
            }
        ],
        "classes": [
            {
                "name": "ServiceContext",
                "docstring": "Service Context container.\n\nNOTE: Deprecated, use llama_index.settings.Settings instead or pass in\nmodules to local functions/methods/interfaces."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/image_retriever.py": {
        "functions": [
            {
                "name": "text_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve image nodes given query or single image input.\n\nArgs:\n    str_or_query_bundle (QueryType): a query text\n    string or a QueryBundle object."
            },
            {
                "name": "_text_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve image nodes or documents given query text.\n\nImplemented by the user."
            },
            {
                "name": "image_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve image nodes given single image input.\n\nArgs:\n    str_or_query_bundle (QueryType): a image path\n    string or a QueryBundle object."
            },
            {
                "name": "_image_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve image nodes or documents given image.\n\nImplemented by the user."
            }
        ],
        "classes": [
            {
                "name": "BaseImageRetriever",
                "docstring": "Base Image Retriever Abstraction."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "List",
            "QueryBundle",
            "QueryType",
            "DispatcherSpanMixin",
            "PromptMixin",
            "NodeWithScore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/async_utils.py": {
        "functions": [
            {
                "name": "asyncio_module",
                "parameters": [
                    {
                        "name": "show_progress",
                        "default": "Constant(value=False)"
                    }
                ],
                "docstring": null
            },
            {
                "name": "asyncio_run",
                "parameters": [
                    {
                        "name": "coro",
                        "default": null
                    }
                ],
                "docstring": "Gets an existing event loop to run the coroutine.\n\nIf there is no existing event loop, creates a new one."
            },
            {
                "name": "run_async_tasks",
                "parameters": [
                    {
                        "name": "tasks",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value='Running async tasks')"
                    },
                    {
                        "name": "progress_bar_desc",
                        "default": null
                    }
                ],
                "docstring": "Run a list of async tasks."
            },
            {
                "name": "chunks",
                "parameters": [
                    {
                        "name": "iterable",
                        "default": null
                    },
                    {
                        "name": "size",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_asyncio_module",
                "parameters": [
                    {
                        "name": "show_progress",
                        "default": "Constant(value=False)"
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "zip_longest",
            "Any",
            "Coroutine",
            "Iterable",
            "List",
            "Optional",
            "TypeVar",
            "llama_index.core.instrumentation",
            "tqdm_asyncio",
            "tqdm_asyncio",
            "tqdm_asyncio",
            "nest_asyncio",
            "tqdm"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/exec_utils.py": {
        "functions": [
            {
                "name": "_restricted_import",
                "parameters": [
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "globals",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "locals",
                        "default": "Tuple(elts=[], ctx=Load())"
                    },
                    {
                        "name": "fromlist",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_restricted_globals",
                "parameters": [
                    {
                        "name": "__globals",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_contains_protected_access",
                "parameters": [
                    {
                        "name": "code",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_verify_source_safety",
                "parameters": [
                    {
                        "name": "__source",
                        "default": null
                    }
                ],
                "docstring": "Verify that the source is safe to execute. For now, this means that it\ndoes not contain any references to private or dunder methods."
            },
            {
                "name": "safe_eval",
                "parameters": [
                    {
                        "name": "__source",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "__globals",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "__locals",
                        "default": null
                    }
                ],
                "docstring": "eval within safe global context."
            },
            {
                "name": "safe_exec",
                "parameters": [
                    {
                        "name": "__source",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "__globals",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "__locals",
                        "default": null
                    }
                ],
                "docstring": "eval within safe global context."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "visit_Name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "visit_Attribute",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DunderVisitor",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ast",
            "copy",
            "CodeType",
            "ModuleType",
            "Any",
            "Dict",
            "Mapping",
            "Sequence",
            "Union"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/constants.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "NullHandler",
            "Callable",
            "Optional",
            "Response",
            "set_global_handler",
            "IndexStructType",
            "MockEmbedding",
            "ComposableGraph",
            "DocumentSummaryIndex",
            "GPTDocumentSummaryIndex",
            "GPTKeywordTableIndex",
            "GPTListIndex",
            "GPTRAKEKeywordTableIndex",
            "GPTSimpleKeywordTableIndex",
            "GPTTreeIndex",
            "GPTVectorStoreIndex",
            "KeywordTableIndex",
            "KnowledgeGraphIndex",
            "ListIndex",
            "PropertyGraphIndex",
            "RAKEKeywordTableIndex",
            "SimpleKeywordTableIndex",
            "SummaryIndex",
            "TreeIndex",
            "VectorStoreIndex",
            "load_graph_from_storage",
            "load_index_from_storage",
            "load_indices_from_storage",
            "SQLDocumentContextBuilder",
            "PromptHelper",
            "BasePromptTemplate",
            "ChatPromptTemplate",
            "Prompt",
            "PromptTemplate",
            "SelectorPromptTemplate",
            "SimpleDirectoryReader",
            "download_loader",
            "get_response_synthesizer",
            "Document",
            "QueryBundle",
            "ServiceContext",
            "set_global_service_context",
            "Settings",
            "StorageContext",
            "SQLDatabase",
            "get_tokenizer",
            "set_global_tokenizer",
            "BaseCallbackHandler",
            "eval_type_backport"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/types.py": {
        "functions": [
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Parse, validate, and correct errors programmatically."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Format a query with structured output formatting instructions."
            },
            {
                "name": "format_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Format a list of messages with structured output formatting instructions."
            },
            {
                "name": "__get_pydantic_core_schema__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "source",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__get_pydantic_json_schema__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "core_schema",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "group",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "target",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Tuple(elts=[], ctx=Load())"
                    },
                    {
                        "name": "args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "BaseOutputParser",
                "docstring": "Output parser class."
            },
            {
                "name": "BasePydanticProgram",
                "docstring": "A base class for LLM-powered function that return a pydantic model.\n\nNote: this interface is not yet stable."
            },
            {
                "name": "PydanticProgramMode",
                "docstring": "Pydantic program mode."
            },
            {
                "name": "Thread",
                "docstring": "A wrapper for threading.Thread that copies the current context and uses the copy to run the target."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "threading",
            "ABC",
            "abstractmethod",
            "copy_context",
            "Enum",
            "partial",
            "Any",
            "AsyncGenerator",
            "Callable",
            "Dict",
            "Generator",
            "Generic",
            "List",
            "Optional",
            "Tuple",
            "Type",
            "TypeVar",
            "Union",
            "ChatMessage",
            "MessageRole",
            "BaseModel",
            "GetCoreSchemaHandler",
            "GetJsonSchemaHandler",
            "CoreSchema",
            "core_schema",
            "DispatcherSpanMixin"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/utils.py": {
        "functions": [
            {
                "name": "set_global_tokenizer",
                "parameters": [
                    {
                        "name": "tokenizer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_tokenizer",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "get_new_id",
                "parameters": [
                    {
                        "name": "d",
                        "default": null
                    }
                ],
                "docstring": "Get a new ID."
            },
            {
                "name": "get_new_int_id",
                "parameters": [
                    {
                        "name": "d",
                        "default": null
                    }
                ],
                "docstring": "Get a new integer ID."
            },
            {
                "name": "temp_set_attrs",
                "parameters": [
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Temporary setter.\n\nUtility class for setting a temporary value for an attribute on a class.\nTaken from: https://tinyurl.com/2p89xymh"
            },
            {
                "name": "retry_on_exceptions_with_backoff",
                "parameters": [
                    {
                        "name": "lambda_fn",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "errors_to_retry",
                        "default": "Constant(value=0.5)"
                    },
                    {
                        "name": "max_tries",
                        "default": "Constant(value=60.0)"
                    },
                    {
                        "name": "min_backoff_secs",
                        "default": null
                    },
                    {
                        "name": "max_backoff_secs",
                        "default": null
                    }
                ],
                "docstring": "Execute lambda function with retries and exponential backoff.\n\nArgs:\n    lambda_fn (Callable): Function to be called and output we want.\n    errors_to_retry (List[ErrorToRetry]): List of errors to retry.\n        At least one needs to be provided.\n    max_tries (int): Maximum number of tries, including the first. Defaults to 10.\n    min_backoff_secs (float): Minimum amount of backoff time between attempts.\n        Defaults to 0.5.\n    max_backoff_secs (float): Maximum amount of backoff time between attempts.\n        Defaults to 60."
            },
            {
                "name": "get_retry_on_exceptions_with_backoff_decorator",
                "parameters": [],
                "docstring": "Return a decorator that retries with exponential backoff on provided exceptions."
            },
            {
                "name": "truncate_text",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "max_length",
                        "default": null
                    }
                ],
                "docstring": "Truncate text to a maximum length."
            },
            {
                "name": "iter_batch",
                "parameters": [
                    {
                        "name": "iterable",
                        "default": null
                    },
                    {
                        "name": "size",
                        "default": null
                    }
                ],
                "docstring": "Iterate over an iterable in batches.\n\n>>> list(iter_batch([1,2,3,4,5], 3))\n[[1, 2, 3], [4, 5]]"
            },
            {
                "name": "concat_dirs",
                "parameters": [
                    {
                        "name": "dirname",
                        "default": null
                    },
                    {
                        "name": "basename",
                        "default": null
                    }
                ],
                "docstring": "Append basename to dirname, avoiding backslashes when running on windows.\n\nos.path.join(dirname, basename) will add a backslash before dirname if\nbasename does not end with a slash, so we make sure it does."
            },
            {
                "name": "get_tqdm_iterable",
                "parameters": [
                    {
                        "name": "items",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    },
                    {
                        "name": "desc",
                        "default": null
                    }
                ],
                "docstring": "Optionally get a tqdm iterable. Ensures tqdm.auto is used."
            },
            {
                "name": "count_tokens",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_transformer_tokenizer_fn",
                "parameters": [
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Args:\n    model_name(str): the model name of the tokenizer.\n                    For instance, fxmarty/tiny-llama-fast-tokenizer."
            },
            {
                "name": "get_cache_dir",
                "parameters": [],
                "docstring": "Locate a platform-appropriate cache directory for llama_index,\nand create it if it doesn't yet exist."
            },
            {
                "name": "add_sync_version",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Decorator for adding sync version of an async function. The sync version\nis added as a function attribute to the original function, func.\n\nArgs:\n    func(Any): the async function for which a sync variant will be built."
            },
            {
                "name": "get_color_mapping",
                "parameters": [
                    {
                        "name": "items",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "use_llama_index_colors",
                        "default": null
                    }
                ],
                "docstring": "Get a mapping of items to colors.\n\nArgs:\n    items (List[str]): List of items to be mapped to colors.\n    use_llama_index_colors (bool, optional): Flag to indicate\n    whether to use LlamaIndex colors or ANSI colors.\n        Defaults to True.\n\nReturns:\n    Dict[str, str]: Mapping of items to colors."
            },
            {
                "name": "_get_colored_text",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "color",
                        "default": null
                    }
                ],
                "docstring": "Get the colored version of the input text.\n\nArgs:\n    text (str): Input text.\n    color (str): Color to be applied to the text.\n\nReturns:\n    str: Colored version of the input text."
            },
            {
                "name": "print_text",
                "parameters": [
                    {
                        "name": "text",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "color",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "end",
                        "default": null
                    }
                ],
                "docstring": "Print the text with the specified color.\n\nArgs:\n    text (str): Text to be printed.\n    color (str, optional): Color to be applied to the text. Supported colors are:\n        llama_pink, llama_blue, llama_turquoise, llama_lavender,\n        red, green, yellow, blue, magenta, cyan, pink.\n    end (str, optional): String appended after the last character of the text.\n\nReturns:\n    None"
            },
            {
                "name": "infer_torch_device",
                "parameters": [],
                "docstring": "Infer the input to torch.device."
            },
            {
                "name": "unit_generator",
                "parameters": [
                    {
                        "name": "x",
                        "default": null
                    }
                ],
                "docstring": "A function that returns a generator of a single element.\n\nArgs:\n    x (Any): the element to build yield\n\nYields:\n    Any: the single element"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize NLTK stopwords and punkt."
            },
            {
                "name": "stopwords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get stopwords."
            },
            {
                "name": "encode",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_wrapper",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "GlobalsHelper",
                "docstring": "Helper to retrieve globals.\n\nHelpful for global caching of certain variables that can be expensive to load.\n(e.g. tokenization)"
            },
            {
                "name": "Tokenizer",
                "docstring": null
            },
            {
                "name": "ErrorToRetry",
                "docstring": "Exception types that should be retried.\n\nArgs:\n    exception_cls (Type[Exception]): Class of exception.\n    check_fn (Optional[Callable[[Any]], bool]]):\n        A function that takes an exception instance as input and returns\n        whether to retry."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "os",
            "random",
            "sys",
            "time",
            "traceback",
            "uuid",
            "contextmanager",
            "dataclass",
            "partial",
            "wraps",
            "islice",
            "Path",
            "Any",
            "AsyncGenerator",
            "Callable",
            "Dict",
            "Generator",
            "Iterable",
            "List",
            "Optional",
            "Protocol",
            "Set",
            "Type",
            "Union",
            "runtime_checkable",
            "llama_index.core",
            "llama_index.core",
            "nltk",
            "AutoTokenizer",
            "tiktoken",
            "tqdm",
            "torch",
            "nltk",
            "stopwords"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/settings.py": {
        "functions": [
            {
                "name": "llm",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the LLM."
            },
            {
                "name": "llm",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Set the LLM."
            },
            {
                "name": "pydantic_program_mode",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the pydantic program mode."
            },
            {
                "name": "pydantic_program_mode",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "pydantic_program_mode",
                        "default": null
                    }
                ],
                "docstring": "Set the pydantic program mode."
            },
            {
                "name": "embed_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the embedding model."
            },
            {
                "name": "embed_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": "Set the embedding model."
            },
            {
                "name": "global_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the global handler."
            },
            {
                "name": "global_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "eval_mode",
                        "default": null
                    }
                ],
                "docstring": "Set the global handler."
            },
            {
                "name": "callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the callback manager."
            },
            {
                "name": "callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set the callback manager."
            },
            {
                "name": "tokenizer",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the tokenizer."
            },
            {
                "name": "tokenizer",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tokenizer",
                        "default": null
                    }
                ],
                "docstring": "Set the tokenizer."
            },
            {
                "name": "node_parser",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the node parser."
            },
            {
                "name": "node_parser",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_parser",
                        "default": null
                    }
                ],
                "docstring": "Set the node parser."
            },
            {
                "name": "chunk_size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the chunk size."
            },
            {
                "name": "chunk_size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Set the chunk size."
            },
            {
                "name": "chunk_overlap",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the chunk overlap."
            },
            {
                "name": "chunk_overlap",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunk_overlap",
                        "default": null
                    }
                ],
                "docstring": "Set the chunk overlap."
            },
            {
                "name": "text_splitter",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the text splitter."
            },
            {
                "name": "text_splitter",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text_splitter",
                        "default": null
                    }
                ],
                "docstring": "Set the text splitter."
            },
            {
                "name": "prompt_helper",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the prompt helper."
            },
            {
                "name": "prompt_helper",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt_helper",
                        "default": null
                    }
                ],
                "docstring": "Set the prompt helper."
            },
            {
                "name": "num_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the number of outputs."
            },
            {
                "name": "num_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "num_output",
                        "default": null
                    }
                ],
                "docstring": "Set the number of outputs."
            },
            {
                "name": "context_window",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the context window."
            },
            {
                "name": "context_window",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "context_window",
                        "default": null
                    }
                ],
                "docstring": "Set the context window."
            },
            {
                "name": "transformations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the transformations."
            },
            {
                "name": "transformations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "transformations",
                        "default": null
                    }
                ],
                "docstring": "Set the transformations."
            }
        ],
        "classes": [
            {
                "name": "_Settings",
                "docstring": "Settings for the Llama Index, lazily initialized."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "Any",
            "Callable",
            "List",
            "Optional",
            "BaseEmbedding",
            "BaseCallbackHandler",
            "CallbackManager",
            "EmbedType",
            "resolve_embed_model",
            "PromptHelper",
            "LLM",
            "LLMType",
            "resolve_llm",
            "NodeParser",
            "SentenceSplitter",
            "TransformComponent",
            "PydanticProgramMode",
            "get_tokenizer",
            "set_global_tokenizer",
            "llama_index.core",
            "set_global_handler",
            "llama_index.core",
            "PreTrainedTokenizerBase",
            "partial"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/schema.py": {
        "functions": [
            {
                "name": "__get_pydantic_json_schema__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "core_schema",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get the class name, used as a unique ID in serialization.\n\nThis provides a key that makes serialization robust against actual class\nname changes."
            },
            {
                "name": "json",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "custom_model_dump",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    },
                    {
                        "name": "info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__getstate__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__setstate__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_json",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_json",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Transform nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get Object type."
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='ALL', ctx=Load())"
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": "Get object content."
            },
            {
                "name": "get_metadata_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='ALL', ctx=Load())"
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Metadata info string."
            },
            {
                "name": "set_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Set the content of the node."
            },
            {
                "name": "hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get hash of node."
            },
            {
                "name": "node_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "source_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Source object node.\n\nExtracted from the relationships field."
            },
            {
                "name": "prev_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Prev node."
            },
            {
                "name": "next_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Next node."
            },
            {
                "name": "parent_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Parent node."
            },
            {
                "name": "child_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Child nodes."
            },
            {
                "name": "ref_doc_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Deprecated: Get ref doc id."
            },
            {
                "name": "extra_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "extra_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get embedding.\n\nErrors if embedding is None."
            },
            {
                "name": "as_related_node_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get node as RelatedNodeInfo."
            },
            {
                "name": "validate_data",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "v",
                        "default": null
                    },
                    {
                        "name": "info",
                        "default": null
                    }
                ],
                "docstring": "If binary data was passed, store the resource as base64 and guess the mimetype when possible.\n\nIn case the model was built passing binary data but without a mimetype,\nwe try to guess it using the filetype library. To avoid resource-intense\noperations, we won't load the path or the URL to guess the mimetype."
            },
            {
                "name": "validate_mimetype",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "v",
                        "default": null
                    },
                    {
                        "name": "info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Generate a hash to uniquely identify the media resource.\n\nThe hash is generated based on the available content (data, path, text or url).\nReturns an empty string if no content is available."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get Object type."
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": "Get the text content for the node if available.\n\nProvided for backward compatibility, use self.text_resource directly instead."
            },
            {
                "name": "set_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Set the text content of the node.\n\nProvided for backward compatibility, set self.text_resource instead."
            },
            {
                "name": "hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Make TextNode forward-compatible with Node by supporting 'text_resource' in the constructor."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get Object type."
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": "Get object content."
            },
            {
                "name": "get_metadata_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='ALL', ctx=Load())"
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Metadata info string."
            },
            {
                "name": "set_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Set the content of the node."
            },
            {
                "name": "get_node_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get node info."
            },
            {
                "name": "get_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Deprecated: Get node info."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Make ImageNode forward-compatible with Node by supporting 'image_resource' in the constructor."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "resolve_image",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Resolve an image such that PIL can read it."
            },
            {
                "name": "hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get hash of node."
            },
            {
                "name": "dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_text_node",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "index_id",
                        "default": null
                    }
                ],
                "docstring": "Create index node from text node."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_score",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Get score."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "id_",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Keeps backward compatibility with old 'Document' versions.\n\nIf 'text' was passed, store it in 'text_resource'.\nIf 'doc_id' was passed, store it in 'id_'.\nIf 'extra_info' was passed, store it in 'metadata'."
            },
            {
                "name": "custom_model_dump",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    },
                    {
                        "name": "info",
                        "default": null
                    }
                ],
                "docstring": "For full backward compatibility with the text field, we customize the model serializer."
            },
            {
                "name": "text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Provided for backward compatibility, it returns the content of text_resource."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get Document type."
            },
            {
                "name": "doc_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get document ID."
            },
            {
                "name": "doc_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "id_",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_doc_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_langchain_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert struct to LangChain document format."
            },
            {
                "name": "from_langchain_format",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": "Convert struct from LangChain document format."
            },
            {
                "name": "to_haystack_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert struct to Haystack document format."
            },
            {
                "name": "from_haystack_format",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": "Convert struct from Haystack document format."
            },
            {
                "name": "to_embedchain_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert struct to EmbedChain document format."
            },
            {
                "name": "from_embedchain_format",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": "Convert struct from EmbedChain document format."
            },
            {
                "name": "to_semantic_kernel_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert struct to Semantic Kernel document format."
            },
            {
                "name": "from_semantic_kernel_format",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": "Convert struct from Semantic Kernel document format."
            },
            {
                "name": "to_vectorflow",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "client",
                        "default": null
                    }
                ],
                "docstring": "Send a document to vectorflow, since they don't have a document object."
            },
            {
                "name": "example",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_cloud_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to LlamaCloud document type."
            },
            {
                "name": "from_cloud_document",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": "Convert from LlamaCloud document type."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "image",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_path",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_path",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "image_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_url",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_url",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "image_url",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_mimetype",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_mimetype",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "image_mimetype",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "embeddings",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "resolve_image",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "as_base64",
                        "default": null
                    }
                ],
                "docstring": "Resolve an image such that PIL can read it.\n\nArgs:\n    as_base64 (bool): whether the resolved image should be returned as base64-encoded bytes"
            },
            {
                "name": "embedding_strs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Use custom embedding strs if specified, otherwise use query str."
            },
            {
                "name": "embedding_image",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Use image path for image retrieval."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to string representation."
            }
        ],
        "classes": [
            {
                "name": "BaseComponent",
                "docstring": "Base component object to capture class names."
            },
            {
                "name": "TransformComponent",
                "docstring": "Base class for transform components."
            },
            {
                "name": "NodeRelationship",
                "docstring": "Node relationships used in `BaseNode` class.\n\nAttributes:\n    SOURCE: The node is the source document.\n    PREVIOUS: The node is the previous node in the document.\n    NEXT: The node is the next node in the document.\n    PARENT: The node is the parent node in the document.\n    CHILD: The node is a child node in the document."
            },
            {
                "name": "ObjectType",
                "docstring": null
            },
            {
                "name": "Modality",
                "docstring": null
            },
            {
                "name": "MetadataMode",
                "docstring": null
            },
            {
                "name": "RelatedNodeInfo",
                "docstring": null
            },
            {
                "name": "BaseNode",
                "docstring": "Base node Object.\n\nGeneric abstract interface for retrievable nodes"
            },
            {
                "name": "MediaResource",
                "docstring": "A container class for media content.\n\nThis class represents a generic media resource that can be stored and accessed\nin multiple ways - as raw bytes, on the filesystem, or via URL. It also supports\nstoring vector embeddings for the media content.\n\nAttributes:\n    embeddings: Multi-vector dict representation of this resource for embedding-based search/retrieval\n    text: Plain text representation of this resource\n    data: Raw binary data of the media content\n    mimetype: The MIME type indicating the format/type of the media content\n    path: Local filesystem path where the media content can be accessed\n    url: URL where the media content can be accessed remotely"
            },
            {
                "name": "Node",
                "docstring": null
            },
            {
                "name": "TextNode",
                "docstring": "Provided for backward compatibility.\n\nNote: we keep the field with the typo \"seperator\" to maintain backward compatibility for\nserialized objects."
            },
            {
                "name": "ImageNode",
                "docstring": "Node with image."
            },
            {
                "name": "IndexNode",
                "docstring": "Node with reference to any object.\n\nThis can include other indices, query engines, retrievers.\n\nThis can also include other nodes (though this is overlapping with `relationships`\non the Node class)."
            },
            {
                "name": "NodeWithScore",
                "docstring": null
            },
            {
                "name": "Document",
                "docstring": "Generic interface for a data document.\n\nThis document connects to data sources."
            },
            {
                "name": "ImageDocument",
                "docstring": "Backward compatible wrapper around Document containing an image."
            },
            {
                "name": "QueryBundle",
                "docstring": "Query bundle.\n\nThis dataclass contains the original query string and associated transformations.\n\nArgs:\n    query_str (str): the original user-specified query string.\n        This is currently used by all non embedding-based queries.\n    custom_embedding_strs (list[str]): list of strings used for embedding the query.\n        This is currently used by all embedding-based queries.\n    embedding (list[float]): the stored embedding for the query."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "base64",
            "json",
            "logging",
            "pickle",
            "textwrap",
            "uuid",
            "abstractmethod",
            "dataclass",
            "Enum",
            "auto",
            "sha256",
            "BytesIO",
            "Path",
            "TYPE_CHECKING",
            "Annotated",
            "Any",
            "Dict",
            "List",
            "Literal",
            "Optional",
            "Sequence",
            "Union",
            "filetype",
            "requests",
            "DataClassJsonMixin",
            "deprecated",
            "Self",
            "AnyUrl",
            "BaseModel",
            "ConfigDict",
            "Field",
            "GetJsonSchemaHandler",
            "JsonSchemaValue",
            "PlainSerializer",
            "SerializationInfo",
            "SerializeAsAny",
            "SerializerFunctionWrapHandler",
            "model_serializer",
            "field_validator",
            "ValidationInfo",
            "CoreSchema",
            "DispatcherSpanMixin",
            "SAMPLE_TEXT",
            "truncate_text",
            "Document",
            "CloudDocument",
            "MemoryRecord",
            "Document",
            "doc_to_json",
            "Document",
            "Document",
            "numpy",
            "MemoryRecord",
            "tempfile",
            "CloudDocument",
            "base64",
            "json_to_doc",
            "requests"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/img_utils.py": {
        "functions": [
            {
                "name": "img_2_b64",
                "parameters": [
                    {
                        "name": "image",
                        "default": "Constant(value='JPEG')"
                    },
                    {
                        "name": "format",
                        "default": null
                    }
                ],
                "docstring": "Convert a PIL.Image to a base64 encoded image str."
            },
            {
                "name": "b64_2_img",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Convert base64 encoded image str to a PIL.Image."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "base64",
            "BytesIO",
            "cast",
            "Image",
            "ImageFile"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/command_line.py": {
        "functions": [
            {
                "name": "handle_init_package",
                "parameters": [
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kind",
                        "default": null
                    },
                    {
                        "name": "prefix",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "handle_download_llama_pack",
                "parameters": [
                    {
                        "name": "llama_pack_class",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "download_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llama_pack_url",
                        "default": "Name(id='LLAMA_PACKS_CONTENTS_URL', ctx=Load())"
                    }
                ],
                "docstring": null
            },
            {
                "name": "handle_download_llama_dataset",
                "parameters": [
                    {
                        "name": "llama_dataset_class",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "download_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llama_hub_url",
                        "default": "Name(id='LLAMA_HUB_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_lfs_url",
                        "default": "Name(id='LLAMA_DATASETS_LFS_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_source_files_tree_url",
                        "default": "Name(id='LLAMA_DATASETS_SOURCE_FILES_GITHUB_TREE_URL', ctx=Load())"
                    }
                ],
                "docstring": null
            },
            {
                "name": "default_rag_cli",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "main",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "argparse",
            "Any",
            "Optional",
            "RagCLI",
            "default_ragcli_persist_dir",
            "upgrade_dir",
            "upgrade_file",
            "IngestionCache",
            "IngestionPipeline",
            "LLAMA_HUB_URL",
            "LLAMA_DATASETS_LFS_URL",
            "LLAMA_DATASETS_SOURCE_FILES_GITHUB_TREE_URL",
            "download_llama_dataset",
            "LLAMA_PACKS_CONTENTS_URL",
            "download_llama_pack",
            "SimpleDocumentStore",
            "SentenceSplitter",
            "init_new_package",
            "OpenAIEmbedding",
            "chromadb",
            "ChromaVectorStore",
            "OpenAIEmbedding",
            "chromadb",
            "ChromaVectorStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/_bundle/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/vector_stores/chroma/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChromaVectorStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/vector_stores/chroma/base.py": {
        "functions": [
            {
                "name": "_transform_chroma_filter_condition",
                "parameters": [
                    {
                        "name": "condition",
                        "default": null
                    }
                ],
                "docstring": "Translate standard metadata filter op to Chroma specific spec."
            },
            {
                "name": "_transform_chroma_filter_operator",
                "parameters": [
                    {
                        "name": "operator",
                        "default": null
                    }
                ],
                "docstring": "Translate standard metadata filter operator to Chroma specific spec."
            },
            {
                "name": "_to_chroma_filter",
                "parameters": [
                    {
                        "name": "standard_filters",
                        "default": null
                    }
                ],
                "docstring": "Translate standard metadata filters to Chroma specific spec."
            },
            {
                "name": "chunk_list",
                "parameters": [
                    {
                        "name": "lst",
                        "default": null
                    },
                    {
                        "name": "max_chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Yield successive max_chunk_size-sized chunks from lst.\n\nArgs:\n    lst (List[BaseNode]): list of nodes with embeddings\n    max_chunk_size (int): max chunk size\n\nYields:\n    Generator[List[BaseNode], None, None]: list of nodes with embeddings"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chroma_collection",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "collection_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "host",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "port",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ssl",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "headers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "collection_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_collection",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_params",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "collection_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "host",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "port",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ssl",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "headers",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "persist_dir",
                        "default": null
                    },
                    {
                        "name": "collection_kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from index.\n\nArgs:\n    node_ids (List[str]): list of node ids\n    filters (List[MetadataFilters]): list of metadata filters"
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Add nodes to index.\n\nArgs:\n    nodes: List[BaseNode]: list of nodes with embeddings"
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete nodes using with ref_doc_id.\n\nArgs:\n    ref_doc_id (str): The doc_id of the document to delete."
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": "Delete nodes from index.\n\nArgs:\n    node_ids (List[str]): list of node ids\n    filters (List[MetadataFilters]): list of metadata filters"
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear the collection."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return client."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Query index for top k most similar nodes.\n\nArgs:\n    query_embedding (List[float]): query embedding\n    similarity_top_k (int): top k most similar nodes"
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_embeddings",
                        "default": null
                    },
                    {
                        "name": "n_results",
                        "default": null
                    },
                    {
                        "name": "where",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "limit",
                        "default": null
                    },
                    {
                        "name": "where",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ChromaVectorStore",
                "docstring": "Chroma vector store.\n\nIn this vector store, embeddings are stored within a ChromaDB collection.\n\nDuring query time, the index uses ChromaDB to query for the top\nk most similar nodes.\n\nArgs:\n    chroma_collection (chromadb.api.models.Collection.Collection):\n        ChromaDB collection instance\n\nExamples:\n    `pip install llama-index-vector-stores-chroma`\n\n    ```python\n    import chromadb\n    from llama_index.vector_stores.chroma import ChromaVectorStore\n\n    # Create a Chroma client and collection\n    chroma_client = chromadb.EphemeralClient()\n    chroma_collection = chroma_client.create_collection(\"example_collection\")\n\n    # Set up the ChromaVectorStore and StorageContext\n    vector_store = ChromaVectorStore(chroma_collection=chroma_collection)\n    ```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "math",
            "Any",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "cast",
            "chromadb",
            "Collection",
            "Field",
            "PrivateAttr",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "truncate_text",
            "BasePydanticVectorStore",
            "MetadataFilters",
            "VectorStoreQuery",
            "VectorStoreQueryResult",
            "legacy_metadata_dict_to_node",
            "metadata_dict_to_node",
            "node_to_metadata_dict",
            "Collection"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/indices/managed/llama_cloud/retriever.py": {
        "functions": [
            {
                "name": "_get_page_screenshot",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "file_id",
                        "default": null
                    },
                    {
                        "name": "page_index",
                        "default": null
                    },
                    {
                        "name": "project_id",
                        "default": null
                    }
                ],
                "docstring": "Get the page screenshot."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "pipeline_id",
                        "default": "Name(id='DEFAULT_PROJECT_NAME', ctx=Load())"
                    },
                    {
                        "name": "project_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "project_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "organization_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "base_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "app_url",
                        "default": "Constant(value=60)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "httpx_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_httpx_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "dense_similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sparse_similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "enable_reranking",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "rerank_top_n",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "alpha",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieval_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "files_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieve_image_nodes",
                        "default": null
                    }
                ],
                "docstring": "Initialize the Platform Retriever."
            },
            {
                "name": "_result_nodes_to_node_with_score",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "result_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_image_nodes_to_node_with_score",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "raw_image_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve from the platform."
            }
        ],
        "classes": [
            {
                "name": "LlamaCloudRetriever",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "httpx",
            "TextNodeWithScore",
            "PageScreenshotNodeWithScore",
            "OMIT",
            "LlamaCloud",
            "AsyncLlamaCloud",
            "remove_none_from_dict",
            "ApiError",
            "BaseRetriever",
            "DEFAULT_PROJECT_NAME",
            "get_aclient",
            "get_client",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "ImageNode",
            "MetadataFilters",
            "asyncio",
            "urllib.parse",
            "base64",
            "resolve_project_and_pipeline"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/indices/managed/llama_cloud/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LlamaCloudIndex",
            "LlamaCloudRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/indices/managed/llama_cloud/api_utils.py": {
        "functions": [
            {
                "name": "default_embedding_config",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "default_transform_config",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "resolve_project",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "project_name",
                        "default": null
                    },
                    {
                        "name": "project_id",
                        "default": null
                    },
                    {
                        "name": "organization_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "resolve_pipeline",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "pipeline_id",
                        "default": null
                    },
                    {
                        "name": "project",
                        "default": null
                    },
                    {
                        "name": "pipeline_name",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "resolve_project_and_pipeline",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "pipeline_name",
                        "default": null
                    },
                    {
                        "name": "pipeline_id",
                        "default": null
                    },
                    {
                        "name": "project_name",
                        "default": null
                    },
                    {
                        "name": "project_id",
                        "default": null
                    },
                    {
                        "name": "organization_id",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Tuple",
            "AutoTransformConfig",
            "Pipeline",
            "PipelineCreateEmbeddingConfig",
            "PipelineCreateEmbeddingConfig_OpenaiEmbedding",
            "PipelineCreateTransformConfig",
            "PipelineType",
            "Project",
            "LlamaCloud",
            "OpenAIEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/indices/managed/llama_cloud/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "pipeline_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "project_id",
                        "default": "Name(id='DEFAULT_PROJECT_NAME', ctx=Load())"
                    },
                    {
                        "name": "project_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "organization_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "base_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "app_url",
                        "default": "Constant(value=60)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "httpx_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_httpx_client",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": null
                    }
                ],
                "docstring": "Initialize the Platform Index."
            },
            {
                "name": "wait_for_completion",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_on_partial_success",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_wait_for_file_ingestion",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "file_id",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "raise_on_error",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_wait_for_documents_ingestion",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "doc_ids",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "raise_on_error",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_documents",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PROJECT_NAME', ctx=Load())"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "project_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "organization_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=60)"
                    },
                    {
                        "name": "base_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "app_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "raise_on_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embedding_config",
                        "default": null
                    },
                    {
                        "name": "transform_config",
                        "default": null
                    },
                    {
                        "name": "transformations",
                        "default": null
                    }
                ],
                "docstring": "Build a LlamaCloud managed index from a sequence of documents."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return a Retriever for this managed index."
            },
            {
                "name": "as_query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their metadata. The nodes list is empty."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "document",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "update_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "document",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Upserts a document and its corresponding nodes."
            },
            {
                "name": "refresh_ref_docs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Refresh an index with documents that have changed."
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "raise_if_not_found",
                        "default": null
                    }
                ],
                "docstring": "Delete a document and its nodes by using ref_doc_id."
            },
            {
                "name": "upload_file",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "resource_info",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "wait_for_ingestion",
                        "default": null
                    },
                    {
                        "name": "raise_on_error",
                        "default": null
                    }
                ],
                "docstring": "Upload a file to the index."
            },
            {
                "name": "upload_file_from_url",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "url",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "proxy_url",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "request_headers",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verify_ssl",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "follow_redirects",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "wait_for_ingestion",
                        "default": null
                    },
                    {
                        "name": "raise_on_error",
                        "default": null
                    }
                ],
                "docstring": "Upload a file from a URL to the index."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Index-specific logic for inserting nodes to the index struct."
            },
            {
                "name": "build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "insert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a set of nodes."
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a set of nodes."
            }
        ],
        "classes": [
            {
                "name": "LlamaCloudIndex",
                "docstring": "A managed index that stores documents in LlamaCloud.\n\nThere are two main ways to use this index:\n\n1. Connect to an existing LlamaCloud index:\n    ```python\n    # Connect using index ID (same as pipeline ID)\n    index = LlamaCloudIndex(id=\"<index_id>\")\n\n    # Or connect using index name\n    index = LlamaCloudIndex(\n        name=\"my_index\",\n        project_name=\"my_project\",\n        organization_id=\"my_org_id\"\n    )\n    ```\n\n2. Create a new index with documents:\n    ```python\n    documents = [Document(...), Document(...)]\n    index = LlamaCloudIndex.from_documents(\n        documents,\n        name=\"my_new_index\",\n        project_name=\"my_project\",\n        organization_id=\"my_org_id\"\n    )\n    ```\n\nThe index supports standard operations like retrieval and querying\nthrough the as_query_engine() and as_retriever() methods."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "httpx",
            "os",
            "time",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "quote_plus",
            "PipelineCreate",
            "PipelineCreateEmbeddingConfig",
            "PipelineCreateTransformConfig",
            "PipelineType",
            "ProjectCreate",
            "ManagedIngestionStatus",
            "CloudDocumentCreate",
            "CloudDocument",
            "PipelineFileCreate",
            "BaseQueryEngine",
            "BaseRetriever",
            "CallbackManager",
            "DEFAULT_APP_URL",
            "DEFAULT_PROJECT_NAME",
            "BaseManagedIndex",
            "ApiError",
            "get_aclient",
            "get_client",
            "BaseNode",
            "Document",
            "TransformComponent",
            "Settings",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "BaseQueryEngine",
            "BaseRetriever",
            "CallbackManager",
            "BaseNode",
            "Document",
            "TransformComponent",
            "Settings",
            "RefDocInfo",
            "default_embedding_config",
            "default_transform_config",
            "resolve_project_and_pipeline",
            "logging",
            "LlamaCloudRetriever",
            "RetrieverQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/huggingface/pooling.py": {
        "functions": [
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cls_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cls_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cls_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "mean_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "last_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "last_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "last_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Pooling",
                "docstring": "Enum of possible pooling choices with pooling behaviors."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "TYPE_CHECKING",
            "Union",
            "overload",
            "numpy",
            "torch"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/huggingface/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "HuggingFaceEmbedding",
            "HuggingFaceInferenceAPIEmbedding",
            "HuggingFaceInferenceAPIEmbeddings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/huggingface/utils.py": {
        "functions": [
            {
                "name": "get_query_instruct_for_model_name",
                "parameters": [
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Get query text instruction for a given model name."
            },
            {
                "name": "format_query",
                "parameters": [
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "model_name",
                        "default": null
                    },
                    {
                        "name": "instruction",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_text_instruct_for_model_name",
                "parameters": [
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": "Get text instruction for a given model name."
            },
            {
                "name": "format_text",
                "parameters": [
                    {
                        "name": "text",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "model_name",
                        "default": null
                    },
                    {
                        "name": "instruction",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_pooling_mode",
                "parameters": [
                    {
                        "name": "model_name",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "requests"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/huggingface/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_HUGGINGFACE_EMBEDDING_MODEL', ctx=Load())"
                    },
                    {
                        "name": "model_name",
                        "default": "Constant(value='deprecated')"
                    },
                    {
                        "name": "tokenizer_name",
                        "default": "Constant(value='deprecated')"
                    },
                    {
                        "name": "pooling",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_length",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_instruction",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_instruction",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "normalize",
                        "default": "Constant(value='deprecated')"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value='deprecated')"
                    },
                    {
                        "name": "tokenizer",
                        "default": "Name(id='DEFAULT_EMBED_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "embed_batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "cache_folder",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "trust_remote_code",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "device",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "parallel_process",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "target_devices",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_embed_with_retry",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "inputs",
                        "default": null
                    },
                    {
                        "name": "prompt_name",
                        "default": null
                    }
                ],
                "docstring": "Generates embeddings with retry mechanism.\n\nArgs:\n    inputs: List of texts or images to embed\n    prompt_name: Optional prompt type\n\nReturns:\n    List of embedding vectors\n\nRaises:\n    Exception: If embedding fails after retries"
            },
            {
                "name": "_embed",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "inputs",
                        "default": null
                    },
                    {
                        "name": "prompt_name",
                        "default": null
                    }
                ],
                "docstring": "Generates Embeddings with input validation and retry mechanism.\n\nArgs:\n    sentences: Texts or Sentences to embed\n    prompt_name: The name of the prompt to use for encoding\n\nReturns:\n    List of embedding vectors\n\nRaises:\n    ValueError: If any input text is invalid\n    Exception: If embedding fails after retries"
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Generates Embeddings for Query.\n\nArgs:\n    query (str): Query text/sentence\n\nReturns:\n    List[float]: numpy array of embeddings"
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Generates Embeddings for text.\n\nArgs:\n    text (str): Text/sentences\n\nReturns:\n    List[float]: numpy array of embeddings"
            },
            {
                "name": "_get_text_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": "Generates Embeddings for text.\n\nArgs:\n    texts (List[str]): Texts / Sentences\n\nReturns:\n    List[List[float]]: numpy array of embeddings"
            },
            {
                "name": "_get_image_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "img_file_path",
                        "default": null
                    }
                ],
                "docstring": "Generate embedding for an image."
            },
            {
                "name": "_get_image_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "img_file_paths",
                        "default": null
                    }
                ],
                "docstring": "Generate embeddings for multiple images."
            },
            {
                "name": "_get_inference_client_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Extract the Hugging Face InferenceClient construction parameters."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize.\n\nArgs:\n    kwargs: See the class-level Fields."
            },
            {
                "name": "validate_supported",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Confirm the contained model_name is deployed on the Inference API service.\n\nArgs:\n    task: Hugging Face task to check within. A list of all tasks can be\n        found here: https://huggingface.co/tasks"
            },
            {
                "name": "get_model_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get metadata on the current model from Hugging Face."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Embed the input query synchronously.\n\nNOTE: a new asyncio event loop is created internally for this."
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Embed the text query synchronously.\n\nNOTE: a new asyncio event loop is created internally for this."
            },
            {
                "name": "_get_text_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": "Embed the input sequence of text synchronously and in parallel.\n\nNOTE: a new asyncio event loop is created internally for this."
            }
        ],
        "classes": [
            {
                "name": "HuggingFaceEmbedding",
                "docstring": "HuggingFace class for text and image embeddings.\n\nArgs:\n    model_name (str, optional): If it is a filepath on disc, it loads the model from that path.\n        If it is not a path, it first tries to download a pre-trained SentenceTransformer model.\n        If that fails, tries to construct a model from the Hugging Face Hub with that name.\n        Defaults to DEFAULT_HUGGINGFACE_EMBEDDING_MODEL.\n    max_length (Optional[int], optional): Max sequence length to set in Model's config. If None,\n        it will use the Model's default max_seq_length. Defaults to None.\n    query_instruction (Optional[str], optional): Instruction to prepend to query text.\n        Defaults to None.\n    text_instruction (Optional[str], optional): Instruction to prepend to text.\n        Defaults to None.\n    normalize (bool, optional): Whether to normalize returned vectors.\n        Defaults to True.\n    embed_batch_size (int, optional): The batch size used for the computation.\n        Defaults to DEFAULT_EMBED_BATCH_SIZE.\n    cache_folder (Optional[str], optional): Path to store models. Defaults to None.\n    trust_remote_code (bool, optional): Whether or not to allow for custom models defined on the\n        Hub in their own modeling files. This option should only be set to True for repositories\n        you trust and in which you have read the code, as it will execute code present on the Hub\n        on your local machine. Defaults to False.\n    device (Optional[str], optional): Device (like \"cuda\", \"cpu\", \"mps\", \"npu\", ...) that should\n        be used for computation. If None, checks if a GPU can be used. Defaults to None.\n    callback_manager (Optional[CallbackManager], optional): Callback Manager. Defaults to None.\n    parallel_process (bool, optional): If True it will start a multi-process pool to process the\n        encoding with several independent processes. Great for vast amount of texts.\n        Defaults to False.\n    target_devices (Optional[List[str]], optional): PyTorch target devices, e.g.\n        [\"cuda:0\", \"cuda:1\", ...], [\"npu:0\", \"npu:1\", ...], or [\"cpu\", \"cpu\", \"cpu\", \"cpu\"].\n        If target_devices is None and CUDA/NPU is available, then all available CUDA/NPU devices\n        will be used. If target_devices is None and CUDA/NPU is not available, then 4 CPU devices\n        will be used. This parameter will only be used if `parallel_process = True`.\n        Defaults to None.\n    num_workers (int, optional): The number of workers to use for async embedding calls.\n        Defaults to None.\n    **model_kwargs: Other model kwargs to use\n    tokenizer_name (Optional[str], optional): \"Deprecated\"\n    pooling (str, optional): \"Deprecated\"\n    model (Optional[Any], optional): \"Deprecated\"\n    tokenizer (Optional[Any], optional): \"Deprecated\"\n\nExamples:\n    `pip install llama-index-embeddings-huggingface`\n\n    ```python\n    from llama_index.core import Settings\n    from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n\n    # Set up the HuggingFaceEmbedding class with the required model to use with llamaindex core.\n    embed_model  = HuggingFaceEmbedding(model_name = \"BAAI/bge-small-en\")\n    Settings.embed_model = embed_model\n\n    # Or if you want to Embed some text separately\n    embeddings = embed_model.get_text_embedding(\"I want to Embed this text!\")\n\n    ```"
            },
            {
                "name": "HuggingFaceInferenceAPIEmbedding",
                "docstring": "Wrapper on the Hugging Face's Inference API for embeddings.\n\nOverview of the design:\n- Uses the feature extraction task: https://huggingface.co/tasks/feature-extraction"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "BytesIO",
            "logging",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Union",
            "deprecated",
            "AsyncInferenceClient",
            "InferenceClient",
            "model_info",
            "ModelInfo",
            "DEFAULT_EMBED_BATCH_SIZE",
            "BaseEmbedding",
            "Embedding",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "Pooling",
            "MultiModalEmbedding",
            "get_cache_dir",
            "infer_torch_device",
            "DEFAULT_HUGGINGFACE_EMBEDDING_MODEL",
            "format_query",
            "format_text",
            "get_query_instruct_for_model_name",
            "get_text_instruct_for_model_name",
            "ImageType",
            "SentenceTransformer",
            "retry",
            "stop_after_attempt",
            "wait_exponential"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/openai/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "OpenAIEmbedding",
            "OpenAIEmbeddingMode",
            "OpenAIEmbeddingModelType",
            "OpenAIEmbeddingModeModel"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/openai/utils.py": {
        "functions": [
            {
                "name": "create_retry_decorator",
                "parameters": [
                    {
                        "name": "max_retries",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "random_exponential",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "stop_after_delay_seconds",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "min_seconds",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_seconds",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "resolve_openai_credentials",
                "parameters": [
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_base",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_version",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "\"Resolve OpenAI credentials.\n\nThe order of precedence is:\n1. param\n2. env\n3. openai module\n4. default"
            },
            {
                "name": "validate_openai_api_key",
                "parameters": [
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "os",
            "Any",
            "Callable",
            "Optional",
            "Tuple",
            "Union",
            "get_from_param_or_env",
            "before_sleep_log",
            "retry",
            "retry_if_exception_type",
            "stop_after_attempt",
            "stop_after_delay",
            "wait_exponential",
            "wait_random_exponential",
            "stop_base",
            "openai",
            "ChatCompletionMessageToolCall",
            "ChoiceDeltaToolCall"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/embeddings/openai/base.py": {
        "functions": [
            {
                "name": "get_embedding",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "engine",
                        "default": null
                    }
                ],
                "docstring": "Get embedding.\n\nNOTE: Copied from OpenAI's embedding utils:\nhttps://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\nCopied here to avoid importing unnecessary dependencies\nlike matplotlib, plotly, scipy, sklearn."
            },
            {
                "name": "get_embeddings",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "list_of_text",
                        "default": null
                    },
                    {
                        "name": "engine",
                        "default": null
                    }
                ],
                "docstring": "Get embeddings.\n\nNOTE: Copied from OpenAI's embedding utils:\nhttps://github.com/openai/openai-python/blob/main/openai/embeddings_utils.py\n\nCopied here to avoid importing unnecessary dependencies\nlike matplotlib, plotly, scipy, sklearn."
            },
            {
                "name": "get_engine",
                "parameters": [
                    {
                        "name": "mode",
                        "default": null
                    },
                    {
                        "name": "model",
                        "default": null
                    },
                    {
                        "name": "mode_model_dict",
                        "default": null
                    }
                ],
                "docstring": "Get engine."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='OpenAIEmbeddingMode', ctx=Load()), attr='TEXT_SEARCH_MODE', ctx=Load())"
                    },
                    {
                        "name": "mode",
                        "default": "Attribute(value=Name(id='OpenAIEmbeddingModelType', ctx=Load()), attr='TEXT_EMBED_ADA_002', ctx=Load())"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "embed_batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "dimensions",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "additional_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_base",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_version",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_retries",
                        "default": "Constant(value=60.0)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "reuse_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "default_headers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "http_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_http_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_resolve_credentials",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_base",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_version",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_aclient",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_create_retry_decorator",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create a retry decorator using the instance's max_retries."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_credential_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_async",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Get query embedding."
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Get text embedding."
            },
            {
                "name": "_get_text_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": "Get text embeddings.\n\nBy default, this is a wrapper around _get_text_embedding.\nCan be overridden for batch queries."
            },
            {
                "name": "_retryable_get_embedding",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "_retryable_get_embedding",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "_retryable_get_embeddings",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "OpenAIEmbeddingMode",
                "docstring": "OpenAI embedding mode."
            },
            {
                "name": "OpenAIEmbeddingModelType",
                "docstring": "OpenAI embedding model type."
            },
            {
                "name": "OpenAIEmbeddingModeModel",
                "docstring": "OpenAI embedding mode model."
            },
            {
                "name": "OpenAIEmbedding",
                "docstring": "OpenAI class for embeddings.\n\nArgs:\n    mode (str): Mode for embedding.\n        Defaults to OpenAIEmbeddingMode.TEXT_SEARCH_MODE.\n        Options are:\n\n        - OpenAIEmbeddingMode.SIMILARITY_MODE\n        - OpenAIEmbeddingMode.TEXT_SEARCH_MODE\n\n    model (str): Model for embedding.\n        Defaults to OpenAIEmbeddingModelType.TEXT_EMBED_ADA_002.\n        Options are:\n\n        - OpenAIEmbeddingModelType.DAVINCI\n        - OpenAIEmbeddingModelType.CURIE\n        - OpenAIEmbeddingModelType.BABBAGE\n        - OpenAIEmbeddingModelType.ADA\n        - OpenAIEmbeddingModelType.TEXT_EMBED_ADA_002"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "httpx",
            "BaseEmbedding",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "DEFAULT_OPENAI_API_BASE",
            "DEFAULT_OPENAI_API_VERSION",
            "create_retry_decorator",
            "resolve_openai_credentials",
            "AsyncOpenAI",
            "OpenAI"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/sparse_embeddings/mock_sparse_embedding.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MockSparseEmbedding",
                "docstring": "A mock sparse embedding model for testing."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Optional",
            "BaseSparseEmbedding",
            "SparseEmbedding",
            "Field"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/sparse_embeddings/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/vector_stores/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "SimpleVectorStore",
            "ExactMatchFilter",
            "FilterCondition",
            "FilterOperator",
            "MetadataFilter",
            "MetadataFilters",
            "MetadataInfo",
            "VectorStoreQuery",
            "VectorStoreQueryResult",
            "VectorStoreInfo"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/vector_stores/types.py": {
        "functions": [
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "filter_dict",
                        "default": null
                    }
                ],
                "docstring": "Create MetadataFilter from dictionary.\n\nArgs:\n    filter_dict: Dict with key, value and operator."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "filter_dict",
                        "default": null
                    }
                ],
                "docstring": "Create MetadataFilters from json."
            },
            {
                "name": "from_dicts",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Attribute(value=Name(id='FilterCondition', ctx=Load()), attr='AND', ctx=Load())"
                    },
                    {
                        "name": "filter_dicts",
                        "default": null
                    },
                    {
                        "name": "condition",
                        "default": null
                    }
                ],
                "docstring": "Create MetadataFilters from dicts.\n\nThis takes in a list of individual MetadataFilter objects, along\nwith the condition.\n\nArgs:\n    filter_dicts: List of dicts, each dict is a MetadataFilter.\n    condition: FilterCondition to combine different filters."
            },
            {
                "name": "legacy_filters",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert MetadataFilters to legacy ExactMatchFilters."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Add nodes with embedding to vector store."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete nodes using with ref_doc_id."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Query vector store."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "get_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from vector store."
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Add nodes to vector store."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete nodes using with ref_doc_id."
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": "Delete nodes from vector store."
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear all nodes from configured vector store."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Query vector store."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "VectorStoreQueryResult",
                "docstring": "Vector store query result."
            },
            {
                "name": "VectorStoreQueryMode",
                "docstring": "Vector store query mode."
            },
            {
                "name": "FilterOperator",
                "docstring": "Vector store filter operator."
            },
            {
                "name": "FilterCondition",
                "docstring": "Vector store filter conditions to combine different filters."
            },
            {
                "name": "MetadataFilter",
                "docstring": "Comprehensive metadata filter for vector stores to support more operators.\n\nValue uses Strict* types, as int, float and str are compatible types and were all\nconverted to string before.\n\nSee: https://docs.pydantic.dev/latest/usage/types/#strict-types"
            },
            {
                "name": "MetadataFilters",
                "docstring": "Metadata filters for vector stores."
            },
            {
                "name": "VectorStoreQuerySpec",
                "docstring": "Schema for a structured request for vector store\n(i.e. to be converted to a VectorStoreQuery).\n\nCurrently only used by VectorIndexAutoRetriever."
            },
            {
                "name": "MetadataInfo",
                "docstring": "Information about a metadata filter supported by a vector store.\n\nCurrently only used by VectorIndexAutoRetriever."
            },
            {
                "name": "VectorStoreInfo",
                "docstring": "Information about a vector store (content and supported metadata filters).\n\nCurrently only used by VectorIndexAutoRetriever."
            },
            {
                "name": "VectorStoreQuery",
                "docstring": "Vector store query."
            },
            {
                "name": "VectorStore",
                "docstring": "Abstract vector store protocol."
            },
            {
                "name": "BasePydanticVectorStore",
                "docstring": "Abstract vector store protocol."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "dataclass",
            "Enum",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Protocol",
            "Sequence",
            "Union",
            "runtime_checkable",
            "fsspec",
            "deprecated",
            "BaseModel",
            "ConfigDict",
            "StrictFloat",
            "StrictInt",
            "StrictStr",
            "BaseComponent",
            "BaseNode",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/vector_stores/utils.py": {
        "functions": [
            {
                "name": "_validate_is_flat_dict",
                "parameters": [
                    {
                        "name": "metadata_dict",
                        "default": null
                    }
                ],
                "docstring": "Validate that metadata dict is flat,\nand key is str, and value is one of (str, int, float, None)."
            },
            {
                "name": "node_to_metadata_dict",
                "parameters": [
                    {
                        "name": "node",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "remove_text",
                        "default": "Name(id='DEFAULT_TEXT_KEY', ctx=Load())"
                    },
                    {
                        "name": "text_field",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "flat_metadata",
                        "default": null
                    }
                ],
                "docstring": "Common logic for saving Node data into metadata dict."
            },
            {
                "name": "metadata_dict_to_node",
                "parameters": [
                    {
                        "name": "metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Common logic for loading Node data from metadata dict."
            },
            {
                "name": "legacy_metadata_dict_to_node",
                "parameters": [
                    {
                        "name": "metadata",
                        "default": "Name(id='DEFAULT_TEXT_KEY', ctx=Load())"
                    },
                    {
                        "name": "text_key",
                        "default": null
                    }
                ],
                "docstring": "Common logic for loading Node data from metadata dict."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Any",
            "Dict",
            "Optional",
            "Tuple",
            "BaseNode",
            "ImageNode",
            "IndexNode",
            "NodeRelationship",
            "RelatedNodeInfo",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/vector_stores/simple.py": {
        "functions": [
            {
                "name": "_build_metadata_filter_fn",
                "parameters": [
                    {
                        "name": "metadata_lookup_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata_filters",
                        "default": null
                    }
                ],
                "docstring": "Build metadata filter function."
            },
            {
                "name": "filter_fn",
                "parameters": [
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "data",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_VECTOR_STORE', ctx=Load())"
                    },
                    {
                        "name": "namespace",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load from persist dir."
            },
            {
                "name": "from_namespaced_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load from namespaced persist dir."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Backwards compatibility."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text_id",
                        "default": null
                    }
                ],
                "docstring": "Get embedding."
            },
            {
                "name": "get_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": "Get nodes."
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Add nodes to index."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete nodes using with ref_doc_id.\n\nArgs:\n    ref_doc_id (str): The doc_id of the document to delete."
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear the store."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='DEFAULT_PERSIST_DIR', ctx=Load()), Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())], keywords=[])"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the SimpleVectorStore to a directory."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleKVStore from a persist directory."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_process_filter_match",
                "parameters": [
                    {
                        "name": "operator",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    },
                    {
                        "name": "metadata_value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_filter_fn",
                "parameters": [
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_filter_fn",
                "parameters": [
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_filter_fn",
                "parameters": [
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "node_filter_fn",
                "parameters": [
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimpleVectorStoreData",
                "docstring": "Simple Vector Store Data container.\n\nArgs:\n    embedding_dict (Optional[dict]): dict mapping node_ids to embeddings.\n    text_id_to_ref_doc_id (Optional[dict]):\n        dict mapping text_ids/node_ids to ref_doc_ids."
            },
            {
                "name": "SimpleVectorStore",
                "docstring": "Simple Vector Store.\n\nIn this vector store, embeddings are stored within a simple, in-memory dictionary.\n\nArgs:\n    simple_vector_store_data_dict (Optional[dict]): data dict\n        containing the embeddings and doc_ids. See SimpleVectorStoreData\n        for more details."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "os",
            "dataclass",
            "field",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Mapping",
            "Optional",
            "Sequence",
            "cast",
            "fsspec",
            "DataClassJsonMixin",
            "Field",
            "PrivateAttr",
            "get_top_k_embeddings",
            "get_top_k_embeddings_learner",
            "get_top_k_mmr_embeddings",
            "BaseNode",
            "concat_dirs",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "BasePydanticVectorStore",
            "MetadataFilters",
            "FilterCondition",
            "FilterOperator",
            "VectorStoreQuery",
            "VectorStoreQueryMode",
            "VectorStoreQueryResult",
            "node_to_metadata_dict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/retrievers/recursive_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "root_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever_dict",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine_dict",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_dict",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "query_response_tmpl",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_deduplicate_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes_with_score",
                        "default": null
                    }
                ],
                "docstring": "Deduplicate nodes according to node id.\nKeep the node with the highest score/first returned."
            },
            {
                "name": "_query_retrieved_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes_with_score",
                        "default": null
                    }
                ],
                "docstring": "Query for retrieved nodes.\n\nIf node is an IndexNode, then recursively query the retriever/query engine.\nIf node is a TextNode, then simply return the node."
            },
            {
                "name": "_get_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_id",
                        "default": null
                    }
                ],
                "docstring": "Fetch retriever or query engine."
            },
            {
                "name": "_retrieve_rec",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_id",
                        "default": null
                    },
                    {
                        "name": "cur_similarity",
                        "default": null
                    }
                ],
                "docstring": "Query recursively."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve all nodes.\n\nUnlike default `retrieve` method, this also fetches additional sources."
            }
        ],
        "classes": [
            {
                "name": "RecursiveRetriever",
                "docstring": "Recursive retriever.\n\nThis retriever will recursively explore links from nodes to other\nretrievers/query engines.\n\nFor any retrieved nodes, if any of the nodes are IndexNodes,\nthen it will explore the linked retriever/query engine, and query that.\n\nArgs:\n    root_id (str): The root id of the query graph.\n    retriever_dict (Optional[Dict[str, BaseRetriever]]): A dictionary\n        of id to retrievers.\n    query_engine_dict (Optional[Dict[str, BaseQueryEngine]]): A dictionary of\n        id to query engines."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "BaseQueryEngine",
            "BaseRetriever",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "BaseNode",
            "IndexNode",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/retrievers/fusion_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrievers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Attribute(value=Name(id='FUSION_MODES', ctx=Load()), attr='SIMPLE', ctx=Load())"
                    },
                    {
                        "name": "query_gen_prompt",
                        "default": "Name(id='DEFAULT_SIMILARITY_TOP_K', ctx=Load())"
                    },
                    {
                        "name": "mode",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "num_queries",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "retriever_weights",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "original_query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_reciprocal_rerank_fusion",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "results",
                        "default": null
                    }
                ],
                "docstring": "Apply reciprocal rank fusion.\n\nThe original paper uses k=60 for best results:\nhttps://plg.uwaterloo.ca/~gvcormac/cormacksigir09-rrf.pdf"
            },
            {
                "name": "_relative_score_fusion",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "results",
                        "default": null
                    },
                    {
                        "name": "dist_based",
                        "default": null
                    }
                ],
                "docstring": "Apply relative score fusion."
            },
            {
                "name": "_simple_fusion",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "results",
                        "default": null
                    }
                ],
                "docstring": "Apply simple fusion."
            },
            {
                "name": "_run_nested_async_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "queries",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_run_sync_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "queries",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "FUSION_MODES",
                "docstring": "Enum for different fusion modes."
            },
            {
                "name": "QueryFusionRetriever",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Enum",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "cast",
            "run_async_tasks",
            "CallbackManager",
            "DEFAULT_SIMILARITY_TOP_K",
            "LLMType",
            "resolve_llm",
            "PromptTemplate",
            "PromptDictType",
            "BaseRetriever",
            "IndexNode",
            "NodeWithScore",
            "QueryBundle",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/retrievers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseRetriever",
            "BaseImageRetriever",
            "EmptyIndexRetriever",
            "KeywordTableSimpleRetriever",
            "KGTableRetriever",
            "KnowledgeGraphRAGRetriever",
            "ListIndexEmbeddingRetriever",
            "ListIndexRetriever",
            "SummaryIndexEmbeddingRetriever",
            "SummaryIndexLLMRetriever",
            "SummaryIndexRetriever",
            "BasePGRetriever",
            "CustomPGRetriever",
            "CypherTemplateRetriever",
            "LLMSynonymRetriever",
            "PGRetriever",
            "TextToCypherRetriever",
            "VectorContextRetriever",
            "NLSQLRetriever",
            "SQLParserMode",
            "SQLRetriever",
            "TreeAllLeafRetriever",
            "TreeSelectLeafEmbeddingRetriever",
            "TreeSelectLeafRetriever",
            "TreeRootRetriever",
            "VectorIndexAutoRetriever",
            "VectorIndexRetriever",
            "AutoMergingRetriever",
            "QueryFusionRetriever",
            "RecursiveRetriever",
            "RouterRetriever",
            "TransformRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/retrievers/transform_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_transform",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transform_metadata",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "TransformRetriever",
                "docstring": "Transform Retriever.\n\nTakes in an existing retriever and a query transform and runs the query transform\nbefore running the retriever."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "BaseRetriever",
            "CallbackManager",
            "BaseQueryTransform",
            "PromptMixinType",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/retrievers/auto_merging_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0.5)"
                    },
                    {
                        "name": "vector_retriever",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "simple_ratio_thresh",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "objects",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_parents_and_merge",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get parents and merge nodes."
            },
            {
                "name": "_fill_in_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Fill in nodes."
            },
            {
                "name": "_try_merging",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Try different ways to merge nodes."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes given query.\n\nImplemented by the user."
            }
        ],
        "classes": [
            {
                "name": "AutoMergingRetriever",
                "docstring": "This retriever will try to merge context into parent context.\n\nThe retriever first retrieves chunks from a vector store.\nThen, it will try to merge the chunks into a single context."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "defaultdict",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "cast",
            "BaseRetriever",
            "CallbackManager",
            "QueryBundle",
            "truncate_text",
            "VectorIndexRetriever",
            "BaseNode",
            "IndexNode",
            "NodeWithScore",
            "MetadataMode",
            "QueryBundle",
            "StorageContext"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/retrievers/router_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever_tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "objects",
                        "default": null
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever_tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "selector",
                        "default": null
                    },
                    {
                        "name": "select_multi",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RouterRetriever",
                "docstring": "Router retriever.\n\nSelects one (or multiple) out of several candidate retrievers to execute a query.\n\nArgs:\n    selector (BaseSelector): A selector that chooses one out of many options based\n        on each candidate's metadata and query.\n    retriever_tools (Sequence[RetrieverTool]): A sequence of candidate\n        retrievers. They must be wrapped as tools to expose metadata to\n        the selector."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "List",
            "Optional",
            "Sequence",
            "BaseRetriever",
            "BaseSelector",
            "CBEventType",
            "EventPayload",
            "LLM",
            "PromptMixinType",
            "IndexNode",
            "NodeWithScore",
            "QueryBundle",
            "get_selector_from_llm",
            "Settings",
            "RetrieverTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/transformations.py": {
        "functions": [
            {
                "name": "build_configurable_transformation_enum",
                "parameters": [],
                "docstring": "Build an enum of configurable transformations.\nBut conditional on if the corresponding component is available."
            },
            {
                "name": "from_component",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "build_configured_transformation",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_component",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": "Build a ConfiguredTransformation from a component.\n\nThis should be the preferred way to build a ConfiguredTransformation\nas it will ensure that the component is supported as indicated by having a\ncorresponding enum value in ConfigurableTransformations.\n\nThis has the added bonus that you don't need to specify the generic type\nlike ConfiguredTransformation[SentenceSplitter]. The return value of\nthis ConfiguredTransformation.from_component(simple_node_parser) will be\nConfiguredTransformation[SentenceSplitter] if simple_node_parser is\na SentenceSplitter."
            },
            {
                "name": "configurable_transformation_type",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "TransformationIOType",
                "docstring": null
            },
            {
                "name": "TransformationIOTypes",
                "docstring": null
            },
            {
                "name": "TransformationCategory",
                "docstring": "A description for a category of transformation within a pipeline."
            },
            {
                "name": "TransformationCategories",
                "docstring": "Supported transformation categories."
            },
            {
                "name": "ConfigurableTransformation",
                "docstring": "A class containing metadata for a type of transformation that can be in a pipeline."
            },
            {
                "name": "ConfigurableComponent",
                "docstring": null
            },
            {
                "name": "ConfiguredTransformation",
                "docstring": "A class containing metadata & implementation for a transformation in a pipeline."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "Generic",
            "Sequence",
            "Type",
            "TypeVar",
            "BaseModel",
            "Field",
            "ValidationError",
            "SerializeAsAny",
            "CodeSplitter",
            "HTMLNodeParser",
            "JSONNodeParser",
            "MarkdownNodeParser",
            "SentenceSplitter",
            "SimpleFileNodeParser",
            "TokenTextSplitter",
            "MarkdownElementNodeParser",
            "BaseComponent",
            "BaseNode",
            "Document",
            "OpenAIEmbedding",
            "AzureOpenAIEmbedding",
            "CohereEmbedding",
            "BedrockEmbedding",
            "HuggingFaceInferenceAPIEmbedding",
            "GeminiEmbedding",
            "MistralAIEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/cache.py": {
        "functions": [
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Put a value into the cache."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Get a value from the cache."
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Clear the cache."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the cache to a directory, if possible."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_CACHE_NAME', ctx=Load())"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "collection",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a IngestionCache from a persist directory."
            }
        ],
        "classes": [
            {
                "name": "IngestionCache",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Sequence",
            "fsspec",
            "BaseModel",
            "Field",
            "ConfigDict",
            "BaseNode",
            "doc_to_json",
            "json_to_doc",
            "SimpleKVStore",
            "BaseKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "IngestionCache",
            "DocstoreStrategy",
            "IngestionPipeline",
            "arun_transformations",
            "run_transformations"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/pipeline.py": {
        "functions": [
            {
                "name": "remove_unstable_values",
                "parameters": [
                    {
                        "name": "s",
                        "default": null
                    }
                ],
                "docstring": "Remove unstable key/value pairs.\n\nExamples include:\n- <__main__.Test object at 0x7fb9f3793f50>\n- <function test_fn at 0x7fb9f37a8900>"
            },
            {
                "name": "get_transformation_hash",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "transformation",
                        "default": null
                    }
                ],
                "docstring": "Get the hash of a transformation."
            },
            {
                "name": "run_transformations",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "in_place",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "cache",
                        "default": null
                    },
                    {
                        "name": "cache_collection",
                        "default": null
                    }
                ],
                "docstring": "Run a series of transformations on a set of nodes.\n\nArgs:\n    nodes: The nodes to transform.\n    transformations: The transformations to apply to the nodes.\n\nReturns:\n    The transformed nodes."
            },
            {
                "name": "arun_transformations_wrapper",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "in_place",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "cache",
                        "default": null
                    },
                    {
                        "name": "cache_collection",
                        "default": null
                    }
                ],
                "docstring": "Wrapper for async run_transformation. To be used in loop.run_in_executor\nwithin a ProcessPoolExecutor."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PIPELINE_NAME', ctx=Load())"
                    },
                    {
                        "name": "name",
                        "default": "Name(id='DEFAULT_PROJECT_NAME', ctx=Load())"
                    },
                    {
                        "name": "project_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "readers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "cache",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "docstore",
                        "default": "Attribute(value=Name(id='DocstoreStrategy', ctx=Load()), attr='UPSERTS', ctx=Load())"
                    },
                    {
                        "name": "docstore_strategy",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "disable_cache",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='./pipeline_storage')"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": "Name(id='DEFAULT_CACHE_NAME', ctx=Load())"
                    },
                    {
                        "name": "cache_name",
                        "default": "Name(id='DOCSTORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "docstore_name",
                        "default": null
                    }
                ],
                "docstring": "Persist the pipeline to disk."
            },
            {
                "name": "load",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='./pipeline_storage')"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": "Name(id='DEFAULT_CACHE_NAME', ctx=Load())"
                    },
                    {
                        "name": "cache_name",
                        "default": "Name(id='DOCSTORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "docstore_name",
                        "default": null
                    }
                ],
                "docstring": "Load the pipeline from disk."
            },
            {
                "name": "_get_default_transformations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_prepare_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_handle_duplicates",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "store_doc_text",
                        "default": null
                    }
                ],
                "docstring": "Handle docstore duplicates by checking all hashes."
            },
            {
                "name": "_handle_upserts",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "store_doc_text",
                        "default": null
                    }
                ],
                "docstring": "Handle docstore upserts by checking hashes and ids."
            },
            {
                "name": "_node_batcher",
                "parameters": [
                    {
                        "name": "num_batches",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Yield successive n-sized chunks from lst."
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "cache_collection",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "in_place",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "store_doc_text",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": "Run a series of transformations on a set of nodes.\n\nIf a vector store is provided, nodes with embeddings will be added to the vector store.\n\nIf a vector store + docstore are provided, the docstore will be used to de-duplicate documents.\n\nArgs:\n    show_progress (bool, optional): Shows execution progress bar(s). Defaults to False.\n    documents (Optional[List[Document]], optional): Set of documents to be transformed. Defaults to None.\n    nodes (Optional[Sequence[BaseNode]], optional): Set of nodes to be transformed. Defaults to None.\n    cache_collection (Optional[str], optional): Cache for transformations. Defaults to None.\n    in_place (bool, optional): Whether transformations creates a new list for transformed nodes or modifies the\n        array passed to `run_transformations`. Defaults to True.\n    num_workers (Optional[int], optional): The number of parallel processes to use.\n        If set to None, then sequential compute is used. Defaults to None.\n\nReturns:\n    Sequence[BaseNode]: The set of transformed Nodes/Documents"
            }
        ],
        "classes": [
            {
                "name": "DocstoreStrategy",
                "docstring": "Document de-duplication de-deduplication strategies work by comparing the hashes or ids stored in the document store.\n   They require a document store to be set which must be persisted across pipeline runs.\n\nAttributes:\n    UPSERTS:\n        ('upserts') Use upserts to handle duplicates. Checks if the a document is already in the doc store based on its id. If it is not, or if the hash of the document is updated, it will update the document in the doc store and run the transformations.\n    DUPLICATES_ONLY:\n        ('duplicates_only') Only handle duplicates. Checks if the hash of a document is already in the doc store. Only then it will add the document to the doc store and run the transformations\n    UPSERTS_AND_DELETE:\n        ('upserts_and_delete') Use upserts and delete to handle duplicates. Like the upsert strategy but it will also delete non-existing documents from the doc store"
            },
            {
                "name": "IngestionPipeline",
                "docstring": "An ingestion pipeline that can be applied to data.\n\nArgs:\n    name (str, optional):\n        Unique name of the ingestion pipeline. Defaults to DEFAULT_PIPELINE_NAME.\n    project_name (str, optional):\n        Unique name of the project. Defaults to DEFAULT_PROJECT_NAME.\n    transformations (List[TransformComponent], optional):\n        Transformations to apply to the data. Defaults to None.\n    documents (Optional[Sequence[Document]], optional):\n        Documents to ingest. Defaults to None.\n    readers (Optional[List[ReaderConfig]], optional):\n        Reader to use to read the data. Defaults to None.\n    vector_store (Optional[BasePydanticVectorStore], optional):\n        Vector store to use to store the data. Defaults to None.\n    cache (Optional[IngestionCache], optional):\n        Cache to use to store the data. Defaults to None.\n    docstore (Optional[BaseDocumentStore], optional):\n        Document store to use for de-duping with a vector store. Defaults to None.\n    docstore_strategy (DocstoreStrategy, optional):\n        Document de-dup strategy. Defaults to DocstoreStrategy.UPSERTS.\n    disable_cache (bool, optional):\n        Disable the cache. Defaults to False.\n    base_url (str, optional):\n        Base URL for the LlamaCloud API. Defaults to DEFAULT_BASE_URL.\n    app_url (str, optional):\n        Base URL for the LlamaCloud app. Defaults to DEFAULT_APP_URL.\n    api_key (Optional[str], optional):\n        LlamaCloud API key. Defaults to None.\n\nExamples:\n    ```python\n    from llama_index.core.ingestion import IngestionPipeline\n    from llama_index.core.node_parser import SentenceSplitter\n    from llama_index.embeddings.openai import OpenAIEmbedding\n\n    pipeline = IngestionPipeline(\n        transformations=[\n            SentenceSplitter(chunk_size=512, chunk_overlap=20),\n            OpenAIEmbedding(),\n        ],\n    )\n\n    nodes = pipeline.run(documents=documents)\n    ```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "multiprocessing",
            "os",
            "re",
            "warnings",
            "ProcessPoolExecutor",
            "Enum",
            "partial",
            "reduce",
            "sha256",
            "repeat",
            "Path",
            "Any",
            "Generator",
            "List",
            "Optional",
            "Sequence",
            "Union",
            "AbstractFileSystem",
            "DEFAULT_PIPELINE_NAME",
            "DEFAULT_PROJECT_NAME",
            "BaseModel",
            "Field",
            "ConfigDict",
            "DEFAULT_CACHE_NAME",
            "IngestionCache",
            "get_dispatcher",
            "SentenceSplitter",
            "ReaderConfig",
            "BaseNode",
            "Document",
            "MetadataMode",
            "TransformComponent",
            "Settings",
            "BaseDocumentStore",
            "SimpleDocumentStore",
            "DOCSTORE_FNAME",
            "concat_dirs",
            "BasePydanticVectorStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/data_sinks.py": {
        "functions": [
            {
                "name": "build_conifurable_data_sink_enum",
                "parameters": [],
                "docstring": "Build an enum of configurable data sinks.\nBut conditional on if the corresponding vector store is available."
            },
            {
                "name": "from_component",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "build_configured_data_sink",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_component",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": "Build a ConfiguredDataSink from a component.\nThis should be the preferred way to build a ConfiguredDataSink\nas it will ensure that the component is supported as indicated by having a\ncorresponding enum value in DataSources.\nThis has the added bonus that you don't need to specify the generic type\nlike ConfiguredDataSink[Document]. The return value of\nthis ConfiguredDataSink.from_component(document) will be\nConfiguredDataSink[Document] if document is\na Document object."
            },
            {
                "name": "configurable_data_sink_type",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DataSink",
                "docstring": "A class containing metadata for a type of data sink."
            },
            {
                "name": "ConfigurableComponent",
                "docstring": null
            },
            {
                "name": "ConfiguredDataSink",
                "docstring": "A class containing metadata & implementation for a data sink in a pipeline."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "Generic",
            "Type",
            "TypeVar",
            "BaseModel",
            "Field",
            "ValidationError",
            "BasePydanticVectorStore",
            "ChromaVectorStore",
            "PineconeVectorStore",
            "PGVectorStore",
            "QdrantVectorStore",
            "WeaviateVectorStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/data_sources.py": {
        "functions": [
            {
                "name": "build_configurable_data_source_enum",
                "parameters": [],
                "docstring": "Build an enum of configurable data sources.\nBut conditional on if the corresponding reader is available."
            },
            {
                "name": "file_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "lazy_load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Load data from the input directory lazily."
            },
            {
                "name": "from_component",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "component",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "build_configured_data_source",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "component",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_component",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "component",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": "Build a ConfiguredDataSource from a component.\n\nThis should be the preferred way to build a ConfiguredDataSource\nas it will ensure that the component is supported as indicated by having a\ncorresponding enum value in DataSources.\n\nThis has the added bonus that you don't need to specify the generic type\nlike ConfiguredDataSource[Document]. The return value of\nthis ConfiguredDataSource.from_component(document) will be\nConfiguredDataSource[Document] if document is\na Document object."
            },
            {
                "name": "configurable_data_source_type",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DataSource",
                "docstring": "A class containing metadata for a type of data source."
            },
            {
                "name": "DocumentGroup",
                "docstring": "A group of documents, usually separate pages from a single file."
            },
            {
                "name": "ConfigurableComponent",
                "docstring": null
            },
            {
                "name": "ConfiguredDataSource",
                "docstring": "A class containing metadata & implementation for a data source in a pipeline."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "Enum",
            "Path",
            "Any",
            "Generic",
            "Iterable",
            "List",
            "Optional",
            "Type",
            "TypeVar",
            "cast",
            "BaseModel",
            "Field",
            "ValidationError",
            "BasePydanticReader",
            "ReaderConfig",
            "BaseComponent",
            "Document",
            "TextNode",
            "DiscordReader",
            "ElasticsearchReader",
            "NotionPageReader",
            "SlackReader",
            "TwitterTweetReader",
            "SimpleWebPageReader",
            "TrafilaturaWebReader",
            "BeautifulSoupWebReader",
            "RssReader",
            "WikipediaReader",
            "YoutubeTranscriptReader",
            "GoogleDocsReader",
            "GoogleSheetsReader",
            "S3Reader",
            "AzStorageBlobReader",
            "GCSReader",
            "GoogleDriveReader",
            "OneDriveReader",
            "SharePointReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/ingestion/api_utils.py": {
        "functions": [
            {
                "name": "get_client",
                "parameters": [
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "base_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "app_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=60)"
                    },
                    {
                        "name": "httpx_client",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Get the sync platform API client."
            },
            {
                "name": "get_aclient",
                "parameters": [
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "base_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "app_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=60)"
                    },
                    {
                        "name": "httpx_client",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Get the async platform API client."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "httpx",
            "Optional",
            "TYPE_CHECKING",
            "DEFAULT_APP_URL",
            "DEFAULT_BASE_URL",
            "AsyncLlamaCloud",
            "LlamaCloud",
            "LlamaCloud",
            "AsyncLlamaCloud"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/loading.py": {
        "functions": [
            {
                "name": "load_index_from_storage",
                "parameters": [
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_id",
                        "default": null
                    }
                ],
                "docstring": "Load index from storage context.\n\nArgs:\n    storage_context (StorageContext): storage context containing\n        docstore, index store and vector store.\n    index_id (Optional[str]): ID of the index to load.\n        Defaults to None, which assumes there's only a single index\n        in the index store and load it.\n    **kwargs: Additional keyword args to pass to the index constructors."
            },
            {
                "name": "load_indices_from_storage",
                "parameters": [
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_ids",
                        "default": null
                    }
                ],
                "docstring": "Load multiple indices from storage context.\n\nArgs:\n    storage_context (StorageContext): storage context containing\n        docstore, index store and vector store.\n    index_id (Optional[Sequence[str]]): IDs of the indices to load.\n        Defaults to None, which loads all indices in the index store.\n    **kwargs: Additional keyword args to pass to the index constructors."
            },
            {
                "name": "load_graph_from_storage",
                "parameters": [
                    {
                        "name": "storage_context",
                        "default": null
                    },
                    {
                        "name": "root_id",
                        "default": null
                    }
                ],
                "docstring": "Load composable graph from storage context.\n\nArgs:\n    storage_context (StorageContext): storage context containing\n        docstore, index store and vector store.\n    root_id (str): ID of the root index of the graph.\n    **kwargs: Additional keyword args to pass to the index constructors."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "BaseIndex",
            "ComposableGraph",
            "INDEX_STRUCT_TYPE_TO_INDEX_CLASS",
            "StorageContext"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/postprocessor.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AutoPrevNextNodePostprocessor",
            "EmbeddingRecencyPostprocessor",
            "FixedRecencyPostprocessor",
            "KeywordNodePostprocessor",
            "LLMRerank",
            "LongContextReorder",
            "MetadataReplacementPostProcessor",
            "NERPIINodePostprocessor",
            "PIINodePostprocessor",
            "PrevNextNodePostprocessor",
            "SentenceEmbeddingOptimizer",
            "SentenceTransformerRerank",
            "SimilarityPostprocessor",
            "TimeWeightedPostprocessor",
            "RankGPTRerank",
            "SentenceTransformerRerank",
            "BaseNodePostprocessor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/registry.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Type",
            "IndexStructType",
            "BaseIndex",
            "DocumentSummaryIndex",
            "EmptyIndex",
            "KeywordTableIndex",
            "KnowledgeGraphIndex",
            "SummaryIndex",
            "MultiModalVectorStoreIndex",
            "PropertyGraphIndex",
            "PandasIndex",
            "SQLStructStoreIndex",
            "TreeIndex",
            "VectorStoreIndex"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ComposableGraph",
            "DocumentSummaryIndex",
            "GPTDocumentSummaryIndex",
            "DocumentSummaryIndex",
            "EmptyIndex",
            "GPTEmptyIndex",
            "GPTKeywordTableIndex",
            "KeywordTableIndex",
            "GPTRAKEKeywordTableIndex",
            "RAKEKeywordTableIndex",
            "GPTSimpleKeywordTableIndex",
            "SimpleKeywordTableIndex",
            "KnowledgeGraphIndex",
            "GPTListIndex",
            "ListIndex",
            "SummaryIndex",
            "GPTListIndex",
            "ListIndex",
            "SummaryIndex",
            "load_graph_from_storage",
            "load_index_from_storage",
            "load_indices_from_storage",
            "MultiModalVectorStoreIndex",
            "GPTPandasIndex",
            "PandasIndex",
            "GPTSQLStructStoreIndex",
            "SQLStructStoreIndex",
            "GPTTreeIndex",
            "TreeIndex",
            "GPTVectorStoreIndex",
            "VectorStoreIndex",
            "PropertyGraphIndex"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/utils.py": {
        "functions": [
            {
                "name": "get_sorted_node_list",
                "parameters": [
                    {
                        "name": "node_dict",
                        "default": null
                    }
                ],
                "docstring": "Get sorted node list. Used by tree-strutured indices."
            },
            {
                "name": "extract_numbers_given_response",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "n",
                        "default": null
                    }
                ],
                "docstring": "Extract number given the GPT-generated response.\n\nUsed by tree-structured indices."
            },
            {
                "name": "expand_tokens_with_subtokens",
                "parameters": [
                    {
                        "name": "tokens",
                        "default": null
                    }
                ],
                "docstring": "Get subtokens from a list of tokens., filtering for stopwords."
            },
            {
                "name": "log_vector_store_query_result",
                "parameters": [
                    {
                        "name": "result",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "logger",
                        "default": null
                    }
                ],
                "docstring": "Log vector store query result."
            },
            {
                "name": "default_format_node_batch_fn",
                "parameters": [
                    {
                        "name": "summary_nodes",
                        "default": null
                    }
                ],
                "docstring": "Default format node batch function.\n\nAssign each summary node a number, and format the batch of nodes."
            },
            {
                "name": "default_parse_choice_select_answer_fn",
                "parameters": [
                    {
                        "name": "answer",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "num_choices",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Default parse choice select answer function."
            },
            {
                "name": "embed_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Get embeddings of the given nodes, run embedding model if necessary.\n\nArgs:\n    nodes (Sequence[BaseNode]): The nodes to embed.\n    embed_model (BaseEmbedding): The embedding model to use.\n    show_progress (bool): Whether to show progress bar.\n\nReturns:\n    Dict[str, List[float]]: A map from node id to embedding."
            },
            {
                "name": "embed_image_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Get image embeddings of the given nodes, run image embedding model if necessary.\n\nArgs:\n    nodes (Sequence[ImageNode]): The nodes to embed.\n    embed_model (MultiModalEmbedding): The embedding model to use.\n    show_progress (bool): Whether to show progress bar.\n\nReturns:\n    Dict[str, List[float]]: A map from node id to embedding."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "re",
            "BaseEmbedding",
            "MultiModalEmbedding",
            "BaseNode",
            "ImageNode",
            "MetadataMode",
            "globals_helper",
            "truncate_text",
            "VectorStoreQueryResult",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Set",
            "Tuple"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/base_retriever.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/prompt_helper.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_CONTEXT_WINDOW', ctx=Load())"
                    },
                    {
                        "name": "context_window",
                        "default": "Name(id='DEFAULT_NUM_OUTPUTS', ctx=Load())"
                    },
                    {
                        "name": "num_output",
                        "default": "Name(id='DEFAULT_CHUNK_OVERLAP_RATIO', ctx=Load())"
                    },
                    {
                        "name": "chunk_overlap_ratio",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chunk_size_limit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer",
                        "default": "Constant(value=' ')"
                    },
                    {
                        "name": "separator",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_llm_metadata",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_CHUNK_OVERLAP_RATIO', ctx=Load())"
                    },
                    {
                        "name": "llm_metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chunk_overlap_ratio",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chunk_size_limit",
                        "default": "Constant(value=' ')"
                    },
                    {
                        "name": "tokenizer",
                        "default": null
                    },
                    {
                        "name": "separator",
                        "default": null
                    }
                ],
                "docstring": "Create from llm predictor.\n\nThis will autofill values like context_window and num_output."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_available_context_size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "num_prompt_tokens",
                        "default": null
                    }
                ],
                "docstring": "Get available context size.\n\nThis is calculated as:\n    available context window = total context window\n        - input (partially filled prompt)\n        - output (room reserved for response)\n\nNotes:\n- Available context size is further clamped to be non-negative."
            },
            {
                "name": "_get_tools_from_llm",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_available_chunk_size",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "num_chunks",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "padding",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Get available chunk size.\n\nThis is calculated as:\n    available chunk size = available context window  // number_chunks\n        - padding\n\nNotes:\n- By default, we use padding of 5 (to save space for formatting needs).\n- Available chunk size is further clamped to chunk_size_limit if specified."
            },
            {
                "name": "get_text_splitter_given_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "prompt",
                        "default": "Name(id='DEFAULT_PADDING', ctx=Load())"
                    },
                    {
                        "name": "num_chunks",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "padding",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Get text splitter configured to maximally pack available context window,\ntaking into account of given prompt, and desired number of chunks."
            },
            {
                "name": "truncate",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PADDING', ctx=Load())"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_chunks",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "padding",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Truncate text chunks to fit available context window."
            },
            {
                "name": "repack",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PADDING', ctx=Load())"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_chunks",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "padding",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Repack text chunks to fit available context window.\n\nThis will combine text chunks into consolidated chunks\nthat more fully \"pack\" the prompt template given the context_window."
            }
        ],
        "classes": [
            {
                "name": "PromptHelper",
                "docstring": "Prompt helper.\n\nGeneral prompt helper that can help deal with LLM context window token limitations.\n\nAt its core, it calculates available context size by starting with the context\nwindow size of an LLM and reserve token space for the prompt template, and the\noutput.\n\nIt provides utility for \"repacking\" text chunks (retrieved from index) to maximally\nmake use of the available context window (and thereby reducing the number of LLM\ncalls needed), or truncating them so that they fit in a single LLM call.\n\nArgs:\n    context_window (int):                   Context window for the LLM.\n    num_output (int):                       Number of outputs for the LLM.\n    chunk_overlap_ratio (float):            Chunk overlap as a ratio of chunk size\n    chunk_size_limit (Optional[int]):         Maximum chunk size to use.\n    tokenizer (Optional[Callable[[str], List]]): Tokenizer to use.\n    separator (str):                        Separator for text splitter"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "deepcopy",
            "TYPE_CHECKING",
            "Callable",
            "List",
            "Optional",
            "Sequence",
            "ChatMessage",
            "LLMMetadata",
            "Field",
            "PrivateAttr",
            "DEFAULT_CONTEXT_WINDOW",
            "DEFAULT_NUM_OUTPUTS",
            "LLM",
            "StructuredLLM",
            "TokenTextSplitter",
            "truncate_text",
            "BasePromptTemplate",
            "ChatPromptTemplate",
            "SelectorPromptTemplate",
            "get_empty_prompt_txt",
            "format_string",
            "BaseComponent",
            "TokenCounter",
            "BaseTool",
            "get_function_tool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Initialize with parameters."
            },
            {
                "name": "from_documents",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "transformations",
                        "default": null
                    }
                ],
                "docstring": "Create index from documents.\n\nArgs:\n    documents (Optional[Sequence[BaseDocument]]): List of documents to\n        build the index from."
            },
            {
                "name": "index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the index struct."
            },
            {
                "name": "index_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the index struct."
            },
            {
                "name": "set_index_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "index_id",
                        "default": null
                    }
                ],
                "docstring": "Set the index id.\n\nNOTE: if you decide to set the index_id on the index_struct manually,\nyou will need to explicitly call `add_index_struct` on the `index_store`\nto update the index store.\n\nArgs:\n    index_id (str): Index id to set."
            },
            {
                "name": "docstore",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the docstore corresponding to the index."
            },
            {
                "name": "storage_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "new_summary",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Index-specific logic for inserting nodes to the index struct."
            },
            {
                "name": "insert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert nodes."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "document",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a list of nodes from the index.\n\nArgs:\n    doc_ids (List[str]): A list of doc_ids from the nodes to delete"
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a document from the index.\nAll nodes in the index related to the index will be deleted.\n\nArgs:\n    doc_id (str): A doc_id of the ingested document"
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a document and it's nodes by using ref_doc_id."
            },
            {
                "name": "update",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "document",
                        "default": null
                    }
                ],
                "docstring": "Update a document and it's corresponding nodes.\n\nThis is equivalent to deleting the document and then inserting it again.\n\nArgs:\n    document (Union[BaseDocument, BaseIndex]): document to update\n    insert_kwargs (Dict): kwargs to pass to insert\n    delete_kwargs (Dict): kwargs to pass to delete"
            },
            {
                "name": "update_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "document",
                        "default": null
                    }
                ],
                "docstring": "Update a document and it's corresponding nodes.\n\nThis is equivalent to deleting the document and then inserting it again.\n\nArgs:\n    document (Union[BaseDocument, BaseIndex]): document to update\n    insert_kwargs (Dict): kwargs to pass to insert\n    delete_kwargs (Dict): kwargs to pass to delete"
            },
            {
                "name": "refresh",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Refresh an index with documents that have changed.\n\nThis allows users to save LLM and Embedding model calls, while only\nupdating documents that have any changes in text or metadata. It\nwill also insert any documents that previously were not stored."
            },
            {
                "name": "refresh_ref_docs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Refresh an index with documents that have changed.\n\nThis allows users to save LLM and Embedding model calls, while only\nupdating documents that have any changes in text or metadata. It\nwill also insert any documents that previously were not stored."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Convert the index to a query engine.\n\nCalls `index.as_retriever(**kwargs)` to get the retriever and then wraps it in a\n`RetrieverQueryEngine.from_args(retriever, **kwrags)` call."
            },
            {
                "name": "as_chat_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='ChatMode', ctx=Load()), attr='BEST', ctx=Load())"
                    },
                    {
                        "name": "chat_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Convert the index to a chat engine.\n\nCalls `index.as_query_engine(llm=llm, **kwargs)` to get the query engine and then\nwraps it in a chat engine based on the chat mode.\n\nChat modes:\n    - `ChatMode.BEST` (default): Chat engine that uses an agent (react or openai) with a query engine tool\n    - `ChatMode.CONTEXT`: Chat engine that uses a retriever to get context\n    - `ChatMode.CONDENSE_QUESTION`: Chat engine that condenses questions\n    - `ChatMode.CONDENSE_PLUS_CONTEXT`: Chat engine that condenses questions and uses a retriever to get context\n    - `ChatMode.SIMPLE`: Simple chat engine that uses the LLM directly\n    - `ChatMode.REACT`: Chat engine that uses a react agent with a query engine tool\n    - `ChatMode.OPENAI`: Chat engine that uses an openai agent with a query engine tool"
            }
        ],
        "classes": [
            {
                "name": "BaseIndex",
                "docstring": "Base LlamaIndex.\n\nArgs:\n    nodes (List[Node]): List of nodes to index\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "ABC",
            "abstractmethod",
            "Any",
            "Dict",
            "Generic",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "TypeVar",
            "BaseQueryEngine",
            "BaseRetriever",
            "CallbackManager",
            "BaseChatEngine",
            "ChatMode",
            "IndexStruct",
            "run_transformations",
            "LLMType",
            "resolve_llm",
            "BaseNode",
            "Document",
            "IndexNode",
            "TransformComponent",
            "Settings",
            "BaseDocumentStore",
            "RefDocInfo",
            "StorageContext",
            "RetrieverQueryEngine",
            "AgentRunner",
            "QueryEngineTool",
            "CondenseQuestionChatEngine",
            "ContextChatEngine",
            "CondensePlusContextChatEngine",
            "SimpleChatEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/eval_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "evaluator",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_process_tool_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool_output",
                        "default": null
                    },
                    {
                        "name": "evaluation_result",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "description",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "return_direct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "resolve_input_errors",
                        "default": null
                    },
                    {
                        "name": "evaluator",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "EvalQueryEngineTool",
                "docstring": "Evaluating query engine tool.\n\nA tool that makes use of a query engine and an evaluator, where the\nevaluation of the query engine response will determine the tool output.\n\nArgs:\n    evaluator (BaseEvaluator): A query engine.\n    query_engine (BaseQueryEngine): A query engine.\n    metadata (ToolMetadata): The associated metadata of the query engine."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "BaseQueryEngine",
            "AnswerRelevancyEvaluator",
            "BaseEvaluator",
            "EvaluationResult",
            "QueryEngineTool",
            "ToolMetadata",
            "ToolOutput"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/calling.py": {
        "functions": [
            {
                "name": "call_tool",
                "parameters": [
                    {
                        "name": "tool",
                        "default": null
                    },
                    {
                        "name": "arguments",
                        "default": null
                    }
                ],
                "docstring": "Call a tool with arguments."
            },
            {
                "name": "call_tool_with_selection",
                "parameters": [
                    {
                        "name": "tool_call",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "TYPE_CHECKING",
            "Sequence",
            "ToolSelection",
            "json",
            "BaseTool",
            "call_tool",
            "acall_tool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "query_engine",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    },
                    {
                        "name": "resolve_input_errors",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "description",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "return_direct",
                        "default": null
                    },
                    {
                        "name": "resolve_input_errors",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_langchain_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "QueryEngineTool",
                "docstring": "Query engine tool.\n\nA tool making use of a query engine.\n\nArgs:\n    query_engine (BaseQueryEngine): A query engine.\n    metadata (ToolMetadata): The associated metadata of the query engine."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "Optional",
            "BaseQueryEngine",
            "AsyncBaseTool",
            "ToolMetadata",
            "ToolOutput",
            "LlamaIndexTool",
            "IndexToolConfig",
            "LlamaIndexTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/query_plan.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_engine_tools",
                        "default": null
                    },
                    {
                        "name": "response_synthesizer",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "description_prefix",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine_tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "description_prefix",
                        "default": null
                    }
                ],
                "docstring": "Initialize from defaults."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Metadata."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_execute_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "nodes_dict",
                        "default": null
                    }
                ],
                "docstring": "Execute node."
            },
            {
                "name": "_find_root_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes_dict",
                        "default": null
                    }
                ],
                "docstring": "Find root node."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Call."
            }
        ],
        "classes": [
            {
                "name": "QueryNode",
                "docstring": "Query node.\n\nA query node represents a query (query_str) that must be answered.\nIt can either be answered by a tool (tool_name), or by a list of child nodes\n(child_nodes).\nThe tool_name and child_nodes fields are mutually exclusive."
            },
            {
                "name": "QueryPlan",
                "docstring": "Query plan.\n\nContains a list of QueryNode objects (which is a recursive object).\nOut of the list of QueryNode objects, one of them must be the root node.\nThe root node is the one that isn't a dependency of any other node."
            },
            {
                "name": "QueryPlanTool",
                "docstring": "Query plan tool.\n\nA tool that takes in a list of tools and executes a query plan."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseModel",
            "Field",
            "BaseSynthesizer",
            "get_response_synthesizer",
            "NodeWithScore",
            "TextNode",
            "BaseTool",
            "ToolMetadata",
            "ToolOutput",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/download.py": {
        "functions": [
            {
                "name": "download_tool",
                "parameters": [
                    {
                        "name": "tool_class",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "llama_hub_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_path",
                        "default": null
                    }
                ],
                "docstring": "Download a single tool from Llama Hub.\n\nArgs:\n    tool_class: The name of the tool class you want to download,\n        such as `GmailToolSpec`.\n    refresh_cache: If true, the local cache will be skipped and the\n        loader will be fetched directly from the remote repo.\n    custom_path: Custom dirpath to download loader into.\n\nReturns:\n    A Loader."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "Optional",
            "Type",
            "deprecated",
            "download_integration",
            "BaseToolSpec"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "download_tool",
            "FunctionTool",
            "QueryEngineTool",
            "QueryPlanTool",
            "RetrieverTool",
            "AsyncBaseTool",
            "BaseTool",
            "ToolMetadata",
            "ToolOutput",
            "adapt_to_async_tool",
            "ToolSelection",
            "call_tool_with_selection",
            "acall_tool_with_selection"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/types.py": {
        "functions": [
            {
                "name": "adapt_to_async_tool",
                "parameters": [
                    {
                        "name": "tool",
                        "default": null
                    }
                ],
                "docstring": "Converts a synchronous tool to an async tool."
            },
            {
                "name": "get_parameters_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "fn_schema_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get fn schema as string."
            },
            {
                "name": "get_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get name."
            },
            {
                "name": "to_openai_function",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Deprecated and replaced by `to_openai_tool`.\nThe name and arguments of a function that should be called, as generated by the\nmodel."
            },
            {
                "name": "to_openai_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "skip_length_check",
                        "default": null
                    }
                ],
                "docstring": "To OpenAI tool."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "String."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_process_langchain_tool_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "langchain_tool_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Process langchain tool kwargs."
            },
            {
                "name": "to_langchain_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "To langchain tool."
            },
            {
                "name": "to_langchain_structured_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "To langchain structured tool."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "This is the method that should be implemented by the tool developer."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DefaultToolFnSchema",
                "docstring": "Default tool function Schema."
            },
            {
                "name": "ToolMetadata",
                "docstring": null
            },
            {
                "name": "ToolOutput",
                "docstring": "Tool output."
            },
            {
                "name": "BaseTool",
                "docstring": null
            },
            {
                "name": "AsyncBaseTool",
                "docstring": "Base-level tool class that is backwards compatible with the old tool spec but also\nsupports async."
            },
            {
                "name": "BaseToolAsyncAdapter",
                "docstring": "Adapter class that allows a synchronous tool to be used as an async tool."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "abstractmethod",
            "dataclass",
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "Optional",
            "Type",
            "DispatcherSpanMixin",
            "deprecated",
            "BaseModel",
            "StructuredTool",
            "Tool",
            "Tool",
            "StructuredTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/ondemand_loader_tool.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "loader",
                        "default": "Constant(value='query_str')"
                    },
                    {
                        "name": "index_cls",
                        "default": null
                    },
                    {
                        "name": "index_kwargs",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    },
                    {
                        "name": "use_query_str_in_loader",
                        "default": null
                    },
                    {
                        "name": "query_str_kwargs_key",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "reader",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_kwargs",
                        "default": "Constant(value='query_str')"
                    },
                    {
                        "name": "use_query_str_in_loader",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_str_kwargs_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "description",
                        "default": null
                    },
                    {
                        "name": "fn_schema",
                        "default": null
                    }
                ],
                "docstring": "From defaults."
            },
            {
                "name": "from_tool",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_kwargs",
                        "default": "Constant(value='query_str')"
                    },
                    {
                        "name": "use_query_str_in_loader",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_str_kwargs_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "description",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "return_direct",
                        "default": null
                    },
                    {
                        "name": "fn_schema",
                        "default": null
                    }
                ],
                "docstring": "From defaults."
            },
            {
                "name": "_parse_args",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Call."
            }
        ],
        "classes": [
            {
                "name": "OnDemandLoaderTool",
                "docstring": "On-demand data loader tool.\n\nLoads data with by calling the provided loader function,\nstores in index, and queries for relevant data with a\nnatural language query string."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Type",
            "BaseModel",
            "BaseIndex",
            "VectorStoreIndex",
            "BaseReader",
            "Document",
            "FunctionTool",
            "AsyncBaseTool",
            "ToolMetadata",
            "ToolOutput",
            "create_schema_from_function"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/utils.py": {
        "functions": [
            {
                "name": "create_schema_from_function",
                "parameters": [
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "func",
                        "default": null
                    },
                    {
                        "name": "additional_fields",
                        "default": null
                    }
                ],
                "docstring": "Create schema from function."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "signature",
            "Any",
            "Awaitable",
            "Callable",
            "List",
            "Optional",
            "Tuple",
            "Type",
            "Union",
            "cast",
            "get_origin",
            "get_args",
            "typing",
            "BaseModel",
            "FieldInfo",
            "create_model"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/function_tool.py": {
        "functions": [
            {
                "name": "sync_to_async",
                "parameters": [
                    {
                        "name": "fn",
                        "default": null
                    }
                ],
                "docstring": "Sync to async."
            },
            {
                "name": "async_to_sync",
                "parameters": [
                    {
                        "name": "func_async",
                        "default": null
                    }
                ],
                "docstring": "Async from sync."
            },
            {
                "name": "_sync_wrapped_fn",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "description",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "return_direct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn_schema",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_metadata",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Metadata."
            },
            {
                "name": "fn",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Function."
            },
            {
                "name": "async_fn",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Async function."
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Call."
            },
            {
                "name": "to_langchain_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "To langchain tool."
            },
            {
                "name": "to_langchain_structured_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "To langchain structured tool."
            }
        ],
        "classes": [
            {
                "name": "FunctionTool",
                "docstring": "Function Tool.\n\nA tool that takes in a function."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "inspect",
            "TYPE_CHECKING",
            "Any",
            "Awaitable",
            "Callable",
            "Optional",
            "Type",
            "asyncio_run",
            "BaseModel",
            "FieldInfo",
            "AsyncBaseTool",
            "ToolMetadata",
            "ToolOutput",
            "create_schema_from_function",
            "StructuredTool",
            "Tool",
            "Tool",
            "StructuredTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/retriever_tool.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "description",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_langchain_tool",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_apply_node_postprocessors",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RetrieverTool",
                "docstring": "Retriever tool.\n\nA tool making use of a retriever.\n\nArgs:\n    retriever (BaseRetriever): A retriever.\n    metadata (ToolMetadata): The associated metadata of the query engine.\n    node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n        node postprocessors."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "List",
            "Optional",
            "BaseRetriever",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "AsyncBaseTool",
            "ToolMetadata",
            "ToolOutput",
            "BaseNodePostprocessor",
            "LlamaIndexTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/embeddings/loading.py": {
        "functions": [
            {
                "name": "load_embed_model",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Load Embedding by name."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Type",
            "BaseEmbedding",
            "MockEmbedding",
            "OpenAIEmbedding",
            "AzureOpenAIEmbedding",
            "HuggingFaceInferenceAPIEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/embeddings/multi_modal_base.py": {
        "functions": [
            {
                "name": "_get_image_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "img_file_path",
                        "default": null
                    }
                ],
                "docstring": "Embed the input image synchronously.\n\nSubclasses should implement this method. Reference get_image_embedding's\ndocstring for more information."
            },
            {
                "name": "get_image_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "img_file_path",
                        "default": null
                    }
                ],
                "docstring": "Embed the input image."
            },
            {
                "name": "_get_image_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "img_file_paths",
                        "default": null
                    }
                ],
                "docstring": "Embed the input sequence of image synchronously.\n\nSubclasses can implement this method if batch queries are supported."
            },
            {
                "name": "get_image_embedding_batch",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "img_file_paths",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Get a list of image embeddings, with batching."
            }
        ],
        "classes": [
            {
                "name": "MultiModalEmbedding",
                "docstring": "Base class for Multi Modal embeddings."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "abstractmethod",
            "Coroutine",
            "List",
            "Tuple",
            "BaseEmbedding",
            "Embedding",
            "CBEventType",
            "EventPayload",
            "ImageType",
            "get_tqdm_iterable",
            "tqdm_asyncio"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/embeddings/mock_embed_model.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "embed_dim",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_vector",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Get query embedding."
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Get text embedding."
            }
        ],
        "classes": [
            {
                "name": "MockEmbedding",
                "docstring": "Mock embedding.\n\nUsed for token prediction.\n\nArgs:\n    embed_dim (int): embedding dimension"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "BaseEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/embeddings/pooling.py": {
        "functions": [
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cls_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cls_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cls_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "mean_pooling",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "array",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Pooling",
                "docstring": "Enum of possible pooling choices with pooling behaviors."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "TYPE_CHECKING",
            "Union",
            "overload",
            "numpy",
            "torch"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/embeddings/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEmbedding",
            "MockEmbedding",
            "MultiModalEmbedding",
            "Pooling",
            "resolve_embed_model"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/embeddings/utils.py": {
        "functions": [
            {
                "name": "save_embedding",
                "parameters": [
                    {
                        "name": "embedding",
                        "default": null
                    },
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": "Save embedding to file."
            },
            {
                "name": "load_embedding",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": "Load embedding from file. Will only return first embedding in file."
            },
            {
                "name": "resolve_embed_model",
                "parameters": [
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Resolve embed model."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "TYPE_CHECKING",
            "List",
            "Optional",
            "Union",
            "BaseEmbedding",
            "CallbackManager",
            "MockEmbedding",
            "get_cache_dir",
            "Embeddings",
            "Settings",
            "Embeddings",
            "OpenAIEmbedding",
            "validate_openai_api_key",
            "HuggingFaceEmbedding",
            "LangchainEmbedding",
            "ClipEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/loading.py": {
        "functions": [
            {
                "name": "load_parser",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Type",
            "HTMLNodeParser",
            "JSONNodeParser",
            "MarkdownNodeParser",
            "SimpleFileNodeParser",
            "NodeParser",
            "HierarchicalNodeParser",
            "CodeSplitter",
            "SentenceSplitter",
            "SentenceWindowNodeParser",
            "TokenTextSplitter"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/node_utils.py": {
        "functions": [
            {
                "name": "default_id_func",
                "parameters": [
                    {
                        "name": "i",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "build_nodes_from_splits",
                "parameters": [
                    {
                        "name": "text_splits",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "document",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ref_doc",
                        "default": null
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": "Build nodes from splits."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "i",
                        "default": null
                    },
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "IdFuncCallable",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "uuid",
            "List",
            "Optional",
            "Protocol",
            "runtime_checkable",
            "BaseNode",
            "Document",
            "ImageDocument",
            "ImageNode",
            "NodeRelationship",
            "TextNode",
            "truncate_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/interface.py": {
        "functions": [
            {
                "name": "_validate_id_func",
                "parameters": [
                    {
                        "name": "v",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_serialize_id_func",
                "parameters": [
                    {
                        "name": "f",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_parsed_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "parent_doc_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "documents",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse documents into nodes.\n\nArgs:\n    documents (Sequence[Document]): documents to parse\n    show_progress (bool): whether to show progress bar"
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_texts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_text_metadata_aware",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "metadata_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_texts_metadata_aware",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    },
                    {
                        "name": "metadata_strs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_metadata_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Helper function to get the proper metadata str for splitting."
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "NodeParser",
                "docstring": "Base interface for node parser."
            },
            {
                "name": "TextSplitter",
                "docstring": null
            },
            {
                "name": "MetadataAwareTextSplitter",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Sequence",
            "Optional",
            "Annotated",
            "Field",
            "WithJsonSchema",
            "BeforeValidator",
            "ConfigDict",
            "PlainSerializer",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "build_nodes_from_splits",
            "default_id_func",
            "BaseNode",
            "Document",
            "MetadataMode",
            "NodeRelationship",
            "TextNode",
            "TransformComponent",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "HTMLNodeParser",
            "JSONNodeParser",
            "MarkdownNodeParser",
            "SimpleFileNodeParser",
            "MetadataAwareTextSplitter",
            "NodeParser",
            "TextSplitter",
            "HierarchicalNodeParser",
            "get_leaf_nodes",
            "get_root_nodes",
            "get_child_nodes",
            "get_deeper_nodes",
            "MarkdownElementNodeParser",
            "UnstructuredElementNodeParser",
            "LlamaParseJsonNodeParser",
            "CodeSplitter",
            "LangchainNodeParser",
            "SemanticSplitterNodeParser",
            "SemanticDoubleMergingSplitterNodeParser",
            "LanguageConfig",
            "SentenceSplitter",
            "SentenceWindowNodeParser",
            "TokenTextSplitter"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response/pprint_utils.py": {
        "functions": [
            {
                "name": "pprint_metadata",
                "parameters": [
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Display metadata for jupyter notebook."
            },
            {
                "name": "pprint_source_node",
                "parameters": [
                    {
                        "name": "source_node",
                        "default": "Constant(value=350)"
                    },
                    {
                        "name": "source_length",
                        "default": "Constant(value=70)"
                    },
                    {
                        "name": "wrap_width",
                        "default": null
                    }
                ],
                "docstring": "Display source node for jupyter notebook."
            },
            {
                "name": "pprint_response",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=350)"
                    },
                    {
                        "name": "source_length",
                        "default": "Constant(value=70)"
                    },
                    {
                        "name": "wrap_width",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_source",
                        "default": null
                    }
                ],
                "docstring": "Pretty print response for jupyter notebook."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "textwrap",
            "pprint",
            "Any",
            "Dict",
            "Response",
            "NodeWithScore",
            "truncate_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Response"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response/utils.py": {
        "functions": [
            {
                "name": "get_response_text",
                "parameters": [
                    {
                        "name": "response_gen",
                        "default": null
                    }
                ],
                "docstring": "Get response text."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AsyncGenerator",
            "Generator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response/notebook_utils.py": {
        "functions": [
            {
                "name": "display_image",
                "parameters": [
                    {
                        "name": "img_str",
                        "default": "Name(id='DEFAULT_THUMBNAIL_SIZE', ctx=Load())"
                    },
                    {
                        "name": "size",
                        "default": null
                    }
                ],
                "docstring": "Display base64 encoded image str as image for jupyter notebook."
            },
            {
                "name": "display_image_uris",
                "parameters": [
                    {
                        "name": "image_paths",
                        "default": "Name(id='DEFAULT_IMAGE_MATRIX', ctx=Load())"
                    },
                    {
                        "name": "image_matrix",
                        "default": "Name(id='DEFAULT_SHOW_TOP_K', ctx=Load())"
                    },
                    {
                        "name": "top_k",
                        "default": null
                    }
                ],
                "docstring": "Display base64 encoded image str as image for jupyter notebook."
            },
            {
                "name": "display_source_node",
                "parameters": [
                    {
                        "name": "source_node",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "source_length",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_source_metadata",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": "Display source node for jupyter notebook."
            },
            {
                "name": "display_metadata",
                "parameters": [
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Display metadata for jupyter notebook."
            },
            {
                "name": "display_response",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "source_length",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_source",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_metadata",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_source_metadata",
                        "default": null
                    }
                ],
                "docstring": "Display response for jupyter notebook."
            },
            {
                "name": "display_query_and_multimodal_response",
                "parameters": [
                    {
                        "name": "query_str",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "response",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "plot_height",
                        "default": null
                    },
                    {
                        "name": "plot_width",
                        "default": null
                    }
                ],
                "docstring": "For displaying a query and its multi-modal response."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "BytesIO",
            "Any",
            "Dict",
            "List",
            "Tuple",
            "matplotlib.pyplot",
            "requests",
            "Markdown",
            "display",
            "Response",
            "b64_2_img",
            "ImageNode",
            "MetadataMode",
            "NodeWithScore",
            "truncate_text",
            "Image"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/memory/vector_memory.py": {
        "functions": [
            {
                "name": "_stringify_obj",
                "parameters": [
                    {
                        "name": "d",
                        "default": null
                    }
                ],
                "docstring": "Utility function to convert all keys in a dictionary to strings."
            },
            {
                "name": "_stringify_chat_message",
                "parameters": [
                    {
                        "name": "msg",
                        "default": null
                    }
                ],
                "docstring": "Utility function to convert chatmessage to serializable dict."
            },
            {
                "name": "_get_starter_node_for_new_batch",
                "parameters": [],
                "docstring": "Generates a new starter node for a new batch or group of messages."
            },
            {
                "name": "validate_vector_index",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Validate vector index."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Create vector memory.\n\nArgs:\n    vector_store (Optional[BasePydanticVectorStore]): vector store (note: delete_nodes must\n        be implemented. At time of writing (May 2024), Chroma, Qdrant and\n        SimpleVectorStore all support delete_nodes.\n    embed_model (Optional[EmbedType]): embedding model\n    index_kwargs (Optional[Dict]): kwargs for initializing the index\n    retriever_kwargs (Optional[Dict]): kwargs for initializing the retriever"
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "initial_token_count",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all chat history."
            },
            {
                "name": "_commit_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "override_last",
                        "default": null
                    }
                ],
                "docstring": "Commit new node to vector store."
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Put chat history."
            },
            {
                "name": "set",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set chat history."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset chat history."
            }
        ],
        "classes": [
            {
                "name": "VectorMemory",
                "docstring": "Memory backed by a vector index.\n\nNOTE: This class requires the `delete_nodes` method to be implemented\nby the vector store underlying the vector index. At time of writing (May 2024),\nChroma, Qdrant and SimpleVectorStore all support delete_nodes."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union",
            "ChatMessage",
            "MessageRole",
            "Field",
            "field_validator",
            "EmbedType",
            "BaseMemory",
            "TextNode",
            "BasePydanticVectorStore",
            "VectorStoreIndex",
            "VectorStoreIndex"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/memory/simple_composable_memory.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "primary_memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "secondary_memory_sources",
                        "default": null
                    }
                ],
                "docstring": "Create a simple composable memory from an LLM."
            },
            {
                "name": "_format_secondary_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "secondary_chat_histories",
                        "default": null
                    }
                ],
                "docstring": "Formats retrieved historical messages into a single string."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "_compose_message_histories",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all chat history.\n\nUses primary memory get_all only."
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Put chat history."
            },
            {
                "name": "set",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set chat history."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset chat history."
            }
        ],
        "classes": [
            {
                "name": "SimpleComposableMemory",
                "docstring": "A simple composition of potentially several memory sources.\n\nThis composable memory considers one of the memory sources as the main\none and the others as secondary. The secondary memory sources get added to\nthe chat history only in either the system prompt or to the first user\nmessage within the chat history.\n\nArgs:\n    primary_memory: (BaseMemory) The main memory buffer for agent.\n    secondary_memory_sources: (List(BaseMemory)) Secondary memory sources.\n        Retrieved messages from these sources get added to the system prompt message."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "ChatMessage",
            "MessageRole",
            "Field",
            "SerializeAsAny",
            "BaseMemory",
            "ChatMemoryBuffer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/memory/chat_summary_memory_buffer.py": {
        "functions": [
            {
                "name": "serialize_courses_in_order",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_store",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "validate_memory",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "values",
                        "default": null
                    }
                ],
                "docstring": "Validate the memory."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_store",
                        "default": "Name(id='DEFAULT_CHAT_STORE_KEY', ctx=Load())"
                    },
                    {
                        "name": "chat_store_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "token_limit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summarize_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "count_initial_tokens",
                        "default": null
                    }
                ],
                "docstring": "Create a chat memory buffer from an LLM\nand an initial list of chat history messages."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "to_string",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert memory to string."
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert memory to dict."
            },
            {
                "name": "from_string",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "json_str",
                        "default": null
                    }
                ],
                "docstring": "Create a chat memory buffer from a string."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "initial_token_count",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all chat history."
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Put chat history."
            },
            {
                "name": "set",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set chat history."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset chat history."
            },
            {
                "name": "get_token_count",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Returns the token count of the memory buffer (excluding the last assistant response)."
            },
            {
                "name": "_token_count_for_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Get token count for list of messages."
            },
            {
                "name": "_split_messages_summary_or_full_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": "Determine which messages will be included as full text,\nand which will have to be summarized by the llm."
            },
            {
                "name": "_summarize_oldest_chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_history_to_be_summarized",
                        "default": null
                    }
                ],
                "docstring": "Use the llm to summarize the messages that do not fit into the\nbuffer."
            },
            {
                "name": "_get_prompt_to_summarize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_history_to_be_summarized",
                        "default": null
                    }
                ],
                "docstring": "Ask the LLM to summarize the chat history so far."
            },
            {
                "name": "_handle_assistant_and_tool_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_history_full_text",
                        "default": null
                    },
                    {
                        "name": "chat_history_to_be_summarized",
                        "default": null
                    }
                ],
                "docstring": "To avoid breaking API's, we need to ensure the following.\n\n- the first message cannot be ASSISTANT\n- ASSISTANT/TOOL should be considered in pairs\nTherefore, we switch messages to summarized list until the first message is\nnot an ASSISTANT or TOOL message."
            }
        ],
        "classes": [
            {
                "name": "ChatSummaryMemoryBuffer",
                "docstring": "Buffer for storing chat history that uses the full text for the latest\n{token_limit}.\n\nAll older messages are iteratively summarized using the {llm} provided, with\nthe max number of tokens defined by the {llm}.\n\nUser can specify whether initial tokens (usually a system prompt)\nshould be counted as part of the {token_limit}\nusing the parameter {count_initial_tokens}.\n\nThis buffer is useful to retain the most important information from a\nlong chat history, while limiting the token count and latency\nof each request to the LLM."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Tuple",
            "Optional",
            "ChatMessage",
            "MessageRole",
            "Field",
            "PrivateAttr",
            "model_validator",
            "field_serializer",
            "SerializeAsAny",
            "LLM",
            "DEFAULT_CHAT_STORE_KEY",
            "BaseMemory",
            "BaseChatStore",
            "SimpleChatStore",
            "get_tokenizer",
            "load_chat_store"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/memory/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChatMemoryBuffer",
            "ChatSummaryMemoryBuffer",
            "BaseMemory",
            "VectorMemory",
            "SimpleComposableMemory"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/memory/types.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Create a chat memory from defaults."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all chat history."
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Put chat history."
            },
            {
                "name": "put_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Put chat history."
            },
            {
                "name": "set",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set chat history."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset chat history."
            },
            {
                "name": "serialize_courses_in_order",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_store",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Create a chat memory from defaults."
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all chat history."
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Put chat history."
            },
            {
                "name": "set",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set chat history."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset chat history."
            }
        ],
        "classes": [
            {
                "name": "BaseMemory",
                "docstring": "Base class for all memory types.\n\nNOTE: The interface for memory is not yet finalized and is subject to change."
            },
            {
                "name": "BaseChatStoreMemory",
                "docstring": "Base class for any .\n\nNOTE: The interface for memory is not yet finalized and is subject to change."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "List",
            "Optional",
            "ChatMessage",
            "LLM",
            "BaseComponent",
            "BaseChatStore",
            "SimpleChatStore",
            "Field",
            "field_serializer",
            "SerializeAsAny"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/memory/chat_memory_buffer.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "validate_memory",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "values",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_store",
                        "default": "Name(id='DEFAULT_CHAT_STORE_KEY', ctx=Load())"
                    },
                    {
                        "name": "chat_store_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "token_limit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer_fn",
                        "default": null
                    }
                ],
                "docstring": "Create a chat memory buffer from an LLM."
            },
            {
                "name": "to_string",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert memory to string."
            },
            {
                "name": "from_string",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "json_str",
                        "default": null
                    }
                ],
                "docstring": "Create a chat memory buffer from a string."
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert memory to dict."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "initial_token_count",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "_token_count_for_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ChatMemoryBuffer",
                "docstring": "Simple buffer for storing chat history."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "ChatMessage",
            "MessageRole",
            "Field",
            "model_validator",
            "LLM",
            "DEFAULT_CHAT_STORE_KEY",
            "BaseChatStoreMemory",
            "BaseChatStore",
            "SimpleChatStore",
            "get_tokenizer",
            "load_chat_store"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/playground/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DEFAULT_INDEX_CLASSES",
            "DEFAULT_MODES",
            "Playground"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/playground/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_MODES', ctx=Load())"
                    },
                    {
                        "name": "indices",
                        "default": null
                    },
                    {
                        "name": "retriever_modes",
                        "default": null
                    }
                ],
                "docstring": "Initialize with indices to experiment with.\n\nArgs:\n    indices: A list of BaseIndex's to experiment with\n    retriever_modes: A list of retriever_modes that specify which nodes are\n        chosen from the index when a query is made. A full list of\n        retriever_modes available to each index can be found here:\n        https://docs.llamaindex.ai/en/stable/module_guides/querying/retriever/retriever_modes.html"
            },
            {
                "name": "from_docs",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_INDEX_CLASSES', ctx=Load())"
                    },
                    {
                        "name": "documents",
                        "default": "Name(id='DEFAULT_MODES', ctx=Load())"
                    },
                    {
                        "name": "index_classes",
                        "default": null
                    },
                    {
                        "name": "retriever_modes",
                        "default": null
                    }
                ],
                "docstring": "Initialize with Documents using the default list of indices.\n\nArgs:\n    documents: A List of Documents to experiment with."
            },
            {
                "name": "_validate_indices",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "indices",
                        "default": null
                    }
                ],
                "docstring": "Validate a list of indices."
            },
            {
                "name": "indices",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get Playground's indices."
            },
            {
                "name": "indices",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "indices",
                        "default": null
                    }
                ],
                "docstring": "Set Playground's indices."
            },
            {
                "name": "_validate_modes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retriever_modes",
                        "default": null
                    }
                ],
                "docstring": "Validate a list of retriever_modes."
            },
            {
                "name": "retriever_modes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get Playground's indices."
            },
            {
                "name": "retriever_modes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retriever_modes",
                        "default": null
                    }
                ],
                "docstring": "Set Playground's indices."
            },
            {
                "name": "compare",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "query_text",
                        "default": null
                    },
                    {
                        "name": "to_pandas",
                        "default": null
                    }
                ],
                "docstring": "Compare index outputs on an input query.\n\nArgs:\n    query_text (str): Query to run all indices on.\n    to_pandas (Optional[bool]): Return results in a pandas dataframe.\n        True by default.\n\nReturns:\n    The output of each index along with other data, such as the time it took to\n    compute. Results are stored in a Pandas Dataframe or a list of Dicts."
            }
        ],
        "classes": [
            {
                "name": "Playground",
                "docstring": "Experiment with indices, models, embeddings, retriever_modes, and more."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "time",
            "Any",
            "Dict",
            "List",
            "Type",
            "CallbackManager",
            "TokenCountingHandler",
            "BaseIndex",
            "ListRetrieverMode",
            "SummaryIndex",
            "TreeIndex",
            "TreeRetrieverMode",
            "VectorStoreIndex",
            "Document",
            "get_color_mapping",
            "print_text",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/token_counting.py": {
        "functions": [
            {
                "name": "get_tokens_from_response",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Get the token counts from a raw response."
            },
            {
                "name": "get_llm_token_counts",
                "parameters": [
                    {
                        "name": "token_counter",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__post_init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_starts_to_ignore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_ends_to_ignore",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "logger",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "start_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "end_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_event_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "event_id",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_event_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": "Count the LLM or Embedding tokens as needed."
            },
            {
                "name": "total_llm_token_count",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the current total LLM token count."
            },
            {
                "name": "prompt_llm_token_count",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the current total LLM prompt token count."
            },
            {
                "name": "completion_llm_token_count",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the current total LLM completion token count."
            },
            {
                "name": "total_embedding_token_count",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the current total Embedding token count."
            },
            {
                "name": "reset_counts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset the token counts."
            }
        ],
        "classes": [
            {
                "name": "TokenCountingEvent",
                "docstring": null
            },
            {
                "name": "TokenCountingHandler",
                "docstring": "Callback handler for counting tokens in LLM and Embedding events.\n\nArgs:\n    tokenizer:\n        Tokenizer to use. Defaults to the global tokenizer\n        (see llama_index.core.utils.globals_helper).\n    event_starts_to_ignore: List of event types to ignore at the start of a trace.\n    event_ends_to_ignore: List of event types to ignore at the end of a trace."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "TYPE_CHECKING",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "cast",
            "PythonicallyPrintingBaseHandler",
            "CBEventType",
            "EventPayload",
            "TokenCounter",
            "get_tokenizer",
            "logging",
            "ChatResponse",
            "CompletionResponse",
            "ChatMessage"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/simple_llm_handler.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "logger",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "start_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "end_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_print_llm_event",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "payload",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_event_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "event_id",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_event_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": "Count the LLM or Embedding tokens as needed."
            }
        ],
        "classes": [
            {
                "name": "SimpleLLMHandler",
                "docstring": "Callback handler for printing llms inputs/outputs."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "cast",
            "PythonicallyPrintingBaseHandler",
            "CBEventType",
            "EventPayload",
            "ChatMessage"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "CallbackManager",
            "LlamaDebugHandler",
            "CBEvent",
            "CBEventType",
            "EventPayload",
            "TokenCountingHandler",
            "PythonicallyPrintingBaseHandler",
            "trace_method"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/utils.py": {
        "functions": [
            {
                "name": "trace_method",
                "parameters": [
                    {
                        "name": "trace_id",
                        "default": "Constant(value='callback_manager')"
                    },
                    {
                        "name": "callback_manager_attr",
                        "default": null
                    }
                ],
                "docstring": "Decorator to trace a method.\n\nExample:\n    @trace_method(\"my_trace_id\")\n    def my_method(self):\n        pass\n\nAssumes that the self instance has a CallbackManager instance in an attribute\nnamed `callback_manager`.\nThis can be overridden by passing in a `callback_manager_attr` keyword argument."
            },
            {
                "name": "decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "functools",
            "logging",
            "Any",
            "Callable",
            "cast",
            "CallbackManager"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/global_handlers.py": {
        "functions": [
            {
                "name": "set_global_handler",
                "parameters": [
                    {
                        "name": "eval_mode",
                        "default": null
                    }
                ],
                "docstring": "Set global eval handlers."
            },
            {
                "name": "create_global_handler",
                "parameters": [
                    {
                        "name": "eval_mode",
                        "default": null
                    }
                ],
                "docstring": "Get global eval handler."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "BaseCallbackHandler",
            "SimpleLLMHandler",
            "llama_index.core",
            "WandbCallbackHandler",
            "OpenInferenceCallbackHandler",
            "arize_phoenix_callback_handler",
            "honeyhive_callback_handler",
            "PromptLayerHandler",
            "deepeval_callback_handler",
            "argilla_callback_handler",
            "langfuse_callback_handler",
            "AgentOpsHandler",
            "literalai_callback_handler",
            "opik_callback_handler"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/base_handler.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "event_starts_to_ignore",
                        "default": null
                    },
                    {
                        "name": "event_ends_to_ignore",
                        "default": null
                    }
                ],
                "docstring": "Initialize the base callback handler."
            },
            {
                "name": "on_event_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "event_id",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    }
                ],
                "docstring": "Run when an event starts and return id of event."
            },
            {
                "name": "on_event_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": "Run when an event ends."
            },
            {
                "name": "start_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": null
                    }
                ],
                "docstring": "Run when an overall trace is launched."
            },
            {
                "name": "end_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_map",
                        "default": null
                    }
                ],
                "docstring": "Run when an overall trace is exited."
            }
        ],
        "classes": [
            {
                "name": "BaseCallbackHandler",
                "docstring": "Base callback handler that can be used to track event starts and ends."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "ABC",
            "abstractmethod",
            "ContextVar",
            "Any",
            "Dict",
            "List",
            "Optional",
            "BASE_TRACE_EVENT",
            "CBEventType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/pythonically_printing_base_handler.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_starts_to_ignore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_ends_to_ignore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "logger",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_print",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "print_str",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PythonicallyPrintingBaseHandler",
                "docstring": "Callback handler that prints logs in a Pythonic way. That is, not using `print` at all; use the logger instead.\nSee https://stackoverflow.com/a/6918596/1147061 for why you should prefer using a logger over `print`.\n\nThis class is meant to be subclassed, not used directly.\n\nUsing this class, your LlamaIndex Callback Handlers can now make use of vanilla Python logging handlers now.\nOne popular choice is https://rich.readthedocs.io/en/stable/logging.html#logging-handler."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "List",
            "Optional",
            "BaseCallbackHandler",
            "CBEventType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/llama_debug.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_starts_to_ignore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_ends_to_ignore",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "print_trace_on_end",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "logger",
                        "default": null
                    }
                ],
                "docstring": "Initialize the llama debug handler."
            },
            {
                "name": "on_event_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "event_id",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    }
                ],
                "docstring": "Store event start data by event type.\n\nArgs:\n    event_type (CBEventType): event type to store.\n    payload (Optional[Dict[str, Any]]): payload to store.\n    event_id (str): event id to store.\n    parent_id (str): parent event id."
            },
            {
                "name": "on_event_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": "Store event end data by event type.\n\nArgs:\n    event_type (CBEventType): event type to store.\n    payload (Optional[Dict[str, Any]]): payload to store.\n    event_id (str): event id to store."
            },
            {
                "name": "get_events",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": null
                    }
                ],
                "docstring": "Get all events for a specific event type."
            },
            {
                "name": "_get_event_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "events",
                        "default": null
                    }
                ],
                "docstring": "Helper function to pair events according to their ID."
            },
            {
                "name": "_get_time_stats_from_event_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "event_pairs",
                        "default": null
                    }
                ],
                "docstring": "Calculate time-based stats for a set of event pairs."
            },
            {
                "name": "get_event_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": null
                    }
                ],
                "docstring": "Pair events by ID, either all events or a specific type."
            },
            {
                "name": "get_llm_inputs_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the exact LLM inputs and outputs."
            },
            {
                "name": "get_event_time_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "flush_event_logs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear all events from memory."
            },
            {
                "name": "start_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": null
                    }
                ],
                "docstring": "Launch a trace."
            },
            {
                "name": "end_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_map",
                        "default": null
                    }
                ],
                "docstring": "Shutdown the current trace."
            },
            {
                "name": "_print_trace_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "cur_event_id",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Recursively print trace map to terminal for debugging."
            },
            {
                "name": "print_trace_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Print simple trace map to terminal for debugging of the most recent trace."
            },
            {
                "name": "event_pairs_by_type",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "events_pairs_by_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "sequential_events",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LlamaDebugHandler",
                "docstring": "Callback handler that keeps track of debug info.\n\nNOTE: this is a beta feature. The usage within our codebase, and the interface\nmay change.\n\nThis handler simply keeps track of event starts/ends, separated by event types.\nYou can use this callback handler to keep track of and debug events.\n\nArgs:\n    event_starts_to_ignore (Optional[List[CBEventType]]): list of event types to\n        ignore when tracking event starts.\n    event_ends_to_ignore (Optional[List[CBEventType]]): list of event types to\n        ignore when tracking event ends."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "defaultdict",
            "datetime",
            "Any",
            "Dict",
            "List",
            "Optional",
            "logging",
            "PythonicallyPrintingBaseHandler",
            "BASE_TRACE_EVENT",
            "TIMESTAMP_FORMAT",
            "CBEvent",
            "CBEventType",
            "EventStats"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "handlers",
                        "default": null
                    }
                ],
                "docstring": "Initialize the manager with a list of handlers."
            },
            {
                "name": "on_event_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "payload",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_id",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    }
                ],
                "docstring": "Run handlers when an event starts and return id of event."
            },
            {
                "name": "on_event_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": "Run handlers when an event ends."
            },
            {
                "name": "add_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": "Add a handler to the callback manager."
            },
            {
                "name": "remove_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": "Remove a handler from the callback manager."
            },
            {
                "name": "set_handlers",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handlers",
                        "default": null
                    }
                ],
                "docstring": "Set handlers as the only handlers on the callback manager."
            },
            {
                "name": "event",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "event_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "payload",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": "Context manager for lanching and shutdown of events.\n\nHandles sending on_evnt_start and on_event_end to handlers for specified event.\n\nUsage:\n    with callback_manager.event(CBEventType.QUERY, payload={key, val}) as event:\n        ...\n        event.on_end(payload={key, val})  # optional"
            },
            {
                "name": "as_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "trace_id",
                        "default": null
                    }
                ],
                "docstring": "Context manager tracer for lanching and shutdown of traces."
            },
            {
                "name": "start_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": null
                    }
                ],
                "docstring": "Run when an overall trace is launched."
            },
            {
                "name": "end_trace",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "trace_map",
                        "default": null
                    }
                ],
                "docstring": "Run when an overall trace is exited."
            },
            {
                "name": "_reset_trace_events",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Helper function to reset the current trace."
            },
            {
                "name": "trace_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__get_pydantic_core_schema__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "source",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__get_pydantic_json_schema__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "core_schema",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "event_type",
                        "default": null
                    },
                    {
                        "name": "event_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "payload",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "payload",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CallbackManager",
                "docstring": "Callback manager that handles callbacks for events within LlamaIndex.\n\nThe callback manager provides a way to call handlers on event starts/ends.\n\nAdditionally, the callback manager traces the current stack of events.\nIt does this by using a few key attributes.\n- trace_stack - The current stack of events that have not ended yet.\n                When an event ends, it's removed from the stack.\n                Since this is a contextvar, it is unique to each\n                thread/task.\n- trace_map - A mapping of event ids to their children events.\n              On the start of events, the bottom of the trace stack\n              is used as the current parent event for the trace map.\n- trace_id - A simple name for the current trace, usually denoting the\n             entrypoint (query, index_construction, insert, etc.)\n\nArgs:\n    handlers (List[BaseCallbackHandler]): list of handlers to use.\n\nUsage:\n    with callback_manager.event(CBEventType.QUERY) as event:\n        event.on_start(payload={key, val})\n        ...\n        event.on_end(payload={key, val})"
            },
            {
                "name": "EventContext",
                "docstring": "Simple wrapper to call callbacks on event starts and ends\nwith an event type and id."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "uuid",
            "ABC",
            "defaultdict",
            "contextmanager",
            "ContextVar",
            "Any",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "cast",
            "Type",
            "BaseCallbackHandler",
            "BASE_TRACE_EVENT",
            "LEAF_EVENTS",
            "CBEventType",
            "EventPayload",
            "GetCoreSchemaHandler",
            "GetJsonSchemaHandler",
            "CoreSchema",
            "core_schema",
            "global_handler",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/callbacks/schema.py": {
        "functions": [
            {
                "name": "__post_init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init time and id if needed."
            }
        ],
        "classes": [
            {
                "name": "CBEventType",
                "docstring": "Callback manager event types.\n\nAttributes:\n    CHUNKING: Logs for the before and after of text splitting.\n    NODE_PARSING: Logs for the documents and the nodes that they are parsed into.\n    EMBEDDING: Logs for the number of texts embedded.\n    LLM: Logs for the template and response of LLM calls.\n    QUERY: Keeps track of the start and end of each query.\n    RETRIEVE: Logs for the nodes retrieved for a query.\n    SYNTHESIZE: Logs for the result for synthesize calls.\n    TREE: Logs for the summary and level of summaries generated.\n    SUB_QUESTION: Logs for a generated sub question and answer."
            },
            {
                "name": "EventPayload",
                "docstring": null
            },
            {
                "name": "CBEvent",
                "docstring": "Generic class to store event information."
            },
            {
                "name": "EventStats",
                "docstring": "Time-based Statistics for events."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "dataclass",
            "datetime",
            "Enum",
            "Any",
            "Dict",
            "Optional"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/service_context_elements/llama_logger.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset logs."
            },
            {
                "name": "set_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Set metadata."
            },
            {
                "name": "unset_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "metadata_keys",
                        "default": null
                    }
                ],
                "docstring": "Unset metadata."
            },
            {
                "name": "get_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get metadata."
            },
            {
                "name": "add_log",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "log",
                        "default": null
                    }
                ],
                "docstring": "Add log."
            },
            {
                "name": "get_logs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get logs."
            }
        ],
        "classes": [
            {
                "name": "LlamaLogger",
                "docstring": "Logger class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Set"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/service_context_elements/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/service_context_elements/llm_predictor.py": {
        "functions": [
            {
                "name": "model_dump",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Keep for backwards compatibility."
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "llm",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get LLM."
            },
            {
                "name": "callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get callback manager."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get LLM metadata."
            },
            {
                "name": "predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Predict the answer to a query."
            },
            {
                "name": "stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Stream the answer to a query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            }
        ],
        "classes": [
            {
                "name": "BaseLLMPredictor",
                "docstring": "Base LLM Predictor."
            },
            {
                "name": "LLMPredictor",
                "docstring": "LLM predictor class.\n\nNOTE: Deprecated. Use any LLM class directly."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "ABC",
            "abstractmethod",
            "Any",
            "Dict",
            "LLMMetadata",
            "CallbackManager",
            "DispatcherSpanMixin",
            "LLM",
            "BasePromptTemplate",
            "BaseComponent",
            "TokenAsyncGen",
            "TokenGen"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/bridge/pydantic_settings.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "pydantic_settings",
            "BaseSettings",
            "SettingsConfigDict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/bridge/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/bridge/pydantic.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "pydantic",
            "AnyUrl",
            "BaseModel",
            "BeforeValidator",
            "ConfigDict",
            "Field",
            "FilePath",
            "GetCoreSchemaHandler",
            "GetJsonSchemaHandler",
            "PlainSerializer",
            "PrivateAttr",
            "Secret",
            "SecretStr",
            "SerializationInfo",
            "SerializeAsAny",
            "SerializerFunctionWrapHandler",
            "StrictFloat",
            "StrictInt",
            "StrictStr",
            "TypeAdapter",
            "ValidationError",
            "ValidationInfo",
            "WithJsonSchema",
            "WrapSerializer",
            "create_model",
            "field_serializer",
            "field_validator",
            "model_serializer",
            "model_validator",
            "FieldInfo",
            "JsonSchemaValue"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/bridge/pydantic_core.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "pydantic_core",
            "CoreSchema",
            "core_schema"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/bridge/langchain.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "langchain",
            "AgentExecutor",
            "AgentType",
            "initialize_agent",
            "BaseToolkit",
            "BaseLanguageModel",
            "BaseCallbackHandler",
            "BaseCallbackManager",
            "ConditionalPromptSelector",
            "is_chat_model",
            "BaseChatModel",
            "Document",
            "ConversationBufferMemory",
            "BaseChatMemory",
            "ResponseSchema",
            "PromptTemplate",
            "AIMessagePromptTemplate",
            "BaseMessagePromptTemplate",
            "ChatPromptTemplate",
            "HumanMessagePromptTemplate",
            "SystemMessagePromptTemplate",
            "AIMessage",
            "BaseMemory",
            "BaseMessage",
            "BaseOutputParser",
            "ChatGeneration",
            "ChatMessage",
            "FunctionMessage",
            "HumanMessage",
            "LLMResult",
            "SystemMessage",
            "Embeddings",
            "BasePromptTemplate",
            "RecursiveCharacterTextSplitter",
            "TextSplitter",
            "BaseTool",
            "StructuredTool",
            "Tool",
            "ChatMessageHistory",
            "ChatAnyscale",
            "ChatOpenAI",
            "ChatFireworks",
            "HuggingFaceBgeEmbeddings",
            "HuggingFaceEmbeddings",
            "AI21",
            "BaseLLM",
            "Cohere",
            "FakeListLLM",
            "OpenAI"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LLMRerank",
            "MetadataReplacementPostProcessor",
            "AutoPrevNextNodePostprocessor",
            "KeywordNodePostprocessor",
            "LongContextReorder",
            "PrevNextNodePostprocessor",
            "SimilarityPostprocessor",
            "EmbeddingRecencyPostprocessor",
            "FixedRecencyPostprocessor",
            "TimeWeightedPostprocessor",
            "SentenceEmbeddingOptimizer",
            "NERPIINodePostprocessor",
            "PIINodePostprocessor",
            "SentenceTransformerRerank"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/types.py": {
        "functions": [
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "BaseNodePostprocessor",
                "docstring": null
            },
            {
                "name": "PostprocessorComponent",
                "docstring": "Postprocessor component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Field",
            "SerializeAsAny",
            "ConfigDict",
            "CallbackManager",
            "DispatcherSpanMixin",
            "PromptDictType",
            "PromptMixinType",
            "BaseComponent",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/node_recency.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            }
        ],
        "classes": [
            {
                "name": "FixedRecencyPostprocessor",
                "docstring": "Fixed Recency post-processor.\n\nThis post-processor does the following steps orders nodes by date.\n\nAssumes the date_key corresponds to a date field in the metadata."
            },
            {
                "name": "EmbeddingRecencyPostprocessor",
                "docstring": "Embedding Recency post-processor."
            },
            {
                "name": "TimeWeightedPostprocessor",
                "docstring": "Time-weighted post-processor.\n\nReranks a set of nodes based on their recency."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "datetime",
            "List",
            "Optional",
            "Set",
            "numpy",
            "BaseEmbedding",
            "Field",
            "SerializeAsAny",
            "BaseNodePostprocessor",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "pandas",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/rankGPT_rerank.py": {
        "functions": [
            {
                "name": "get_default_llm",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "top_n",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "rankgpt_rerank_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_llm_result_to_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "permutation",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "items",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prefix_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "num",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_post_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "num",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "create_permutation_instruction",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "item",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "run_llm",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_clean_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_remove_duplicate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_receive_permutation",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "item",
                        "default": null
                    },
                    {
                        "name": "permutation",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RankGPTRerank",
                "docstring": "RankGPT-based reranker."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Field",
            "SerializeAsAny",
            "LLM",
            "ChatMessage",
            "ChatResponse",
            "BaseNodePostprocessor",
            "BasePromptTemplate",
            "RANKGPT_RERANK_PROMPT",
            "PromptDictType",
            "NodeWithScore",
            "QueryBundle",
            "print_text",
            "OpenAI"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/optimizer.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "percentile_cutoff",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "threshold_cutoff",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_before",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_after",
                        "default": null
                    }
                ],
                "docstring": "Optimizer class that is passed into BaseGPTIndexQuery.\n\nShould be set like this:\n\n.. code-block:: python\nfrom llama_index.core.optimization.optimizer import Optimizer\noptimizer = SentenceEmbeddingOptimizer(\n                percentile_cutoff=0.5\n                this means that the top 50% of sentences will be used.\n                Alternatively, you can set the cutoff using a threshold\n                on the similarity score. In this case only sentences with a\n                similarity score higher than the threshold will be used.\n                threshold_cutoff=0.7\n                these cutoffs can also be used together.\n            )\n\nquery_engine = index.as_query_engine(\n    optimizer=optimizer\n)\nresponse = query_engine.query(\"<query_str>\")"
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Optimize a node text given the query by shortening the node text."
            }
        ],
        "classes": [
            {
                "name": "SentenceEmbeddingOptimizer",
                "docstring": "Optimization of a text chunk given the query by shortening the input text."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Callable",
            "List",
            "Optional",
            "BaseEmbedding",
            "Field",
            "PrivateAttr",
            "get_top_k_embeddings",
            "BaseNodePostprocessor",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "nltk",
            "OpenAIEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/node.py": {
        "functions": [
            {
                "name": "get_forward_nodes",
                "parameters": [
                    {
                        "name": "node_with_score",
                        "default": null
                    },
                    {
                        "name": "num_nodes",
                        "default": null
                    },
                    {
                        "name": "docstore",
                        "default": null
                    }
                ],
                "docstring": "Get forward nodes."
            },
            {
                "name": "get_backward_nodes",
                "parameters": [
                    {
                        "name": "node_with_score",
                        "default": null
                    },
                    {
                        "name": "num_nodes",
                        "default": null
                    },
                    {
                        "name": "docstore",
                        "default": null
                    }
                ],
                "docstring": "Get backward nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "_validate_mode",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "v",
                        "default": null
                    }
                ],
                "docstring": "Validate mode."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_prediction",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "raw_pred",
                        "default": null
                    }
                ],
                "docstring": "Parse prediction."
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            }
        ],
        "classes": [
            {
                "name": "KeywordNodePostprocessor",
                "docstring": "Keyword-based Node processor."
            },
            {
                "name": "SimilarityPostprocessor",
                "docstring": "Similarity-based Node processor."
            },
            {
                "name": "PrevNextNodePostprocessor",
                "docstring": "Previous/Next Node post-processor.\n\nAllows users to fetch additional nodes from the document store,\nbased on the relationships of the nodes.\n\nNOTE: this is a beta feature.\n\nArgs:\n    docstore (BaseDocumentStore): The document store.\n    num_nodes (int): The number of nodes to return (default: 1)\n    mode (str): The mode of the post-processor.\n        Can be \"previous\", \"next\", or \"both."
            },
            {
                "name": "AutoPrevNextNodePostprocessor",
                "docstring": "Previous/Next Node post-processor.\n\nAllows users to fetch additional nodes from the document store,\nbased on the prev/next relationships of the nodes.\n\nNOTE: difference with PrevNextPostprocessor is that\nthis infers forward/backwards direction.\n\nNOTE: this is a beta feature.\n\nArgs:\n    docstore (BaseDocumentStore): The document store.\n    num_nodes (int): The number of nodes to return (default: 1)\n    infer_prev_next_tmpl (str): The template to use for inference.\n        Required fields are {context_str} and {query_str}."
            },
            {
                "name": "LongContextReorder",
                "docstring": "Models struggle to access significant details found\nin the center of extended contexts. A study\n(https://arxiv.org/abs/2307.03172) observed that the best\nperformance typically arises when crucial data is positioned\nat the start or conclusion of the input context. Additionally,\nas the input context lengthens, performance drops notably, even\nin models designed for long contexts.\"."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Dict",
            "List",
            "Optional",
            "cast",
            "Field",
            "field_validator",
            "SerializeAsAny",
            "ConfigDict",
            "LLM",
            "BaseNodePostprocessor",
            "PromptTemplate",
            "ResponseMode",
            "get_response_synthesizer",
            "NodeRelationship",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "BaseDocumentStore",
            "PhraseMatcher",
            "spacy"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/sbert_rerank.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "top_n",
                        "default": "Constant(value='cross-encoder/stsb-distilroberta-base')"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "device",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "keep_retrieval_score",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "trust_remote_code",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SentenceTransformerRerank",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Field",
            "PrivateAttr",
            "CBEventType",
            "EventPayload",
            "BaseNodePostprocessor",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "infer_torch_device",
            "CrossEncoder"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/metadata_replacement.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "target_metadata_key",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MetadataReplacementPostProcessor",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Field",
            "BaseNodePostprocessor",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/pii.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "mask_pii",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Mask PII in text."
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "mask_pii",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ner",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Mask PII in text."
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Postprocess nodes."
            }
        ],
        "classes": [
            {
                "name": "PIINodePostprocessor",
                "docstring": "PII Node processor.\n\nNOTE: this is a beta feature, the API might change.\n\nArgs:\n    llm (LLM): The local LLM to use for prediction."
            },
            {
                "name": "NERPIINodePostprocessor",
                "docstring": "NER PII Node processor.\n\nUses a HF transformers model."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "deepcopy",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "LLM",
            "BaseNodePostprocessor",
            "PromptTemplate",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "pipeline"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/postprocessor/llm_rerank.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "choice_select_prompt",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "choice_batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "format_node_batch_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parse_choice_select_answer_fn",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "top_n",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_postprocess_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LLMRerank",
                "docstring": "LLM-based reranker."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Callable",
            "List",
            "Optional",
            "Field",
            "PrivateAttr",
            "SerializeAsAny",
            "default_format_node_batch_fn",
            "default_parse_choice_select_answer_fn",
            "LLM",
            "BaseNodePostprocessor",
            "BasePromptTemplate",
            "DEFAULT_CHOICE_SELECT_PROMPT",
            "PromptDictType",
            "NodeWithScore",
            "QueryBundle",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/graph_stores/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "SimpleGraphStore",
            "SimplePropertyGraphStore",
            "LabelledNode",
            "Relation",
            "EntityNode",
            "ChunkNode",
            "PropertyGraphStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/graph_stores/types.py": {
        "functions": [
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return the string representation of the node."
            },
            {
                "name": "id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the node id."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return the string representation of the node."
            },
            {
                "name": "id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the node id."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return the string representation of the node."
            },
            {
                "name": "id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the node id."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return the string representation of the relation."
            },
            {
                "name": "id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the relation id."
            },
            {
                "name": "_get_relation_key",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "subj_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "obj_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "rel_id",
                        "default": null
                    }
                ],
                "docstring": "Get relation id."
            },
            {
                "name": "get_all_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all entities."
            },
            {
                "name": "get_all_relations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all relations."
            },
            {
                "name": "get_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all triplets."
            },
            {
                "name": "add_triplet",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "triplet",
                        "default": null
                    }
                ],
                "docstring": "Add a triplet."
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Add a node."
            },
            {
                "name": "add_relation",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "relation",
                        "default": null
                    }
                ],
                "docstring": "Add a relation."
            },
            {
                "name": "delete_triplet",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "triplet",
                        "default": null
                    }
                ],
                "docstring": "Delete a triplet."
            },
            {
                "name": "delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "delete_relation",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "relation",
                        "default": null
                    }
                ],
                "docstring": "Delete a relation."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    }
                ],
                "docstring": "Get triplets."
            },
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "subjs",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": "Get depth-aware rel map."
            },
            {
                "name": "upsert_triplet",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Add triplet."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Delete triplet."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the graph store to a file."
            },
            {
                "name": "get_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": "Get the schema of the graph store."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "param_map",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store with statement and parameters."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Get nodes with matching values."
            },
            {
                "name": "get_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Get triplets with matching values."
            },
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "graph_nodes",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    },
                    {
                        "name": "ignore_rels",
                        "default": null
                    }
                ],
                "docstring": "Get depth-aware rel map."
            },
            {
                "name": "get_llama_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    }
                ],
                "docstring": "Get llama-index nodes."
            },
            {
                "name": "upsert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Upsert nodes."
            },
            {
                "name": "upsert_relations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "relations",
                        "default": null
                    }
                ],
                "docstring": "Upsert relations."
            },
            {
                "name": "upsert_llama_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "llama_nodes",
                        "default": null
                    }
                ],
                "docstring": "Add llama-index nodes."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Delete matching data."
            },
            {
                "name": "delete_llama_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ref_doc_ids",
                        "default": null
                    }
                ],
                "docstring": "Delete llama-index nodes.\n\nIntended to delete any nodes in the graph store associated\nwith the given llama-index node_ids or ref_doc_ids."
            },
            {
                "name": "structured_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "param_map",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store with statement and parameters."
            },
            {
                "name": "vector_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store with a vector store query."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the graph store to a file."
            },
            {
                "name": "get_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": "Get the schema of the graph store."
            },
            {
                "name": "get_schema_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": "Get the schema of the graph store as a string."
            }
        ],
        "classes": [
            {
                "name": "LabelledNode",
                "docstring": "An entity in a graph."
            },
            {
                "name": "EntityNode",
                "docstring": "An entity in a graph."
            },
            {
                "name": "ChunkNode",
                "docstring": "A text chunk in a graph."
            },
            {
                "name": "Relation",
                "docstring": "A relation connecting two entities in a graph."
            },
            {
                "name": "LabelledPropertyGraph",
                "docstring": "In memory labelled property graph containing entities and relations."
            },
            {
                "name": "GraphStore",
                "docstring": "Abstract graph store protocol.\n\nThis protocol defines the interface for a graph store, which is responsible\nfor storing and retrieving knowledge graph data.\n\nAttributes:\n    client: Any: The client used to connect to the graph store.\n    get: Callable[[str], List[List[str]]]: Get triplets for a given subject.\n    get_rel_map: Callable[[Optional[List[str]], int], Dict[str, List[List[str]]]]:\n        Get subjects' rel map in max depth.\n    upsert_triplet: Callable[[str, str, str], None]: Upsert a triplet.\n    delete: Callable[[str, str, str], None]: Delete a triplet.\n    persist: Callable[[str, Optional[fsspec.AbstractFileSystem]], None]:\n        Persist the graph store to a file.\n    get_schema: Callable[[bool], str]: Get the schema of the graph store."
            },
            {
                "name": "PropertyGraphStore",
                "docstring": "Abstract labelled graph store protocol.\n\nThis protocol defines the interface for a graph store, which is responsible\nfor storing and retrieving knowledge graph data.\n\nAttributes:\n    client: Any: The client used to connect to the graph store.\n    get: Callable[[str], List[List[str]]]: Get triplets for a given subject.\n    get_rel_map: Callable[[Optional[List[str]], int], Dict[str, List[List[str]]]]:\n        Get subjects' rel map in max depth.\n    upsert_triplet: Callable[[str, str, str], None]: Upsert a triplet.\n    delete: Callable[[str, str, str], None]: Delete a triplet.\n    persist: Callable[[str, Optional[fsspec.AbstractFileSystem]], None]:\n        Persist the graph store to a file."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "fsspec",
            "ABC",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Set",
            "Sequence",
            "Protocol",
            "runtime_checkable",
            "BaseModel",
            "Field",
            "SerializeAsAny",
            "DEFAULT_CYPHER_TEMPALTE",
            "PromptTemplate",
            "BaseNode",
            "MetadataMode",
            "metadata_dict_to_node",
            "node_to_metadata_dict",
            "VectorStoreQuery"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/graph_stores/simple_labelled.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Get nodes."
            },
            {
                "name": "get_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Get triplets."
            },
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "graph_nodes",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    },
                    {
                        "name": "ignore_rels",
                        "default": null
                    }
                ],
                "docstring": "Get depth-aware rel map."
            },
            {
                "name": "upsert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Add nodes."
            },
            {
                "name": "upsert_relations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "relations",
                        "default": null
                    }
                ],
                "docstring": "Add relations."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Delete matching data."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the graph store to a file."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load from persist path."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load from persist dir."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Load from dict."
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to dict."
            },
            {
                "name": "get_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": "Get the schema of the graph store."
            },
            {
                "name": "structured_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "param_map",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store with statement and parameters."
            },
            {
                "name": "vector_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store with a vector store query."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "save_networkx_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='kg.html')"
                    },
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": "Display the graph store, useful for debugging."
            },
            {
                "name": "show_jupyter_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Visualizes the graph structure of the graph store.\n\nNOTE: This function requires yfiles_jupyter_graphs to be installed.\nNOTE: This method exclusively works in jupyter environments."
            }
        ],
        "classes": [
            {
                "name": "SimplePropertyGraphStore",
                "docstring": "Simple Labelled Property Graph Store.\n\nThis class implements a simple in-memory labelled property graph store.\n\nArgs:\n    graph (Optional[LabelledPropertyGraph]): Labelled property graph to initialize the store."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "fsspec",
            "json",
            "os",
            "Any",
            "List",
            "Dict",
            "Sequence",
            "Tuple",
            "Optional",
            "PropertyGraphStore",
            "ChunkNode",
            "EntityNode",
            "Triplet",
            "LabelledNode",
            "LabelledPropertyGraph",
            "Relation",
            "DEFAULT_PERSIST_DIR",
            "DEFUALT_PG_PERSIST_FNAME",
            "VectorStoreQuery",
            "networkx",
            "Network",
            "GraphWidget"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/graph_stores/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptTemplate"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/graph_stores/utils.py": {
        "functions": [
            {
                "name": "clean_string_values",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "value_sanitize",
                "parameters": [
                    {
                        "name": "d",
                        "default": null
                    }
                ],
                "docstring": "Sanitize the input dictionary or list.\n\nSanitizes the input by removing embedding-like values,\nlists with more than 128 elements, that are mostly irrelevant for\ngenerating answers in a LLM context. These properties, if left in\nresults, can occupy significant context space and detract from\nthe LLM's performance by introducing unnecessary noise and cost."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/graph_stores/simple.py": {
        "functions": [
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "subjs",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": "Get subjects' rel map in max depth."
            },
            {
                "name": "_get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "subj",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "depth",
                        "default": null
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": "Get one subect's rel map in max depth."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "data",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load from persist dir."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client.\nNot applicable for this store."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    }
                ],
                "docstring": "Get triplets."
            },
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "subjs",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": "Get depth-aware rel map."
            },
            {
                "name": "upsert_triplet",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Add triplet."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Delete triplet."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='DEFAULT_PERSIST_DIR', ctx=Load()), Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())], keywords=[])"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the SimpleGraphStore to a directory."
            },
            {
                "name": "get_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": "Get the schema of the Simple Graph store."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "param_map",
                        "default": null
                    }
                ],
                "docstring": "Query the Simple Graph store."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleGraphStore from a persist directory."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "save_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimpleGraphStoreData",
                "docstring": "Simple Graph Store Data container.\n\nArgs:\n    graph_dict (Optional[dict]): dict mapping subject to"
            },
            {
                "name": "SimpleGraphStore",
                "docstring": "Simple Graph Store.\n\nIn this graph store, triplets are stored within a simple, in-memory dictionary.\n\nArgs:\n    simple_graph_store_data_dict (Optional[dict]): data dict\n        containing the triplets. See SimpleGraphStoreData\n        for more details."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "os",
            "dataclass",
            "field",
            "Any",
            "Dict",
            "List",
            "Optional",
            "fsspec",
            "DataClassJsonMixin",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "GraphStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/multi_modal_llms/generic_utils.py": {
        "functions": [
            {
                "name": "load_image_urls",
                "parameters": [
                    {
                        "name": "image_urls",
                        "default": null
                    }
                ],
                "docstring": "Convert a list of image URLs into ImageDocument objects.\n\nArgs:\n    image_urls (List[str]): List of strings containing valid image URLs.\n\nReturns:\n    List[ImageDocument]: List of ImageDocument objects."
            },
            {
                "name": "encode_image",
                "parameters": [
                    {
                        "name": "image_path",
                        "default": null
                    }
                ],
                "docstring": "Create base64 representation of an image.\n\nArgs:\n    image_path (str): Path to the image file\n\nReturns:\n    str: Base64 encoded string of the image\n\nRaises:\n    FileNotFoundError: If the `image_path` doesn't exist.\n    IOError: If there's an error reading the file."
            },
            {
                "name": "image_documents_to_base64",
                "parameters": [
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": "Convert ImageDocument objects to base64-encoded strings.\n\nArgs:\n    image_documents (Sequence[ImageDocument]: Sequence of\n        ImageDocument objects\n\nReturns:\n    List[str]: List of base64-encoded image strings"
            },
            {
                "name": "infer_image_mimetype_from_file_path",
                "parameters": [
                    {
                        "name": "image_file_path",
                        "default": null
                    }
                ],
                "docstring": "Infer the MIME of an image file based on its file extension.\n\nCurrently only supports the following types of images:\n    * image/jpeg\n    * image/png\n    * image/gif\n    * image/webp\n\nArgs:\n    image_file_path (str): Path to the image file.\n\nReturns:\n    str: MIME type of the image: image/jpeg, image/png, image/gif, or image/webp.\n        Defaults to `image/jpeg`."
            },
            {
                "name": "infer_image_mimetype_from_base64",
                "parameters": [
                    {
                        "name": "base64_string",
                        "default": null
                    }
                ],
                "docstring": "Infer the MIME of an image from the base64 encoding.\n\nArgs:\n    base64_string (str): Base64-encoded string of the image.\n\nReturns:\n    Optional[str]: MIME type of the image: image/jpeg, image/png, image/gif, or image/webp.\n      `None` if the MIME type cannot be inferred."
            },
            {
                "name": "set_base64_and_mimetype_for_image_docs",
                "parameters": [
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": "Set the base64 and mimetype fields for the image documents.\n\nArgs:\n    image_documents (Sequence[ImageDocument]): Sequence of ImageDocument objects.\n\nReturns:\n    Sequence[ImageDocument]: ImageDocuments with base64 and detected mimetypes set."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "base64",
            "filetype",
            "logging",
            "List",
            "Optional",
            "Sequence",
            "requests",
            "ImageDocument"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/multi_modal_llms/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MultiModalLLM",
            "MultiModalLLMMetadata"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/multi_modal_llms/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Multi-Modal LLM metadata."
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": "Completion endpoint for Multi-Modal LLM."
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": "Streaming completion endpoint for Multi-Modal LLM."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Chat endpoint for Multi-Modal LLM."
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Stream chat endpoint for Multi-Modal LLM."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return query component."
            },
            {
                "name": "__init_subclass__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "The callback decorators installs events, so they must be applied before\nthe span decorators, otherwise the spans wouldn't contain the events."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "MultiModalLLMMetadata",
                "docstring": null
            },
            {
                "name": "MultiModalLLM",
                "docstring": "Multi-Modal LLM interface."
            },
            {
                "name": "BaseMultiModalComponent",
                "docstring": "Base LLM component."
            },
            {
                "name": "MultiModalCompleteComponent",
                "docstring": "Multi-modal completion component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "get_args",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "BaseModel",
            "ConfigDict",
            "Field",
            "CallbackManager",
            "DEFAULT_CONTEXT_WINDOW",
            "DEFAULT_NUM_INPUT_FILES",
            "DEFAULT_NUM_OUTPUTS",
            "DispatcherSpanMixin",
            "llm_chat_callback",
            "llm_completion_callback",
            "BaseComponent",
            "ImageDocument",
            "ImageNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/fn_node_mapping.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "from_node_fn",
                        "default": null
                    },
                    {
                        "name": "to_node_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    },
                    {
                        "name": "from_node_fn",
                        "default": null
                    },
                    {
                        "name": "to_node_fn",
                        "default": null
                    }
                ],
                "docstring": "Initialize node mapping."
            },
            {
                "name": "_add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Add object. NOTE: unused."
            },
            {
                "name": "to_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "To node."
            },
            {
                "name": "_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "From node."
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "The mapping data structure between node and object."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Persist objs."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "FnNodeMapping",
                "docstring": "Fn node mapping."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "Sequence",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "BaseObjectNodeMapping",
            "BaseNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ObjectIndex",
            "ObjectRetriever",
            "SimpleObjectNodeMapping",
            "SQLTableNodeMapping",
            "SQLTableSchema",
            "SimpleQueryToolNodeMapping",
            "SimpleToolNodeMapping"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/base_node_mapping.py": {
        "functions": [
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": "Initialize node mapping from a list of objects.\n\nOnly needs to be specified if the node mapping\nneeds to be initialized with a list of objects."
            },
            {
                "name": "validate_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Validate object."
            },
            {
                "name": "add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Add object.\n\nOnly needs to be specified if the node mapping\nneeds to be initialized with a list of objects."
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "The mapping data structure between node and object."
            },
            {
                "name": "_add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Add object.\n\nOnly needs to be specified if the node mapping\nneeds to be initialized with a list of objects."
            },
            {
                "name": "to_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "To node."
            },
            {
                "name": "to_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "From node."
            },
            {
                "name": "_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "From node."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Persist objs."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Load from serialization."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "mapping",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Persist object node mapping.\n\nNOTE: This may fail depending on whether the object types are\npickle-able."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "BaseObjectNodeMapping",
                "docstring": "Base object node mapping."
            },
            {
                "name": "SimpleObjectNodeMapping",
                "docstring": "General node mapping that works for any obj.\n\nMore specifically, any object with a meaningful string representation."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "pickle",
            "abstractmethod",
            "Any",
            "Dict",
            "Generic",
            "Optional",
            "Sequence",
            "TypeVar",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "DEFAULT_PERSIST_DIR",
            "concat_dirs"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/utils.py": {
        "functions": [
            {
                "name": "get_object_mapping",
                "parameters": [
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "from_node_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "to_node_fn",
                        "default": null
                    }
                ],
                "docstring": "Get object mapping according to object."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "BaseTool",
            "SimpleObjectNodeMapping",
            "BaseObjectNodeMapping",
            "FnNodeMapping",
            "SimpleToolNodeMapping",
            "BaseNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/tool_node_mapping.py": {
        "functions": [
            {
                "name": "convert_tool_to_node",
                "parameters": [
                    {
                        "name": "tool",
                        "default": null
                    }
                ],
                "docstring": "Function convert Tool to node."
            },
            {
                "name": "validate_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "The mapping data structure between node and object."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Persist objs."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool",
                        "default": null
                    }
                ],
                "docstring": "To node."
            },
            {
                "name": "_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "From node."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "The mapping data structure between node and object."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Persist objs."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "validate_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "To node."
            },
            {
                "name": "_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "From node."
            }
        ],
        "classes": [
            {
                "name": "BaseToolNodeMapping",
                "docstring": "Base Tool node mapping."
            },
            {
                "name": "SimpleToolNodeMapping",
                "docstring": "Simple Tool mapping.\n\nIn this setup, we assume that the tool name is unique, and\nthat the list of all tools are stored in memory."
            },
            {
                "name": "BaseQueryToolNodeMapping",
                "docstring": "Base query tool node mapping."
            },
            {
                "name": "SimpleQueryToolNodeMapping",
                "docstring": "Simple query tool mapping."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "BaseObjectNodeMapping",
            "BaseNode",
            "TextNode",
            "QueryEngineTool",
            "BaseTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": null
                    },
                    {
                        "name": "object_node_mapping",
                        "default": null
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retriever."
            },
            {
                "name": "object_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Object node mapping."
            },
            {
                "name": "node_postprocessors",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Node postprocessors."
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "index",
                        "default": null
                    },
                    {
                        "name": "object_node_mapping",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "index",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Index."
            },
            {
                "name": "object_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Object node mapping."
            },
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "object_mapping",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "from_node_fn",
                        "default": "Name(id='VectorStoreIndex', ctx=Load())"
                    },
                    {
                        "name": "to_node_fn",
                        "default": null
                    },
                    {
                        "name": "index_cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_objects_and_index",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "object_mapping",
                        "default": null
                    },
                    {
                        "name": "from_node_fn",
                        "default": null
                    },
                    {
                        "name": "to_node_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "insert_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_node_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "object_node_mapping",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ObjectRetriever",
                "docstring": "Object retriever."
            },
            {
                "name": "ObjectRetrieverComponent",
                "docstring": "Object retriever component."
            },
            {
                "name": "ObjectIndex",
                "docstring": "Object index."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "pickle",
            "warnings",
            "Any",
            "Callable",
            "Dict",
            "Generic",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "TypeVar",
            "BaseRetriever",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "BaseIndex",
            "VectorStoreIndex",
            "BaseNodePostprocessor",
            "DEFAULT_PERSIST_FNAME",
            "BaseObjectNodeMapping",
            "SimpleObjectNodeMapping",
            "BaseNode",
            "QueryBundle",
            "QueryType",
            "DEFAULT_PERSIST_DIR",
            "StorageContext",
            "get_object_mapping",
            "get_object_mapping",
            "load_index_from_storage"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/objects/table_node_mapping.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sql_database",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_objects",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "objs",
                        "default": null
                    }
                ],
                "docstring": "Initialize node mapping."
            },
            {
                "name": "_add_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "To node."
            },
            {
                "name": "_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "From node."
            },
            {
                "name": "obj_node_mapping",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "The mapping data structure between node and object."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=Ellipsis)"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": "Persist objs."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DEFAULT_PERSIST_FNAME', ctx=Load())"
                    },
                    {
                        "name": "obj_node_mapping_fname",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SQLTableSchema",
                "docstring": "Lightweight representation of a SQL table."
            },
            {
                "name": "SQLTableNodeMapping",
                "docstring": "SQL Table node mapping."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "BaseModel",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "BaseObjectNodeMapping",
            "BaseNode",
            "TextNode",
            "SQLDatabase"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "QueryPipelineAgentWorker",
            "CustomSimpleAgentWorker",
            "FnAgentWorker",
            "ReActAgent",
            "ReActChatFormatter",
            "ReActOutputParser",
            "ReActAgentWorker",
            "MultimodalReActAgentWorker",
            "AgentRunner",
            "StructuredPlannerAgent",
            "ParallelAgentRunner",
            "Task",
            "AgentChatResponse",
            "FunctionCallingAgent",
            "FunctionCallingAgentWorker"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/types.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TaskStep",
            "TaskStepOutput",
            "Task",
            "BaseAgent",
            "BaseAgentWorker"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/utils.py": {
        "functions": [
            {
                "name": "add_user_step_to_memory",
                "parameters": [
                    {
                        "name": "step",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Add user step to memory."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TaskStep",
            "ChatMessage",
            "MessageRole",
            "BaseMemory"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/text_splitter.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "*"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "langchain"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/streaming.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__deepcopy__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "memo",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_llm_new_token",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "token",
                        "default": null
                    }
                ],
                "docstring": "Run on new LLM token. Only available when streaming is enabled."
            },
            {
                "name": "on_llm_end",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "on_llm_error",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "error",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_response_gen",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=120.0)"
                    },
                    {
                        "name": "timeout",
                        "default": null
                    }
                ],
                "docstring": "Get response generator with timeout.\n\nArgs:\n    timeout (float): Maximum time in seconds to wait for the complete response.\n                    Defaults to 120 seconds."
            }
        ],
        "classes": [
            {
                "name": "StreamingGeneratorCallbackHandler",
                "docstring": "Streaming callback handler."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "time",
            "Queue",
            "Event",
            "Any",
            "Generator",
            "List",
            "Optional",
            "UUID",
            "BaseCallbackHandler",
            "LLMResult"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/memory_wrapper.py": {
        "functions": [
            {
                "name": "get_prompt_input_key",
                "parameters": [
                    {
                        "name": "inputs",
                        "default": null
                    },
                    {
                        "name": "memory_variables",
                        "default": null
                    }
                ],
                "docstring": "Get prompt input key.\n\nCopied over from langchain."
            },
            {
                "name": "memory_variables",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return memory variables."
            },
            {
                "name": "_get_prompt_input_key",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_memory_variables",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    }
                ],
                "docstring": "Return key-value pairs given the text input to the chain."
            },
            {
                "name": "save_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    },
                    {
                        "name": "outputs",
                        "default": null
                    }
                ],
                "docstring": "Save the context of this model run to memory."
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear memory contents."
            },
            {
                "name": "__repr__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return representation."
            },
            {
                "name": "memory_variables",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return memory variables."
            },
            {
                "name": "_get_prompt_input_key",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_memory_variables",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    }
                ],
                "docstring": "Return key-value pairs given the text input to the chain."
            },
            {
                "name": "save_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    },
                    {
                        "name": "outputs",
                        "default": null
                    }
                ],
                "docstring": "Save the context of this model run to memory."
            },
            {
                "name": "clear",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clear memory contents."
            },
            {
                "name": "__repr__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return representation."
            }
        ],
        "classes": [
            {
                "name": "GPTIndexMemory",
                "docstring": "Langchain memory wrapper (for LlamaIndex).\n\nArgs:\n    human_prefix (str): Prefix for human input. Defaults to \"Human\".\n    ai_prefix (str): Prefix for AI output. Defaults to \"AI\".\n    memory_key (str): Key for memory. Defaults to \"history\".\n    index (BaseIndex): LlamaIndex instance.\n    query_kwargs (Dict[str, Any]): Keyword arguments for LlamaIndex query.\n    input_key (Optional[str]): Input key. Defaults to None.\n    output_key (Optional[str]): Output key. Defaults to None."
            },
            {
                "name": "GPTIndexChatMemory",
                "docstring": "Langchain chat memory wrapper (for LlamaIndex).\n\nArgs:\n    human_prefix (str): Prefix for human input. Defaults to \"Human\".\n    ai_prefix (str): Prefix for AI output. Defaults to \"AI\".\n    memory_key (str): Key for memory. Defaults to \"history\".\n    index (BaseIndex): LlamaIndex instance.\n    query_kwargs (Dict[str, Any]): Keyword arguments for LlamaIndex query.\n    input_key (Optional[str]): Input key. Defaults to None.\n    output_key (Optional[str]): Output key. Defaults to None."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "AIMessage",
            "BaseChatMemory",
            "BaseMessage",
            "HumanMessage",
            "BaseMemory",
            "Field",
            "BaseIndex",
            "Document",
            "get_new_id"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/query.py": {
        "functions": [
            {
                "name": "get_output",
                "parameters": [
                    {
                        "name": "src_key",
                        "default": null
                    },
                    {
                        "name": "output_dict",
                        "default": null
                    }
                ],
                "docstring": "Add input to module deps inputs."
            },
            {
                "name": "add_output_to_module_inputs",
                "parameters": [
                    {
                        "name": "dest_key",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "module",
                        "default": null
                    },
                    {
                        "name": "module_inputs",
                        "default": null
                    }
                ],
                "docstring": "Add input to module deps inputs."
            },
            {
                "name": "print_debug_input",
                "parameters": [
                    {
                        "name": "module_key",
                        "default": "Constant(value=200)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "val_str_len",
                        "default": null
                    }
                ],
                "docstring": "Print debug input."
            },
            {
                "name": "print_debug_input_multi",
                "parameters": [
                    {
                        "name": "module_keys",
                        "default": "Constant(value=200)"
                    },
                    {
                        "name": "module_inputs",
                        "default": null
                    },
                    {
                        "name": "val_str_len",
                        "default": null
                    }
                ],
                "docstring": "Print debug input."
            },
            {
                "name": "clean_graph_attributes_copy",
                "parameters": [
                    {
                        "name": "graph",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_stateful_components",
                "parameters": [
                    {
                        "name": "query_component",
                        "default": null
                    }
                ],
                "docstring": "Get stateful components."
            },
            {
                "name": "update_stateful_components",
                "parameters": [
                    {
                        "name": "stateful_components",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Update stateful components."
            },
            {
                "name": "get_and_update_stateful_components",
                "parameters": [
                    {
                        "name": "query_component",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Get and update stateful components.\n\nAssign all stateful components in the query component with the state."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "module_dict",
                        "default": null
                    },
                    {
                        "name": "module_input_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chain",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "modules",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "links",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_state",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Set state."
            },
            {
                "name": "update_state",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Update state."
            },
            {
                "name": "reset_state",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset state."
            },
            {
                "name": "_init_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chain",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "modules",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "links",
                        "default": null
                    }
                ],
                "docstring": "Initialize graph."
            },
            {
                "name": "add_chain",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chain",
                        "default": null
                    }
                ],
                "docstring": "Add a chain of modules to the pipeline.\n\nThis is a special form of pipeline that is purely sequential/linear.\nThis allows a more concise way of specifying a pipeline."
            },
            {
                "name": "stateful_components",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get stateful component."
            },
            {
                "name": "add_links",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "links",
                        "default": null
                    }
                ],
                "docstring": "Add links to the pipeline."
            },
            {
                "name": "add_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "module_dict",
                        "default": null
                    }
                ],
                "docstring": "Add modules to the pipeline."
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "module_key",
                        "default": null
                    },
                    {
                        "name": "module",
                        "default": null
                    }
                ],
                "docstring": "Add a module to the pipeline."
            },
            {
                "name": "add_link",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "src",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "dest",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "src_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "dest_key",
                        "default": null
                    },
                    {
                        "name": "condition_fn",
                        "default": null
                    },
                    {
                        "name": "input_fn",
                        "default": null
                    }
                ],
                "docstring": "Add a link between two modules."
            },
            {
                "name": "get_root_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get root keys."
            },
            {
                "name": "get_leaf_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get leaf keys."
            },
            {
                "name": "_get_root_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get root keys."
            },
            {
                "name": "_get_leaf_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get leaf keys."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run the pipeline."
            },
            {
                "name": "run_with_intermediates",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run the pipeline."
            },
            {
                "name": "merge_dicts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "d1",
                        "default": null
                    },
                    {
                        "name": "d2",
                        "default": null
                    }
                ],
                "docstring": "Merge two dictionaries recursively, combining values of the same key into a list."
            },
            {
                "name": "run_multi",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "module_input_dict",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "batch",
                        "default": null
                    }
                ],
                "docstring": "Run the pipeline for multiple roots."
            },
            {
                "name": "run_multi_with_intermediates",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "module_input_dict",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Run the pipeline for multiple roots."
            },
            {
                "name": "_get_root_key_and_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get root key and kwargs.\n\nThis is for `_run`."
            },
            {
                "name": "get_input_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get input dict."
            },
            {
                "name": "_get_single_result_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "result_outputs",
                        "default": null
                    },
                    {
                        "name": "return_values_direct",
                        "default": null
                    }
                ],
                "docstring": "Get result output from a single module.\n\nIf output dict is a single key, return the value directly\nif return_values_direct is True."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run the pipeline.\n\nAssume that there is a single root module and a single output module.\n\nFor multi-input and multi-outputs, please see `run_multi`."
            },
            {
                "name": "_validate_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "module_input_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "process_component_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output_dict",
                        "default": null
                    },
                    {
                        "name": "module_key",
                        "default": null
                    },
                    {
                        "name": "run_state",
                        "default": null
                    }
                ],
                "docstring": "Process component output."
            },
            {
                "name": "get_next_module_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "run_state",
                        "default": null
                    }
                ],
                "docstring": "Determine the next module keys to run based on the current state."
            },
            {
                "name": "get_run_state",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "module_input_dict",
                        "default": null
                    }
                ],
                "docstring": "Get run state."
            },
            {
                "name": "_run_multi",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "module_input_dict",
                        "default": null
                    },
                    {
                        "name": "show_intermediates",
                        "default": null
                    }
                ],
                "docstring": "Run the pipeline for multiple roots."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "sub_query_components",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Sub query components."
            },
            {
                "name": "clean_dag",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Clean dag."
            }
        ],
        "classes": [
            {
                "name": "RunState",
                "docstring": null
            },
            {
                "name": "QueryPipeline",
                "docstring": "A query pipeline that can allow arbitrary chaining of different modules.\n\nA pipeline itself is a query component, and can be used as a module in another pipeline."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "uuid",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Set",
            "Tuple",
            "Union",
            "cast",
            "get_args",
            "networkx",
            "asyncio_run",
            "run_jobs",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "QUERY_COMPONENT_TYPE",
            "ChainableMixin",
            "InputKeys",
            "Link",
            "OutputKeys",
            "QueryComponent",
            "ComponentIntermediates",
            "print_text",
            "BaseStatefulComponent",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AgentFnComponent",
            "AgentInputComponent",
            "CustomAgentComponent",
            "QueryComponent",
            "ArgPackComponent",
            "FnComponent",
            "FunctionComponent",
            "InputComponent",
            "RouterComponent",
            "ToolRunnerComponent",
            "QueryPipeline",
            "Link",
            "ChainableMixin",
            "QueryComponent",
            "StatefulFnComponent",
            "LoopComponent",
            "CustomQueryComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/storage_context.py": {
        "functions": [
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "docstore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_stores",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "property_graph_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a StorageContext from defaults.\n\nArgs:\n    docstore (Optional[BaseDocumentStore]): document store\n    index_store (Optional[BaseIndexStore]): index store\n    vector_store (Optional[BasePydanticVectorStore]): vector store\n    graph_store (Optional[GraphStore]): graph store\n    image_store (Optional[BasePydanticVectorStore]): image store"
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Name(id='DOCSTORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "docstore_fname",
                        "default": "Name(id='INDEX_STORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "index_store_fname",
                        "default": "Name(id='VECTOR_STORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "vector_store_fname",
                        "default": "Name(id='IMAGE_STORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "image_store_fname",
                        "default": "Name(id='GRAPH_STORE_FNAME', ctx=Load())"
                    },
                    {
                        "name": "graph_store_fname",
                        "default": "Name(id='PG_FNAME', ctx=Load())"
                    },
                    {
                        "name": "pg_graph_store_fname",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the storage context.\n\nArgs:\n    persist_dir (str): directory to persist the storage context"
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "save_dict",
                        "default": null
                    }
                ],
                "docstring": "Create a StorageContext from dict."
            },
            {
                "name": "vector_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Backwrds compatibility for vector_store property."
            },
            {
                "name": "add_vector_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "vector_store",
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "default": null
                    }
                ],
                "docstring": "Add a vector store to the storage context."
            }
        ],
        "classes": [
            {
                "name": "StorageContext",
                "docstring": "Storage context.\n\nThe storage context container is a utility container for storing nodes,\nindices, and vectors. It contains the following:\n- docstore: BaseDocumentStore\n- index_store: BaseIndexStore\n- vector_store: BasePydanticVectorStore\n- graph_store: GraphStore\n- property_graph_store: PropertyGraphStore (lazily initialized)"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "dataclass",
            "Path",
            "Dict",
            "Optional",
            "Union",
            "fsspec",
            "DOC_STORE_KEY",
            "GRAPH_STORE_KEY",
            "INDEX_STORE_KEY",
            "VECTOR_STORE_KEY",
            "PG_STORE_KEY",
            "DEFAULT_PERSIST_FNAME",
            "SimpleGraphStore",
            "SimplePropertyGraphStore",
            "DEFUALT_PG_PERSIST_FNAME",
            "GraphStore",
            "PropertyGraphStore",
            "SimpleDocumentStore",
            "DEFAULT_PERSIST_FNAME",
            "BaseDocumentStore",
            "SimpleIndexStore",
            "DEFAULT_PERSIST_FNAME",
            "BaseIndexStore",
            "concat_dirs",
            "DEFAULT_PERSIST_FNAME",
            "DEFAULT_VECTOR_STORE",
            "NAMESPACE_SEP",
            "SimpleVectorStore",
            "BasePydanticVectorStore",
            "SerializeAsAny"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "StorageContext"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/dispatcher.py": {
        "functions": [
            {
                "name": "instrument_tags",
                "parameters": [
                    {
                        "name": "new_tags",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "event",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "name",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "event_handlers",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "span_handlers",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "parent_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "manager",
                        "default": "Constant(value='root')"
                    },
                    {
                        "name": "root_name",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "propagate",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parent",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "root",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add_event_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": "Add handler to set of handlers."
            },
            {
                "name": "add_span_handler",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": "Add handler to set of handlers."
            },
            {
                "name": "event",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "event",
                        "default": null
                    }
                ],
                "docstring": "Dispatch event to all registered handlers."
            },
            {
                "name": "get_dispatch_event",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Keep for backwards compatibility.\n\nIn llama-index-core v0.10.41, we removed this method and made changes to\nintegrations or packs that relied on this method. Adding back this method\nin case any integrations or apps have not been upgraded. That is, they\nstill rely on this method."
            },
            {
                "name": "span_enter",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": "Send notice to handlers that a span with id_ has started."
            },
            {
                "name": "span_drop",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "err",
                        "default": null
                    }
                ],
                "docstring": "Send notice to handlers that a span with id_ is being dropped."
            },
            {
                "name": "span_exit",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": "Send notice to handlers that a span with id_ is exiting."
            },
            {
                "name": "span",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "log_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Name to be used in logging."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "root",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add_dispatcher",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "d",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "args",
                        "default": null
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "handle_future_result",
                "parameters": [
                    {
                        "name": "future",
                        "default": null
                    },
                    {
                        "name": "span_id",
                        "default": null
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "context",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "EventDispatcher",
                "docstring": null
            },
            {
                "name": "Dispatcher",
                "docstring": "Dispatcher class.\n\nResponsible for dispatching BaseEvent (and its subclasses) as well as\nsending signals to enter/exit/drop a BaseSpan. It does so by sending\nevent and span signals to its attached BaseEventHandler as well as\nBaseSpanHandler.\n\nConcurrency:\n    - Dispatcher is async-task and thread safe in the sense that\n    spans of async coros will maintain its hieararchy or trace-trees and\n    spans which emanate from various threads will also maintain its\n    hierarchy."
            },
            {
                "name": "Manager",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "partial",
            "contextmanager",
            "Context",
            "ContextVar",
            "Token",
            "copy_context",
            "Any",
            "Callable",
            "Generator",
            "List",
            "Optional",
            "Dict",
            "Protocol",
            "inspect",
            "logging",
            "uuid",
            "deprecated",
            "BaseModel",
            "Field",
            "ConfigDict",
            "BaseEventHandler",
            "active_span_id",
            "BaseSpanHandler",
            "NullSpanHandler",
            "BaseEvent",
            "SpanDropEvent",
            "wrapt",
            "WorkflowCancelledByUser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/__init__.py": {
        "functions": [
            {
                "name": "get_dispatcher",
                "parameters": [
                    {
                        "name": "name",
                        "default": "Constant(value='root')"
                    }
                ],
                "docstring": "Module method that should be used for creating a new Dispatcher."
            },
            {
                "name": "__init_subclass__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DispatcherSpanMixin",
                "docstring": "Apply the `dispatcher.span` decorator to implementations of abstract methods, as well\nas any methods previously decorated (in any base class) that are being overridden by\na subclass. For example, if class `A` has abstract method `f`, and class `B` inherits\nfrom `A` and provides an implementation of `f`, then `B.f` will be decorated by the mixin.\nFurthermore, if `B` has a non-abstract method `g` that is decorated by `dispatcher.span`\nand new class `C` inherits from `B` and overrides `g`, then `C.g` will also be decorated\nby the mixin. Note that users can still manually apply `dispatcher.span` to the methods\nin their custom subclasses without creating duplicate spans because the `dispatcher.span`\ndecorator should be idempotent."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "inspect",
            "ABC",
            "Any",
            "List",
            "Dispatcher",
            "Manager",
            "DISPATCHER_SPAN_DECORATED_ATTR",
            "NullEventHandler",
            "NullSpanHandler"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/base_handler.py": {
        "functions": [
            {
                "name": "init",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Initialize the instrumentation handler."
            }
        ],
        "classes": [
            {
                "name": "BaseInstrumentationHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/utilities/token_counting.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_string_tokens",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "string",
                        "default": null
                    }
                ],
                "docstring": "Get the token count for a string.\n\nArgs:\n    string (str): The string to count.\n\nReturns:\n    int: The token count."
            },
            {
                "name": "estimate_tokens_in_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Estimate token count for a single message.\n\nArgs:\n    message (OpenAIMessage): The message to estimate the token count for.\n\nReturns:\n    int: The estimated token count."
            },
            {
                "name": "estimate_tokens_in_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Estimate token count for the tools.\n\nWe take here a list of tools created using the `to_openai_tool()` function (or similar).\n\nArgs:\n    tools (list[Dict[str, Any]]): The tools to estimate the token count for.\n\nReturns:\n    int: The estimated token count."
            }
        ],
        "classes": [
            {
                "name": "TokenCounter",
                "docstring": "Token counter class.\n\nAttributes:\n    model (Optional[str]): The model to use for token counting."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "ChatMessage",
            "MessageRole",
            "get_tokenizer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/utilities/gemini_utils.py": {
        "functions": [
            {
                "name": "merge_neighboring_same_role_messages",
                "parameters": [
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Sequence",
            "Dict",
            "ChatMessage",
            "MessageRole"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/utilities/aws_utils.py": {
        "functions": [
            {
                "name": "get_aws_service_client",
                "parameters": [
                    {
                        "name": "service_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "region_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "aws_access_key_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "aws_secret_access_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "aws_session_token",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "profile_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_retries",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=60.0)"
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Optional",
            "botocore",
            "boto3",
            "botocore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/utilities/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/utilities/sql_wrapper.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "schema",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ignore_tables",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "include_tables",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "sample_rows_in_table_info",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "indexes_in_table_info",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "custom_table_info",
                        "default": "Constant(value=300)"
                    },
                    {
                        "name": "view_support",
                        "default": null
                    },
                    {
                        "name": "max_string_length",
                        "default": null
                    }
                ],
                "docstring": "Create engine from database URI."
            },
            {
                "name": "engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return SQL Alchemy engine."
            },
            {
                "name": "metadata_obj",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return SQL Alchemy metadata."
            },
            {
                "name": "from_uri",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "database_uri",
                        "default": null
                    },
                    {
                        "name": "engine_args",
                        "default": null
                    }
                ],
                "docstring": "Construct a SQLAlchemy engine from URI."
            },
            {
                "name": "dialect",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return string representation of dialect to use."
            },
            {
                "name": "get_usable_table_names",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get names of tables available."
            },
            {
                "name": "get_table_columns",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "table_name",
                        "default": null
                    }
                ],
                "docstring": "Get table columns."
            },
            {
                "name": "get_single_table_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "table_name",
                        "default": null
                    }
                ],
                "docstring": "Get table info for a single table."
            },
            {
                "name": "insert_into_table",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "table_name",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Insert data into a table."
            },
            {
                "name": "truncate_word",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Truncate a string to a certain number of words, based on the max string\nlength."
            },
            {
                "name": "run_sql",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "command",
                        "default": null
                    }
                ],
                "docstring": "Execute a SQL statement and return a string representing the results.\n\nIf the statement returns rows, a string of the results is returned.\nIf the statement returns no rows, an empty string is returned."
            }
        ],
        "classes": [
            {
                "name": "SQLDatabase",
                "docstring": "SQL Database.\n\nThis class provides a wrapper around the SQLAlchemy engine to interact with a SQL\ndatabase.\nIt provides methods to execute SQL commands, insert data into tables, and retrieve\ninformation about the database schema.\nIt also supports optional features such as including or excluding specific tables,\nsampling rows for table info,\nincluding indexes in table info, and supporting views.\n\nBased on langchain SQLDatabase.\nhttps://github.com/langchain-ai/langchain/blob/e355606b1100097665207ca259de6dc548d44c78/libs/langchain/langchain/utilities/sql_database.py#L39\n\nArgs:\n    engine (Engine): The SQLAlchemy engine instance to use for database operations.\n    schema (Optional[str]): The name of the schema to use, if any.\n    metadata (Optional[MetaData]): The metadata instance to use, if any.\n    ignore_tables (Optional[List[str]]): List of table names to ignore. If set,\n        include_tables must be None.\n    include_tables (Optional[List[str]]): List of table names to include. If set,\n        ignore_tables must be None.\n    sample_rows_in_table_info (int): The number of sample rows to include in table\n        info.\n    indexes_in_table_info (bool): Whether to include indexes in table info.\n    custom_table_info (Optional[dict]): Custom table info to use.\n    view_support (bool): Whether to support views.\n    max_string_length (int): The maximum string length to use."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Iterable",
            "List",
            "Optional",
            "Tuple",
            "MetaData",
            "create_engine",
            "insert",
            "inspect",
            "text",
            "Engine",
            "OperationalError",
            "ProgrammingError"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/composability/joint_qa_summary.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Name(id='DEFAULT_SUMMARY_TEXT', ctx=Load())"
                    },
                    {
                        "name": "summary_text",
                        "default": "Name(id='DEFAULT_QA_TEXT', ctx=Load())"
                    },
                    {
                        "name": "qa_text",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "build_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Build query engine."
            }
        ],
        "classes": [
            {
                "name": "QASummaryQueryEngineBuilder",
                "docstring": "Joint QA Summary graph builder.\n\nCan build a graph that provides a unified query interface\nfor both QA and summarization tasks.\n\nNOTE: this is a beta feature. The API may change in the future.\n\nArgs:\n    docstore (BaseDocumentStore): A BaseDocumentStore to use for storing nodes.\n    summary_text (str): Text to use for the summary index.\n    qa_text (str): Text to use for the QA index.\n    node_parser (NodeParser): A NodeParser to use for parsing."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Sequence",
            "BaseEmbedding",
            "CallbackManager",
            "SummaryIndex",
            "VectorStoreIndex",
            "run_transformations",
            "LLM",
            "RouterQueryEngine",
            "Document",
            "TransformComponent",
            "Settings",
            "StorageContext",
            "QueryEngineTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/composability/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ComposableGraph",
            "QASummaryQueryEngineBuilder"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/composability/base.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ComposableGraph"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/output_parsers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChainableOutputParser",
            "LangchainOutputParser",
            "PydanticOutputParser",
            "SelectionOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/output_parsers/pydantic.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Name(id='PYDANTIC_FORMAT_TMPL', ctx=Load())"
                    },
                    {
                        "name": "excluded_schema_keys_from_format",
                        "default": null
                    },
                    {
                        "name": "pydantic_format_tmpl",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format_string",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Format string."
            },
            {
                "name": "get_format_string",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "escape_json",
                        "default": null
                    }
                ],
                "docstring": "Format string."
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Parse, validate, and correct errors programmatically."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Format a query with structured output formatting instructions."
            }
        ],
        "classes": [
            {
                "name": "PydanticOutputParser",
                "docstring": "Pydantic Output Parser.\n\nArgs:\n    output_cls (BaseModel): Pydantic output class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Any",
            "List",
            "Optional",
            "Type",
            "ChainableOutputParser",
            "extract_json_str",
            "Model"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/output_parsers/utils.py": {
        "functions": [
            {
                "name": "_marshal_llm_to_json",
                "parameters": [
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Extract a substring containing valid JSON or array from a string.\n\nArgs:\n    output: A string that may contain a valid JSON object or array surrounded by\n    extraneous characters or information.\n\nReturns:\n    A string containing a valid JSON object or array."
            },
            {
                "name": "parse_json_markdown",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse_code_markdown",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "only_last",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "extract_json_str",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract JSON string from text."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "contextlib",
            "json",
            "re",
            "Any",
            "List",
            "OutputParserException",
            "yaml"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/output_parsers/selection.py": {
        "functions": [
            {
                "name": "_escape_curly_braces",
                "parameters": [
                    {
                        "name": "input_string",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_filter_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "json_dict",
                        "default": null
                    }
                ],
                "docstring": "Filter recursively until a dictionary matches all REQUIRED_KEYS."
            },
            {
                "name": "_format_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt_template",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Answer",
                "docstring": null
            },
            {
                "name": "SelectionOutputParser",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "dataclass",
            "Any",
            "List",
            "DataClassJsonMixin",
            "OutputParserException",
            "StructuredOutput",
            "_marshal_llm_to_json",
            "BaseOutputParser",
            "yaml"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/output_parsers/langchain.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    },
                    {
                        "name": "format_key",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Parse, validate, and correct errors programmatically."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Format a query with structured output formatting instructions."
            }
        ],
        "classes": [
            {
                "name": "LangchainOutputParser",
                "docstring": "Langchain output parser."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "Optional",
            "ChainableOutputParser",
            "SafeFormatter",
            "BaseOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/output_parsers/base.py": {
        "functions": [
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get query component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "StructuredOutput",
                "docstring": "Structured output class."
            },
            {
                "name": "OutputParserException",
                "docstring": null
            },
            {
                "name": "ChainableOutputParser",
                "docstring": "Chainable output parser."
            },
            {
                "name": "OutputParserComponent",
                "docstring": "Output parser component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "Any",
            "Dict",
            "Optional",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Field",
            "ConfigDict",
            "BaseOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/data_structs/struct_type.py": {
        "functions": [],
        "classes": [
            {
                "name": "IndexStructType",
                "docstring": "Index struct type. Identifier for a \"type\" of index.\n\nAttributes:\n    TREE (\"tree\"): Tree index. See :ref:`Ref-Indices-Tree` for tree indices.\n    LIST (\"list\"): Summary index. See :ref:`Ref-Indices-List` for summary indices.\n    KEYWORD_TABLE (\"keyword_table\"): Keyword table index. See\n        :ref:`Ref-Indices-Table`\n        for keyword table indices.\n    DICT (\"dict\"): Faiss Vector Store Index. See\n        :ref:`Ref-Indices-VectorStore`\n        for more information on the faiss vector store index.\n    SIMPLE_DICT (\"simple_dict\"): Simple Vector Store Index. See\n        :ref:`Ref-Indices-VectorStore`\n        for more information on the simple vector store index.\n    WEAVIATE (\"weaviate\"): Weaviate Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Weaviate vector store index.\n    PINECONE (\"pinecone\"): Pinecone Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Pinecone vector store index.\n    DEEPLAKE (\"deeplake\"): DeepLake Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Pinecone vector store index.\n    QDRANT (\"qdrant\"): Qdrant Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Qdrant vector store index.\n    LANCEDB (\"lancedb\"): LanceDB Vector Store Index\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the LanceDB vector store index.\n    MILVUS (\"milvus\"): Milvus Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Milvus vector store index.\n    CHROMA (\"chroma\"): Chroma Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Chroma vector store index.\n    OPENSEARCH (\"opensearch\"): Opensearch Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Opensearch vector store index.\n    MYSCALE (\"myscale\"): MyScale Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the MyScale vector store index.\n    CLICKHOUSE (\"clickhouse\"): ClickHouse Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the ClickHouse vector store index.\n    EPSILLA (\"epsilla\"): Epsilla Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Epsilla vector store index.\n    CHATGPT_RETRIEVAL_PLUGIN (\"chatgpt_retrieval_plugin\"): ChatGPT\n        retrieval plugin index.\n    SQL (\"SQL\"): SQL Structured Store Index.\n        See :ref:`Ref-Indices-StructStore`\n        for more information on the SQL vector store index.\n    DASHVECTOR (\"dashvector\"): DashVector Vector Store Index.\n        See :ref:`Ref-Indices-VectorStore`\n        for more information on the Dashvecotor vector store index.\n    KG (\"kg\"): Knowledge Graph index.\n        See :ref:`Ref-Indices-Knowledge-Graph` for KG indices.\n    DOCUMENT_SUMMARY (\"document_summary\"): Document Summary Index.\n        See :ref:`Ref-Indices-Document-Summary` for Summary Indices."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/data_structs/registry.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Type",
            "KG",
            "EmptyIndexStruct",
            "IndexDict",
            "IndexGraph",
            "IndexList",
            "IndexLPG",
            "IndexStruct",
            "KeywordTable",
            "MultiModelIndexDict",
            "IndexDocumentSummary",
            "IndexStructType",
            "PandasStructTable",
            "SQLStructTable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/data_structs/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "IndexDict",
            "IndexGraph",
            "IndexList",
            "IndexLPG",
            "KeywordTable",
            "Node",
            "StructDatapoint"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/data_structs/data_structs.py": {
        "functions": [
            {
                "name": "get_summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get text summary."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get index struct type."
            },
            {
                "name": "node_id_to_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Map from node id to index."
            },
            {
                "name": "size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the size of the graph."
            },
            {
                "name": "get_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get index of node."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": null
                    },
                    {
                        "name": "children_nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert node."
            },
            {
                "name": "get_children",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "parent_node",
                        "default": null
                    }
                ],
                "docstring": "Get children nodes."
            },
            {
                "name": "insert_under_parent",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "parent_node",
                        "default": null
                    },
                    {
                        "name": "new_index",
                        "default": null
                    }
                ],
                "docstring": "Insert under parent node."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "keywords",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Add text to table."
            },
            {
                "name": "node_ids",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all node ids."
            },
            {
                "name": "keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all keywords in the table."
            },
            {
                "name": "size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the size of the table."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Add text to table, return current position in list."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "text_id",
                        "default": null
                    }
                ],
                "docstring": "Add text to table, return current position in list."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a Node."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "node_ids",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all node ids."
            },
            {
                "name": "add_to_embedding_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "triplet_str",
                        "default": null
                    },
                    {
                        "name": "embedding",
                        "default": null
                    }
                ],
                "docstring": "Add embedding to dict."
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "keywords",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Add text to table."
            },
            {
                "name": "search_node_by_keyword",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "keyword",
                        "default": null
                    }
                ],
                "docstring": "Search for nodes by keyword."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            }
        ],
        "classes": [
            {
                "name": "IndexStruct",
                "docstring": "A base data struct for a LlamaIndex."
            },
            {
                "name": "IndexGraph",
                "docstring": "A graph representing the tree-structured index."
            },
            {
                "name": "KeywordTable",
                "docstring": "A table of keywords mapping keywords to text chunks."
            },
            {
                "name": "IndexList",
                "docstring": "A list of documents."
            },
            {
                "name": "IndexLPG",
                "docstring": "An index struct for LPG index (doesn't actually store anything)."
            },
            {
                "name": "IndexDict",
                "docstring": "A simple dictionary of documents."
            },
            {
                "name": "MultiModelIndexDict",
                "docstring": "A simple dictionary of documents, but loads a MultiModelVectorStore."
            },
            {
                "name": "KG",
                "docstring": "A table of keywords mapping keywords to text chunks."
            },
            {
                "name": "EmptyIndexStruct",
                "docstring": "Empty index."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "abstractmethod",
            "dataclass",
            "field",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Set",
            "DataClassJsonMixin",
            "IndexStructType",
            "BaseNode",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/data_structs/document_summary.py": {
        "functions": [
            {
                "name": "add_summary_and_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "summary_node",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Add node and summary."
            },
            {
                "name": "summary_ids",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get summary ids."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a document and its nodes."
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            }
        ],
        "classes": [
            {
                "name": "IndexDocumentSummary",
                "docstring": "A simple struct containing a mapping from summary node_id to doc node_ids.\n\nAlso mapping vice versa."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "field",
            "Dict",
            "List",
            "IndexStruct",
            "IndexStructType",
            "BaseNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/data_structs/table.py": {
        "functions": [
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            },
            {
                "name": "get_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get type."
            }
        ],
        "classes": [
            {
                "name": "StructDatapoint",
                "docstring": "Struct outputs."
            },
            {
                "name": "BaseStructTable",
                "docstring": "Struct outputs."
            },
            {
                "name": "SQLStructTable",
                "docstring": "SQL struct outputs."
            },
            {
                "name": "PandasStructTable",
                "docstring": "Pandas struct outputs."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "field",
            "Any",
            "Dict",
            "DataClassJsonMixin",
            "IndexStruct",
            "IndexStructType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/download/pack.py": {
        "functions": [
            {
                "name": "download_module_and_reqs",
                "parameters": [
                    {
                        "name": "local_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "remote_dir_path",
                        "default": null
                    },
                    {
                        "name": "remote_source_dir_path",
                        "default": null
                    },
                    {
                        "name": "package",
                        "default": null
                    },
                    {
                        "name": "sub_module",
                        "default": null
                    },
                    {
                        "name": "refresh_cache",
                        "default": null
                    }
                ],
                "docstring": "Load module."
            },
            {
                "name": "download_llama_pack_template",
                "parameters": [
                    {
                        "name": "new_install_parent",
                        "default": "Name(id='LLAMA_PACKS_CONTENTS_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_pack_class",
                        "default": "Name(id='LLAMA_PACKS_SOURCE_FILES_GITHUB_TREE_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_pack_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llama_pack_source_files_dir_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_dir",
                        "default": "Constant(value='__init__.py')"
                    },
                    {
                        "name": "custom_path",
                        "default": null
                    },
                    {
                        "name": "base_file_name",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "track_download",
                "parameters": [
                    {
                        "name": "module_class",
                        "default": null
                    },
                    {
                        "name": "module_type",
                        "default": null
                    }
                ],
                "docstring": "Tracks number of downloads via Llamahub proxy.\n\nArgs:\n    module_class: The name of the llama module being downloaded, e.g.,`GmailOpenAIAgentPack`.\n    module_type: Can be \"loader\", \"tool\", \"llamapack\", or \"datasets\""
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "os",
            "subprocess",
            "sys",
            "util",
            "Path",
            "Any",
            "Optional",
            "Union",
            "requests",
            "ChangeDirectory",
            "get_file_content",
            "initialize_directory",
            "get_source_files_recursive"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/download/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/download/integration.py": {
        "functions": [
            {
                "name": "pip_install",
                "parameters": [
                    {
                        "name": "package",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "download_integration",
                "parameters": [
                    {
                        "name": "module_str",
                        "default": null
                    },
                    {
                        "name": "module_import_str",
                        "default": null
                    },
                    {
                        "name": "cls_name",
                        "default": null
                    }
                ],
                "docstring": "Returns an integration class by first pip installing its parent module."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "importlib",
            "subprocess",
            "sys",
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/download/dataset.py": {
        "functions": [
            {
                "name": "_resolve_dataset_file_name",
                "parameters": [
                    {
                        "name": "class_name",
                        "default": null
                    }
                ],
                "docstring": "Resolve filename based on dataset class."
            },
            {
                "name": "get_dataset_info",
                "parameters": [
                    {
                        "name": "local_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "remote_dir_path",
                        "default": "Constant(value='library.json')"
                    },
                    {
                        "name": "remote_source_dir_path",
                        "default": "Constant(value='source_files')"
                    },
                    {
                        "name": "dataset_class",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": null
                    },
                    {
                        "name": "library_path",
                        "default": null
                    },
                    {
                        "name": "source_files_path",
                        "default": null
                    },
                    {
                        "name": "disable_library_cache",
                        "default": null
                    }
                ],
                "docstring": "Get dataset info."
            },
            {
                "name": "download_dataset_and_source_files",
                "parameters": [
                    {
                        "name": "local_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "remote_lfs_dir_path",
                        "default": "Constant(value='rag_dataset.json')"
                    },
                    {
                        "name": "source_files_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "dataset_id",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "dataset_class_name",
                        "default": null
                    },
                    {
                        "name": "source_files",
                        "default": null
                    },
                    {
                        "name": "refresh_cache",
                        "default": null
                    },
                    {
                        "name": "base_file_name",
                        "default": null
                    },
                    {
                        "name": "override_path",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Download dataset and source files."
            },
            {
                "name": "download_llama_dataset",
                "parameters": [
                    {
                        "name": "dataset_class",
                        "default": "Name(id='LLAMA_DATASETS_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_url",
                        "default": "Name(id='LLAMA_DATASETS_LFS_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_lfs_url",
                        "default": "Name(id='LLAMA_DATASETS_SOURCE_FILES_GITHUB_TREE_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_source_files_tree_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_path",
                        "default": "Name(id='LLAMA_SOURCE_FILES_PATH', ctx=Load())"
                    },
                    {
                        "name": "source_files_dirpath",
                        "default": "Constant(value='llama_datasets/library.json')"
                    },
                    {
                        "name": "library_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "disable_library_cache",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "override_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Download a module from LlamaHub.\n\nCan be a loader, tool, pack, or more.\n\nArgs:\n    loader_class: The name of the llama module class you want to download,\n        such as `GmailOpenAIAgentPack`.\n    refresh_cache: If true, the local cache will be skipped and the\n        loader will be fetched directly from the remote repo.\n    custom_dir: Custom dir name to download loader into (under parent folder).\n    custom_path: Custom dirpath to download loader into.\n    library_path: File name of the library file.\n    use_gpt_index_import: If true, the loader files will use\n        llama_index as the base dependency. By default (False),\n        the loader files use llama_index as the base dependency.\n        NOTE: this is a temporary workaround while we fully migrate all usages\n        to llama_index.core.\n    is_dataset: whether or not downloading a LlamaDataset\n\nReturns:\n    A Loader, A Pack, An Agent, or A Dataset"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union",
            "tqdm",
            "get_file_content",
            "get_file_content_bytes",
            "get_source_files_list",
            "initialize_directory"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/download/utils.py": {
        "functions": [
            {
                "name": "get_file_content",
                "parameters": [
                    {
                        "name": "url",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Get the content of a file from the GitHub REST API."
            },
            {
                "name": "get_file_content_bytes",
                "parameters": [
                    {
                        "name": "url",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Get the content of a file from the GitHub REST API."
            },
            {
                "name": "get_exports",
                "parameters": [
                    {
                        "name": "raw_content",
                        "default": null
                    }
                ],
                "docstring": "Read content of a Python file and returns a list of exported class names.\n\nFor example:\n```python\nfrom .a import A\nfrom .b import B\n\n__all__ = [\"A\", \"B\"]\n```\nwill return `[\"A\", \"B\"]`.\n\nArgs:\n    - raw_content: The content of a Python file as a string.\n\nReturns:\n    A list of exported class names."
            },
            {
                "name": "rewrite_exports",
                "parameters": [
                    {
                        "name": "exports",
                        "default": null
                    },
                    {
                        "name": "dirpath",
                        "default": null
                    }
                ],
                "docstring": "Write the `__all__` variable to the `__init__.py` file in the modules dir.\n\nRemoves the line that contains `__all__` and appends a new line with the updated\n`__all__` variable.\n\nArgs:\n    - exports: A list of exported class names."
            },
            {
                "name": "initialize_directory",
                "parameters": [
                    {
                        "name": "custom_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_dir",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Initialize directory."
            },
            {
                "name": "get_source_files_list",
                "parameters": [
                    {
                        "name": "source_tree_url",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Get the list of source files to download."
            },
            {
                "name": "recursive_tree_traverse",
                "parameters": [
                    {
                        "name": "tree_urls",
                        "default": null
                    },
                    {
                        "name": "acc",
                        "default": null
                    },
                    {
                        "name": "source_tree_url",
                        "default": null
                    }
                ],
                "docstring": "Recursively traversge Github trees to get all file paths in a folder."
            },
            {
                "name": "get_source_files_recursive",
                "parameters": [
                    {
                        "name": "source_tree_url",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Get source files of a Github folder recursively."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "new_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__enter__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__exit__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "etype",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    },
                    {
                        "name": "traceback",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ChangeDirectory",
                "docstring": "Context manager for changing the current working directory."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "Path",
            "List",
            "Optional",
            "Tuple",
            "requests"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/download/module.py": {
        "functions": [
            {
                "name": "get_module_info",
                "parameters": [
                    {
                        "name": "local_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "remote_dir_path",
                        "default": "Constant(value='library.json')"
                    },
                    {
                        "name": "module_class",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": null
                    },
                    {
                        "name": "library_path",
                        "default": null
                    },
                    {
                        "name": "disable_library_cache",
                        "default": null
                    }
                ],
                "docstring": "Get module info."
            },
            {
                "name": "download_module_and_reqs",
                "parameters": [
                    {
                        "name": "local_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "remote_dir_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "module_id",
                        "default": "Constant(value='base.py')"
                    },
                    {
                        "name": "extra_files",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": null
                    },
                    {
                        "name": "use_gpt_index_import",
                        "default": null
                    },
                    {
                        "name": "base_file_name",
                        "default": null
                    },
                    {
                        "name": "override_path",
                        "default": null
                    }
                ],
                "docstring": "Load module."
            },
            {
                "name": "download_llama_module",
                "parameters": [
                    {
                        "name": "module_class",
                        "default": "Name(id='LLAMA_HUB_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_hub_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_path",
                        "default": "Constant(value='library.json')"
                    },
                    {
                        "name": "library_path",
                        "default": "Constant(value='base.py')"
                    },
                    {
                        "name": "base_file_name",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_gpt_index_import",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "disable_library_cache",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "override_path",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "skip_load",
                        "default": null
                    }
                ],
                "docstring": "Download a module from LlamaHub.\n\nCan be a loader, tool, pack, or more.\n\nArgs:\n    loader_class: The name of the llama module class you want to download,\n        such as `GmailOpenAIAgentPack`.\n    refresh_cache: If true, the local cache will be skipped and the\n        loader will be fetched directly from the remote repo.\n    custom_dir: Custom dir name to download loader into (under parent folder).\n    custom_path: Custom dirpath to download loader into.\n    library_path: File name of the library file.\n    use_gpt_index_import: If true, the loader files will use\n        llama_index as the base dependency. By default (False),\n        the loader files use llama_index as the base dependency.\n        NOTE: this is a temporary workaround while we fully migrate all usages\n        to llama_index.core.\n    is_dataset: whether or not downloading a LlamaDataset\n\nReturns:\n    A Loader, A Pack, An Agent, or A Dataset"
            },
            {
                "name": "track_download",
                "parameters": [
                    {
                        "name": "module_class",
                        "default": null
                    },
                    {
                        "name": "module_type",
                        "default": null
                    }
                ],
                "docstring": "Tracks number of downloads via Llamahub proxy.\n\nArgs:\n    module_class: The name of the llama module being downloaded, e.g.,`GmailOpenAIAgentPack`.\n    module_type: Can be \"loader\", \"tool\", \"llamapack\", or \"datasets\""
            }
        ],
        "classes": [
            {
                "name": "MODULE_TYPE",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "os",
            "subprocess",
            "sys",
            "Enum",
            "util",
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union",
            "requests",
            "get_exports",
            "get_file_content",
            "initialize_directory",
            "rewrite_exports",
            "pkg_resources",
            "DistributionNotFound"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/service.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "default",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "service",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ServiceNotFoundError",
                "docstring": "An error raised when the service manager couldn't find a certain service name."
            },
            {
                "name": "ServiceManager",
                "docstring": "An helper class to decouple how services are managed from the Workflow class.\n\nA Service is nothing more than a workflow instance attached to another workflow.\nThe service is made available to the steps of the main workflow."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "TYPE_CHECKING",
            "Optional",
            "Workflow"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/context_serializers.py": {
        "functions": [
            {
                "name": "serialize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "deserialize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "serialize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "deserialize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "serialize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Serialize while prioritizing JSON, falling back to Pickle."
            },
            {
                "name": "deserialize",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Deserialize while prioritizing Pickle, falling back to JSON."
            }
        ],
        "classes": [
            {
                "name": "BaseSerializer",
                "docstring": null
            },
            {
                "name": "JsonSerializer",
                "docstring": null
            },
            {
                "name": "JsonPickleSerializer",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "base64",
            "json",
            "pickle",
            "ABC",
            "abstractmethod",
            "Any",
            "BaseModel",
            "BaseComponent",
            "import_module_from_qualified_name",
            "get_qualified_name"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/handler.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "is_done",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "WorkflowHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "AsyncGenerator",
            "Optional",
            "Context",
            "Event",
            "StopEvent",
            "WorkflowDone"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/events.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "__init__.\n\nNOTE: fields and private_attrs are pulled from params by name."
            },
            {
                "name": "__getattr__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "__name",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__setattr__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__getitem__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__setitem__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "default",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__contains__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "values",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "items",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__len__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__iter__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "custom_model_dump",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Event",
                "docstring": "Base class for event types that mimics dict interface.\n\nPrivateAttr:\n    _data (Dict[str, Any]): Underlying Python dict.\n\nExamples:\n    Basic example usage\n\n    ```python\n    from llama_index.core.workflows.events import Event\n\n    evt = Event(a=1, b=2)\n\n    # can use dot access to get values of `a` and `b`\n    print((evt.a, evt.b))\n\n    # can also set the attrs\n    evt.a = 2\n    ```\n\n    Custom event with additional Fields/PrivateAttr\n\n    ```python\n    from llama_index.core.workflows.events import Event\n    from llama_index.core.bridge.pydantic import Field, PrivateAttr\n\n    class CustomEvent(Event):\n        field_1: int = Field(description=\"my custom field\")\n        _private_attr_1: int = PrivateAttr()\n\n    evt = CustomEvent(a=1, b=2, field_1=3, _private_attr_1=4)\n\n    # `field_1` and `_private_attr_1` get set as they do with Pydantic BaseModel\n    print(evt.field_1)\n    print(evt._private_attr_1)\n\n    # `a` and `b` get set in the underlying dict, namely `evt._data`\n    print((evt.a, evt.b))\n    ```"
            },
            {
                "name": "StartEvent",
                "docstring": "StartEvent is implicitly sent when a workflow runs."
            },
            {
                "name": "StopEvent",
                "docstring": "EndEvent signals the workflow to stop."
            },
            {
                "name": "InputRequiredEvent",
                "docstring": "InputRequiredEvent is sent when an input is required for a step."
            },
            {
                "name": "HumanResponseEvent",
                "docstring": "HumanResponseEvent is sent when a human response is required for a step."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Type",
            "dict_keys",
            "dict_items",
            "dict_values",
            "BaseModel",
            "Field",
            "PrivateAttr",
            "ConfigDict",
            "model_serializer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/drawing.py": {
        "functions": [
            {
                "name": "draw_all_possible_flows",
                "parameters": [
                    {
                        "name": "workflow",
                        "default": "Constant(value='workflow_all_flows.html')"
                    },
                    {
                        "name": "filename",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "notebook",
                        "default": null
                    }
                ],
                "docstring": "Draws all possible flows of the workflow."
            },
            {
                "name": "draw_most_recent_execution",
                "parameters": [
                    {
                        "name": "workflow",
                        "default": "Constant(value='workflow_recent_execution.html')"
                    },
                    {
                        "name": "filename",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "notebook",
                        "default": null
                    }
                ],
                "docstring": "Draws the most recent execution of the workflow."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "deprecated",
            "Optional",
            "Workflow",
            "StartEvent",
            "StopEvent",
            "StepConfig",
            "get_steps_from_class",
            "get_steps_from_instance",
            "Network",
            "Network"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/checkpointer.py": {
        "functions": [
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "run_id",
                        "default": null
                    },
                    {
                        "name": "last_completed_step",
                        "default": null
                    },
                    {
                        "name": "input_ev",
                        "default": null
                    },
                    {
                        "name": "output_ev",
                        "default": null
                    },
                    {
                        "name": "ctx",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "workflow",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "checkpoint_serializer",
                        "default": null
                    },
                    {
                        "name": "disabled_steps",
                        "default": null
                    }
                ],
                "docstring": "Create a WorkflowCheckpointer object.\n\nArgs:\n    workflow (Workflow): The wrapped workflow.\n    checkpoint_serializer (Optional[BaseSerializer], optional): The serializer to use\n        for serializing associated `Context` of a Workflow run. Defaults to None.\n    disabled_steps (List[str], optional): Steps for which to disable checkpointing. Defaults to []."
            },
            {
                "name": "enable_checkpoint",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Enable checkpointing after the completion of the specified step."
            },
            {
                "name": "disable_checkpoint",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Disable checkpointing after the completion of the specified step."
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run the workflow with checkpointing."
            },
            {
                "name": "run_from",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "checkpoint",
                        "default": null
                    }
                ],
                "docstring": "Run the attached workflow from the specified checkpoint."
            },
            {
                "name": "checkpoints",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "new_checkpoint_callback_for_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Closure to generate a new `CheckpointCallback` with a unique run-id."
            },
            {
                "name": "_checkpoint_filter_condition",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ckpt",
                        "default": null
                    },
                    {
                        "name": "last_completed_step",
                        "default": null
                    },
                    {
                        "name": "input_event_type",
                        "default": null
                    },
                    {
                        "name": "output_event_type",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "filter_checkpoints",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "run_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "last_completed_step",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input_event_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_event_type",
                        "default": null
                    }
                ],
                "docstring": "Returns a list of Checkpoint's based on user provided filters."
            }
        ],
        "classes": [
            {
                "name": "CheckpointCallback",
                "docstring": null
            },
            {
                "name": "Checkpoint",
                "docstring": null
            },
            {
                "name": "WorkflowCheckpointer",
                "docstring": "An object that creates and maintain's checkpoints during a Workflow run.\n\nThis checkpoint manager object works with multiple run's of a Workflow instance\nor from several different instances. Specified checkpoints can also be used\nas the starting point for a new Workflow run. Note that checkpoints are stored\nat the end of every step (with the exception of the _done step) for the attached\nWorkflow."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "uuid",
            "functools",
            "BaseModel",
            "Field",
            "ConfigDict",
            "Optional",
            "Dict",
            "Any",
            "List",
            "Protocol",
            "TYPE_CHECKING",
            "Type",
            "Awaitable",
            "Set",
            "Context",
            "BaseSerializer",
            "JsonSerializer",
            "WorkflowHandler",
            "Event",
            "WorkflowStepDoesNotExistError",
            "Workflow"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Context",
            "step",
            "draw_all_possible_flows",
            "draw_most_recent_execution",
            "WorkflowRuntimeError",
            "WorkflowTimeoutError",
            "WorkflowValidationError",
            "Event",
            "StartEvent",
            "StopEvent",
            "InputRequiredEvent",
            "HumanResponseEvent",
            "Workflow",
            "Context",
            "JsonPickleSerializer",
            "JsonSerializer",
            "Checkpoint",
            "WorkflowCheckpointer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/context.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "workflow",
                        "default": null
                    },
                    {
                        "name": "stepwise",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_serialize_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "queue",
                        "default": null
                    },
                    {
                        "name": "serializer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_deserialize_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "queue_str",
                        "default": null
                    },
                    {
                        "name": "serializer",
                        "default": null
                    },
                    {
                        "name": "prefix_queue_objs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_serialize_globals",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "serializer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_deserialize_globals",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "serialized_globals",
                        "default": null
                    },
                    {
                        "name": "serializer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "serializer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "workflow",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    },
                    {
                        "name": "serializer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "This property is provided for backward compatibility.\n\nUse `get` and `set` instead."
            },
            {
                "name": "lock",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Returns a mutex to lock the Context."
            },
            {
                "name": "session",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "This property is provided for backward compatibility."
            },
            {
                "name": "collect_events",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ev",
                        "default": null
                    },
                    {
                        "name": "expected",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "send_event",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Sends an event to a specific step in the workflow.\n\nIf step is None, the event is sent to all the receivers and we let\nthem discard events they don't want."
            },
            {
                "name": "write_event_to_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ev",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_result",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Returns the result of the workflow."
            },
            {
                "name": "streaming_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Context",
                "docstring": "A global object representing a context for a given workflow run.\n\nThe Context object can be used to store data that needs to be available across iterations during a workflow\nexecution, and across multiple workflow runs.\nEvery context instance offers two type of data storage: a global one, that's shared among all the steps within a\nworkflow, and private one, that's only accessible from a single step.\n\nBoth `set` and `get` operations on global data are governed by a lock, and considered coroutine-safe."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "json",
            "warnings",
            "defaultdict",
            "Dict",
            "Any",
            "Optional",
            "List",
            "Type",
            "TYPE_CHECKING",
            "Set",
            "Tuple",
            "BaseSerializer",
            "JsonSerializer",
            "StepConfig",
            "Event",
            "WorkflowRuntimeError",
            "Workflow"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/utils.py": {
        "functions": [
            {
                "name": "inspect_signature",
                "parameters": [
                    {
                        "name": "fn",
                        "default": null
                    }
                ],
                "docstring": "Given a function, ensure the signature is compatible with a workflow step."
            },
            {
                "name": "validate_step_signature",
                "parameters": [
                    {
                        "name": "spec",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_steps_from_class",
                "parameters": [
                    {
                        "name": "_class",
                        "default": null
                    }
                ],
                "docstring": "Given a class, return the list of its methods that were defined as steps."
            },
            {
                "name": "get_steps_from_instance",
                "parameters": [
                    {
                        "name": "workflow",
                        "default": null
                    }
                ],
                "docstring": "Given a workflow instance, return the list of its methods that were defined as steps."
            },
            {
                "name": "_get_param_types",
                "parameters": [
                    {
                        "name": "param",
                        "default": null
                    }
                ],
                "docstring": "Extract the types of a parameter. Handles Union and Optional types."
            },
            {
                "name": "_get_return_types",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Extract the return type hints from a function.\n\nHandles Union, Optional, and List types."
            },
            {
                "name": "is_free_function",
                "parameters": [
                    {
                        "name": "qualname",
                        "default": null
                    }
                ],
                "docstring": "Determines whether a certain qualified name points to a free function.\n\nThe strategy should be able to spot nested functions, for details see PEP-3155."
            },
            {
                "name": "get_qualified_name",
                "parameters": [
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": "Get the qualified name of a value."
            },
            {
                "name": "import_module_from_qualified_name",
                "parameters": [
                    {
                        "name": "qualified_name",
                        "default": null
                    }
                ],
                "docstring": "Import a module from a qualified name."
            }
        ],
        "classes": [
            {
                "name": "ServiceDefinition",
                "docstring": null
            },
            {
                "name": "StepSignatureSpec",
                "docstring": "A Pydantic model representing the signature of a step function or method."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "inspect",
            "import_module",
            "get_args",
            "get_origin",
            "Any",
            "List",
            "Optional",
            "Union",
            "Callable",
            "Dict",
            "get_type_hints",
            "BaseModel",
            "ConfigDict",
            "Event",
            "EventType",
            "WorkflowValidationError",
            "UnionType",
            "Union"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/retry_policy.py": {
        "functions": [
            {
                "name": "next",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "elapsed_time",
                        "default": null
                    },
                    {
                        "name": "attempts",
                        "default": null
                    },
                    {
                        "name": "error",
                        "default": null
                    }
                ],
                "docstring": "Decides if we should make another retry, returning the number of seconds to wait before the next run.\n\nArgs:\n    elapsed_time: Time in seconds that passed since the last attempt.\n    attempts: The number of attempts done so far.\n    error: The last error occurred.\n\nReturns:\n    The amount of seconds to wait before the next attempt, or None if we stop retrying."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "maximum_attempts",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "delay",
                        "default": null
                    }
                ],
                "docstring": "Creates a ConstantDelayRetryPolicy instance.\n\nArgs:\n    maximum_attempts: How many consecutive times the workflow should try to run the step in case of an error.\n    delay: how much time in seconds must pass before another attempt."
            },
            {
                "name": "next",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "elapsed_time",
                        "default": null
                    },
                    {
                        "name": "attempts",
                        "default": null
                    },
                    {
                        "name": "error",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RetryPolicy",
                "docstring": null
            },
            {
                "name": "ConstantDelayRetryPolicy",
                "docstring": "A simple policy that retries a step at regular intervals for a number of times."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Protocol",
            "Optional",
            "runtime_checkable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/errors.py": {
        "functions": [],
        "classes": [
            {
                "name": "WorkflowValidationError",
                "docstring": null
            },
            {
                "name": "WorkflowTimeoutError",
                "docstring": null
            },
            {
                "name": "WorkflowRuntimeError",
                "docstring": null
            },
            {
                "name": "WorkflowDone",
                "docstring": null
            },
            {
                "name": "WorkflowCancelledByUser",
                "docstring": null
            },
            {
                "name": "WorkflowStepDoesNotExistError",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/workflow.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    },
                    {
                        "name": "bases",
                        "default": null
                    },
                    {
                        "name": "dct",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=10.0)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "disable_validation",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "service_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_concurrent_runs",
                        "default": null
                    }
                ],
                "docstring": "Create an instance of the workflow.\n\nArgs:\n    timeout:\n        Number of seconds after the workflow execution will be halted, raising a `WorkflowTimeoutError`\n        exception. If set to `None`, the timeout will be disabled.\n    disable_validaton:\n        Whether or not the workflow should be validated before running. In case the workflow is\n        misconfigured, a call to `run` will raise a `WorkflowValidationError` exception explaining the details\n        of the problem.\n    verbose:\n        Whether or not the workflow should print additional informative messages during execution.\n    service_manager:\n        The instance of the `ServiceManager` used to make nested workflows available to this\n        workflow instance. The default value is the best choice unless you're customizing the workflow runtime.\n    num_concurrent_runs:\n        maximum number of .run() executions occurring simultaneously. If set to `None`, there\n        is no limit to this number."
            },
            {
                "name": "add_step",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Adds a free function as step for this workflow instance.\n\nIt raises an exception if a step with the same name was already added to the workflow."
            },
            {
                "name": "add_workflows",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Adds one or more nested workflows to this workflow.\n\nThis method only accepts keyword arguments, and the name of the parameter\nwill be used as the name of the workflow."
            },
            {
                "name": "_get_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Returns all the steps, whether defined as methods or free functions."
            },
            {
                "name": "_start",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "stepwise",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ctx",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "checkpoint_callback",
                        "default": null
                    }
                ],
                "docstring": "Sets up the queues and tasks for each declared step.\n\nThis method also launches each step as an async task."
            },
            {
                "name": "send_event",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ctx",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "stepwise",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "checkpoint_callback",
                        "default": null
                    }
                ],
                "docstring": "Runs the workflow until completion."
            },
            {
                "name": "run_from",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "checkpoint",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ctx_serializer",
                        "default": null
                    },
                    {
                        "name": "checkpoint_callback",
                        "default": null
                    }
                ],
                "docstring": "Run from a specified Checkpoint.\n\nThe `Context` snapshot contained in the checkpoint is loaded and used\nto execute the `Workflow`."
            },
            {
                "name": "is_done",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Checks if the workflow is done."
            },
            {
                "name": "_validate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Validate the workflow to ensure it's well-formed.\n\nReturns True if the workflow uses human-in-the-loop, False otherwise."
            }
        ],
        "classes": [
            {
                "name": "WorkflowMeta",
                "docstring": null
            },
            {
                "name": "Workflow",
                "docstring": "An event-driven abstraction used to orchestrate the execution of different components called \"steps\".\n\nEach step is responsible for handling certain event types and possibly emitting new events. Steps can be \"bound\"\nwhen they are defined as methods of the `Workflow` class itself, or \"unbound\" when they are defined as free\nfunctions. To define a step, the method or function must be decorated with the `@step` decorator.\n\nWorkflows provide basic validation to catch potential runtime errors as soon as possible. Validation happens once,\nwhen the workflow starts, and does not produce much overhead. It can be disabled in any case.\n\nUse an instance of a `Workflow` class to run a workflow and stream events produced during execution. Workflows\ncan be run step-by-step, by calling the `run_step` function multiple times until completion."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "functools",
            "time",
            "uuid",
            "warnings",
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "AsyncGenerator",
            "Set",
            "Tuple",
            "get_dispatcher",
            "StepConfig",
            "step",
            "Context",
            "InputRequiredEvent",
            "HumanResponseEvent",
            "Event",
            "StartEvent",
            "StopEvent",
            "*",
            "ServiceManager",
            "get_steps_from_class",
            "get_steps_from_instance",
            "ServiceDefinition",
            "Checkpoint",
            "CheckpointCallback",
            "WorkflowHandler",
            "JsonSerializer",
            "BaseSerializer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/workflow/decorators.py": {
        "functions": [
            {
                "name": "step",
                "parameters": [],
                "docstring": "Decorator used to mark methods and functions as workflow steps.\n\nDecorators are evaluated at import time, but we need to wait for\nstarting the communication channels until runtime. For this reason,\nwe temporarily store the list of events that will be consumed by this\nstep in the function object itself.\n\nArgs:\n    workflow: Workflow class to which the decorated step will be added. Only needed when using the\n        decorator on free functions instead of class methods.\n    num_workers: The number of workers that will process events for the decorated step. The default\n        value works most of the times.\n    retry_policy: The policy used to retry a step that encountered an error while running."
            },
            {
                "name": "decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "StepConfig",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "Callable",
            "List",
            "Optional",
            "Type",
            "BaseModel",
            "ConfigDict",
            "WorkflowValidationError",
            "is_free_function",
            "validate_step_signature",
            "inspect_signature",
            "ServiceDefinition",
            "RetryPolicy",
            "Workflow"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/program/llm_program.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LLMTextCompletionProgram",
                "docstring": "LLM Text Completion Program.\n\nUses generic LLM text completion + an output parser to generate a structured output."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "Type",
            "cast",
            "BaseModel",
            "LLM",
            "PydanticOutputParser",
            "BasePromptTemplate",
            "PromptTemplate",
            "Settings",
            "BaseOutputParser",
            "BasePydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/program/function_program.py": {
        "functions": [
            {
                "name": "_parse_tool_outputs",
                "parameters": [
                    {
                        "name": "agent_response",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Parse tool outputs."
            },
            {
                "name": "get_function_tool",
                "parameters": [
                    {
                        "name": "output_cls",
                        "default": null
                    }
                ],
                "docstring": "Get function tool."
            },
            {
                "name": "model_fn",
                "parameters": [],
                "docstring": "Model function."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_process_objects",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_response",
                        "default": null
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "cur_objects",
                        "default": null
                    }
                ],
                "docstring": "Process stream."
            },
            {
                "name": "stream_call",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Stream object.\n\nReturns a generator returning partials of the same object\nor a list of objects until it returns."
            }
        ],
        "classes": [
            {
                "name": "FunctionCallingProgram",
                "docstring": "Function Calling Program.\n\nUses function calling LLMs to obtain a structured output."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "Optional",
            "Type",
            "cast",
            "Union",
            "List",
            "Generator",
            "AsyncGenerator",
            "BaseModel",
            "ValidationError",
            "ChatResponse",
            "FunctionCallingLLM",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "Settings",
            "BasePydanticProgram",
            "Model",
            "FunctionTool",
            "AgentChatResponse",
            "process_streaming_objects",
            "num_valid_fields"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/program/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LLMTextCompletionProgram",
            "FunctionCallingProgram",
            "MultiModalLLMCompletionProgram",
            "BasePydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/program/multi_modal_llm_program.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_documents",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MultiModalLLMCompletionProgram",
                "docstring": "Multi Modal LLM Completion Program.\n\nUses generic Multi Modal LLM completion + an output parser to generate a structured output."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Type",
            "cast",
            "BaseModel",
            "MultiModalLLM",
            "PydanticOutputParser",
            "BasePromptTemplate",
            "PromptTemplate",
            "ImageNode",
            "BasePydanticProgram",
            "print_text",
            "OpenAIMultiModal"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/program/utils.py": {
        "functions": [
            {
                "name": "create_flexible_model",
                "parameters": [
                    {
                        "name": "model",
                        "default": null
                    }
                ],
                "docstring": "Create a flexible version of the model that allows any fields."
            },
            {
                "name": "create_list_model",
                "parameters": [
                    {
                        "name": "base_cls",
                        "default": null
                    }
                ],
                "docstring": "Create a list version of an existing Pydantic object."
            },
            {
                "name": "get_program_for_llm",
                "parameters": [
                    {
                        "name": "output_cls",
                        "default": "Attribute(value=Name(id='PydanticProgramMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "pydantic_program_mode",
                        "default": null
                    }
                ],
                "docstring": "Get a program based on the compatible LLM."
            },
            {
                "name": "_repair_incomplete_json",
                "parameters": [
                    {
                        "name": "json_str",
                        "default": null
                    }
                ],
                "docstring": "Attempt to repair incomplete JSON strings.\n\nArgs:\n    json_str (str): Potentially incomplete JSON string\n\nReturns:\n    str: Repaired JSON string"
            },
            {
                "name": "process_streaming_objects",
                "parameters": [
                    {
                        "name": "chat_response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "cur_objects",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "flexible_mode",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Process streaming response into structured objects.\n\nArgs:\n    chat_response (ChatResponse): The chat response to process\n    output_cls (Type[BaseModel]): The target output class\n    cur_objects (Optional[List[BaseModel]]): Current accumulated objects\n    allow_parallel_tool_calls (bool): Whether to allow multiple tool calls\n    flexible_mode (bool): Whether to use flexible schema during parsing\n\nReturns:\n    Union[BaseModel, List[BaseModel]]: Processed object(s)"
            },
            {
                "name": "num_valid_fields",
                "parameters": [
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Recursively count the number of fields in a Pydantic object (including nested objects) that aren't None.\n\nArgs:\n    obj (Any): A Pydantic model instance or any other object.\n\nReturns:\n    int: The number of fields that have non-None values."
            }
        ],
        "classes": [
            {
                "name": "FlexibleModel",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Type",
            "Sequence",
            "Union",
            "Optional",
            "Dict",
            "BaseModel",
            "ConfigDict",
            "Field",
            "ValidationError",
            "create_model",
            "LLM",
            "ToolSelection",
            "FunctionCallingLLM",
            "PydanticOutputParser",
            "BasePromptTemplate",
            "BasePydanticProgram",
            "PydanticProgramMode",
            "ChatResponse",
            "FunctionCallingProgram",
            "LLMTextCompletionProgram",
            "OpenAIPydanticProgram",
            "FunctionCallingProgram",
            "LLMTextCompletionProgram",
            "LMFormatEnforcerPydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/program/llm_prompt_program.py": {
        "functions": [
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Initialize program from defaults."
            }
        ],
        "classes": [
            {
                "name": "BaseLLMFunctionProgram",
                "docstring": "Base LLM Prompt Program.\n\nThis is a base class for LLM endpoints that can return\na structured output given the prompt.\n\nNOTE: this only works for structured endpoints atm\n(does not work for text completion endpoints.)"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Generic",
            "Optional",
            "Type",
            "TypeVar",
            "BaseModel",
            "PromptTemplate",
            "BasePydanticProgram",
            "Model"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/prompt_type.py": {
        "functions": [],
        "classes": [
            {
                "name": "PromptType",
                "docstring": "Prompt type."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/system.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/mixin.py": {
        "functions": [
            {
                "name": "_validate_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts_dict",
                        "default": null
                    },
                    {
                        "name": "module_dict",
                        "default": null
                    }
                ],
                "docstring": "Validate prompts."
            },
            {
                "name": "get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a prompt."
            },
            {
                "name": "update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts_dict",
                        "default": null
                    }
                ],
                "docstring": "Update prompts.\n\nOther prompts will remain in place."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules.\n\nReturn a dictionary of sub-modules within the current module\nthat also implement PromptMixin (so that their prompts can also be get/set).\n\nCan be blank if no sub-modules."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts_dict",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "PromptMixin",
                "docstring": "Prompt mixin.\n\nThis mixin is used in other modules, like query engines, response synthesizers.\nThis shows that the module supports getting, setting prompts,\nboth within the immediate module as well as child modules."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "defaultdict",
            "deepcopy",
            "Dict",
            "Union",
            "BasePromptTemplate"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/display_utils.py": {
        "functions": [
            {
                "name": "display_prompt_dict",
                "parameters": [
                    {
                        "name": "prompts_dict",
                        "default": null
                    }
                ],
                "docstring": "Display prompt dict.\n\nArgs:\n    prompts_dict: prompt dict"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptDictType",
            "Markdown",
            "display"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChatMessage",
            "MessageRole",
            "BasePromptTemplate",
            "ChatPromptTemplate",
            "LangchainPromptTemplate",
            "Prompt",
            "PromptTemplate",
            "PromptType",
            "SelectorPromptTemplate",
            "display_prompt_dict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/chat_prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChatMessage",
            "MessageRole",
            "ChatPromptTemplate"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptTemplate"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/utils.py": {
        "functions": [
            {
                "name": "format_string",
                "parameters": [
                    {
                        "name": "string_to_format",
                        "default": null
                    }
                ],
                "docstring": "Format a string with kwargs."
            },
            {
                "name": "get_template_vars",
                "parameters": [
                    {
                        "name": "template_str",
                        "default": null
                    }
                ],
                "docstring": "Get template variables from a template string."
            },
            {
                "name": "is_chat_model",
                "parameters": [
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "format_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "format_string",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "format_string",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_replace_match",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "match",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SafeFormatter",
                "docstring": "Safe string formatter that does not raise KeyError if key is missing."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "Optional",
            "re",
            "BaseLLM"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/default_prompt_selectors.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "SelectorPromptTemplate",
            "CHAT_REFINE_PROMPT",
            "CHAT_REFINE_TABLE_CONTEXT_PROMPT",
            "CHAT_TEXT_QA_PROMPT",
            "CHAT_TREE_SUMMARIZE_PROMPT",
            "DEFAULT_REFINE_PROMPT",
            "DEFAULT_REFINE_TABLE_CONTEXT_PROMPT",
            "DEFAULT_TEXT_QA_PROMPT",
            "DEFAULT_TREE_SUMMARIZE_PROMPT",
            "is_chat_model",
            "is_cohere_model",
            "COHERE_QA_TEMPLATE",
            "COHERE_REFINE_TEMPLATE",
            "COHERE_TREE_SUMMARIZE_TEMPLATE",
            "COHERE_REFINE_TABLE_CONTEXT_PROMPT"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/prompt_utils.py": {
        "functions": [
            {
                "name": "get_empty_prompt_txt",
                "parameters": [
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Get empty prompt text.\n\nSubstitute empty strings in parts of the prompt that have\nnot yet been filled out. Skip variables that have already\nbeen partially formatted. This is used to compute the initial tokens."
            },
            {
                "name": "get_biggest_prompt",
                "parameters": [
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Get biggest prompt.\n\nOftentimes we need to fetch the biggest prompt, in order to\nbe the most conservative about chunking text. This\nis a helper utility for that."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "BasePromptTemplate"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/guidance_utils.py": {
        "functions": [
            {
                "name": "convert_to_handlebars",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Convert a python format string to handlebars-style template.\n\nIn python format string, single braces {} are used for variable substitution,\n    and double braces {{}} are used for escaping actual braces (e.g. for JSON dict)\nIn handlebars template, double braces {{}} are used for variable substitution,\n    and single braces are actual braces (e.g. for JSON dict)\n\nThis is currently only used to convert a python format string based prompt template\nto a guidance program template."
            },
            {
                "name": "wrap_json_markdown",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Wrap text in json markdown formatting block."
            },
            {
                "name": "pydantic_to_guidance_output_template",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Convert a pydantic model to guidance output template."
            },
            {
                "name": "pydantic_to_guidance_output_template_markdown",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Convert a pydantic model to guidance output template wrapped in json markdown."
            },
            {
                "name": "json_schema_to_guidance_output_template",
                "parameters": [
                    {
                        "name": "schema",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "key",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "indent",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "root",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_pattern_control",
                        "default": null
                    }
                ],
                "docstring": "Convert a json schema to guidance output template.\n\nImplementation based on https://github.com/microsoft/guidance/        blob/main/notebooks/applications/jsonformer.ipynb\nModified to support nested pydantic models."
            },
            {
                "name": "parse_pydantic_from_guidance_program",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Parse output from guidance program.\n\nThis is a temporary solution for parsing a pydantic object out of an executed\nguidance program.\n\nNOTE: right now we assume the output is the last markdown formatted json block\n\nNOTE: a better way is to extract via Program.variables, but guidance does not\n      support extracting nested objects right now.\n      So we call back to manually parsing the final text after program execution"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Type",
            "TypeVar",
            "BaseModel",
            "OutputParserException",
            "parse_json_markdown"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/base.py": {
        "functions": [
            {
                "name": "_map_template_vars",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": "For keys in template_var_mappings, swap in the right keys."
            },
            {
                "name": "_map_function_vars",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": "For keys in function_mappings, compute values and combine w/ kwargs.\n\nUsers can pass in functions instead of fixed values as format variables.\nFor each function, we call the function with the current kwargs,\nget back the value, and then use that value in the template\nfor the corresponding format variable."
            },
            {
                "name": "_map_all_vars",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": "Map both template and function variables.\n\nWe (1) first call function mappings to compute functions,\nand then (2) call the template_var_mappings."
            },
            {
                "name": "partial_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_template",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='PromptType', ctx=Load()), attr='CUSTOM', ctx=Load())"
                    },
                    {
                        "name": "template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "template_var_mappings",
                        "default": null
                    },
                    {
                        "name": "function_mappings",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "partial_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Partially format the prompt."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "completion_to_prompt",
                        "default": null
                    }
                ],
                "docstring": "Format the prompt into a string."
            },
            {
                "name": "format_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Format the prompt into a list of chat messages."
            },
            {
                "name": "get_template",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='PromptType', ctx=Load()), attr='CUSTOM', ctx=Load())"
                    },
                    {
                        "name": "message_templates",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "template_var_mappings",
                        "default": null
                    },
                    {
                        "name": "function_mappings",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_messages",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "message_templates",
                        "default": null
                    }
                ],
                "docstring": "From messages."
            },
            {
                "name": "partial_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "messages_to_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_template",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "default_template",
                        "default": null
                    },
                    {
                        "name": "conditionals",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "select",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "partial_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Format the prompt into a string."
            },
            {
                "name": "format_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Format the prompt into a list of chat messages."
            },
            {
                "name": "get_template",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Attribute(value=Name(id='PromptType', ctx=Load()), attr='CUSTOM', ctx=Load())"
                    },
                    {
                        "name": "prompt_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "template_var_mappings",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "function_mappings",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "requires_langchain_llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "partial_format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Partially format the prompt."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Format the prompt into a string."
            },
            {
                "name": "format_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Format the prompt into a list of chat messages."
            },
            {
                "name": "get_template",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "BasePromptTemplate",
                "docstring": null
            },
            {
                "name": "PromptTemplate",
                "docstring": null
            },
            {
                "name": "ChatPromptTemplate",
                "docstring": null
            },
            {
                "name": "SelectorPromptTemplate",
                "docstring": null
            },
            {
                "name": "LangchainPromptTemplate",
                "docstring": null
            },
            {
                "name": "PromptComponent",
                "docstring": "Prompt component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "deepcopy",
            "TYPE_CHECKING",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "Union",
            "Annotated",
            "Field",
            "WithJsonSchema",
            "PlainSerializer",
            "SerializeAsAny",
            "ChatMessage",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "BaseModel",
            "ConfigDict",
            "BaseLLM",
            "messages_to_prompt",
            "prompt_to_messages",
            "PromptType",
            "get_template_vars",
            "format_string",
            "BaseOutputParser",
            "BasePromptTemplate",
            "ConditionalPromptSelector",
            "ConditionalPromptSelector",
            "LangChainLLM",
            "LangChainLLM",
            "from_lc_messages",
            "LangChainLLM",
            "ConditionalPromptSelector"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/prompts/default_prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptTemplate",
            "PromptType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/simple_summarize.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimpleSummarize",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Generator",
            "Optional",
            "Sequence",
            "cast",
            "CallbackManager",
            "PromptHelper",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_TEXT_QA_PROMPT_SEL",
            "PromptDictType",
            "BaseSynthesizer",
            "RESPONSE_TEXT_TYPE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/compact_and_accumulate.py": {
        "functions": [
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='\\n---------------------\\n')"
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    },
                    {
                        "name": "separator",
                        "default": null
                    }
                ],
                "docstring": "Get compact response."
            }
        ],
        "classes": [
            {
                "name": "CompactAndAccumulate",
                "docstring": "Accumulate responses across compact text chunks."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Sequence",
            "Accumulate",
            "RESPONSE_TEXT_TYPE",
            "temp_set_attrs"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/generation.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "simple_template",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Generation",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Sequence",
            "RESPONSE_TYPE",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "PromptHelper",
            "SynthesizeStartEvent",
            "SynthesizeEndEvent",
            "llama_index.core.instrumentation",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_SIMPLE_INPUT_PROMPT",
            "PromptDictType",
            "BaseSynthesizer",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "QueryType",
            "RESPONSE_TEXT_TYPE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/accumulate.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "flatten_list",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "md_array",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_format_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "outputs",
                        "default": null
                    },
                    {
                        "name": "separator",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='\\n---------------------\\n')"
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    },
                    {
                        "name": "separator",
                        "default": null
                    }
                ],
                "docstring": "Apply the same prompt to text chunks and return responses."
            },
            {
                "name": "_give_responses",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunk",
                        "default": null
                    },
                    {
                        "name": "use_async",
                        "default": null
                    }
                ],
                "docstring": "Give responses given a query and a corresponding text chunk."
            }
        ],
        "classes": [
            {
                "name": "Accumulate",
                "docstring": "Accumulate responses from multiple text chunks."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Callable",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "run_async_tasks",
            "BaseModel",
            "CallbackManager",
            "PromptHelper",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_TEXT_QA_PROMPT_SEL",
            "PromptDictType",
            "BaseSynthesizer",
            "RESPONSE_TEXT_TYPE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/refine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "structured_answer_filtering",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "program_factory",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    },
                    {
                        "name": "prev_response",
                        "default": null
                    }
                ],
                "docstring": "Give response over chunks."
            },
            {
                "name": "_default_program_factory",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_give_response_single",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunk",
                        "default": null
                    }
                ],
                "docstring": "Give response given a query and a corresponding text chunk."
            },
            {
                "name": "_refine_response_single",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunk",
                        "default": null
                    }
                ],
                "docstring": "Refine response."
            }
        ],
        "classes": [
            {
                "name": "StructuredRefineResponse",
                "docstring": "Used to answer a given query based on the provided context.\n\nAlso indicates if the query was satisfied with the provided answer."
            },
            {
                "name": "DefaultRefineProgram",
                "docstring": "Runs the query on the LLM as normal and always returns the answer with\nquery_satisfied=True. In effect, doesn't do any answer filtering."
            },
            {
                "name": "Refine",
                "docstring": "Refine a response to a query across text chunks."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Callable",
            "Generator",
            "Optional",
            "Sequence",
            "Type",
            "cast",
            "AsyncGenerator",
            "BaseModel",
            "Field",
            "ValidationError",
            "CallbackManager",
            "PromptHelper",
            "truncate_text",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_REFINE_PROMPT_SEL",
            "DEFAULT_TEXT_QA_PROMPT_SEL",
            "PromptDictType",
            "get_response_text",
            "aget_response_text",
            "BaseSynthesizer",
            "RESPONSE_TEXT_TYPE",
            "BasePydanticProgram",
            "GetResponseEndEvent",
            "GetResponseStartEvent",
            "llama_index.core.instrumentation",
            "get_program_for_llm"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Accumulate",
            "BaseSynthesizer",
            "SynthesizerComponent",
            "CompactAndRefine",
            "get_response_synthesizer",
            "Generation",
            "Refine",
            "SimpleSummarize",
            "TreeSummarize",
            "ResponseMode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/no_text.py": {
        "functions": [
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "NoText",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Sequence",
            "PromptDictType",
            "BaseSynthesizer",
            "RESPONSE_TEXT_TYPE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/type.py": {
        "functions": [],
        "classes": [
            {
                "name": "ResponseMode",
                "docstring": "Response modes of the response builder (and synthesizer)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/factory.py": {
        "functions": [
            {
                "name": "get_response_synthesizer",
                "parameters": [
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summary_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "simple_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_mode",
                        "default": "Attribute(value=Name(id='ResponseMode', ctx=Load()), attr='COMPACT', ctx=Load())"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "structured_answer_filtering",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "program_factory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=False)"
                    }
                ],
                "docstring": "Get a response synthesizer."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Callable",
            "Optional",
            "Type",
            "BaseModel",
            "CallbackManager",
            "PromptHelper",
            "BasePromptTemplate",
            "DEFAULT_REFINE_PROMPT_SEL",
            "DEFAULT_TEXT_QA_PROMPT_SEL",
            "DEFAULT_TREE_SUMMARIZE_PROMPT_SEL",
            "DEFAULT_SIMPLE_INPUT_PROMPT",
            "LLM",
            "Accumulate",
            "BaseSynthesizer",
            "CompactAndAccumulate",
            "CompactAndRefine",
            "ContextOnly",
            "Generation",
            "NoText",
            "Refine",
            "SimpleSummarize",
            "TreeSummarize",
            "ResponseMode",
            "Settings",
            "BasePydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/compact_and_refine.py": {
        "functions": [
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    },
                    {
                        "name": "prev_response",
                        "default": null
                    }
                ],
                "docstring": "Get compact response."
            },
            {
                "name": "_make_compact_text_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CompactAndRefine",
                "docstring": "Refine responses across compact text chunks."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Sequence",
            "get_biggest_prompt",
            "Refine",
            "RESPONSE_TEXT_TYPE",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/context_only.py": {
        "functions": [
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ContextOnly",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Sequence",
            "PromptDictType",
            "BaseSynthesizer",
            "RESPONSE_TEXT_TYPE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/base.py": {
        "functions": [
            {
                "name": "empty_response_generator",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": "Get response."
            },
            {
                "name": "_log_prompt_and_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "formatted_prompt",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "log_prefix",
                        "default": null
                    }
                ],
                "docstring": "Log prompt and response from LLM."
            },
            {
                "name": "_get_metadata_for_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get metadata for response."
            },
            {
                "name": "_prepare_response_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response_str",
                        "default": null
                    },
                    {
                        "name": "source_nodes",
                        "default": null
                    }
                ],
                "docstring": "Prepare response object from response string."
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "BaseSynthesizer",
                "docstring": "Response builder class."
            },
            {
                "name": "SynthesizerComponent",
                "docstring": "Synthesizer component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "abstractmethod",
            "Any",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Sequence",
            "AsyncGenerator",
            "Type",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "RESPONSE_TYPE",
            "PydanticResponse",
            "Response",
            "StreamingResponse",
            "AsyncStreamingResponse",
            "BaseModel",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "PromptHelper",
            "LLM",
            "PromptMixin",
            "BaseNode",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "QueryType",
            "Settings",
            "RESPONSE_TEXT_TYPE",
            "DispatcherSpanMixin",
            "SynthesizeStartEvent",
            "SynthesizeEndEvent",
            "StructuredLLM",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/response_synthesizers/tree_summarize.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_helper",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summary_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "text_chunks",
                        "default": null
                    }
                ],
                "docstring": "Get tree summarize response."
            }
        ],
        "classes": [
            {
                "name": "TreeSummarize",
                "docstring": "Tree summarize response builder.\n\nThis response builder recursively merges text chunks and summarizes them\nin a bottom-up fashion (i.e. building a tree from leaves to root).\n\nMore concretely, at each recursively step:\n1. we repack the text chunks so that each chunk fills the context window of the LLM\n2. if there is only one chunk, we give the final response\n3. otherwise, we summarize each chunk and recursively summarize the summaries."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Optional",
            "Sequence",
            "Type",
            "run_async_tasks",
            "CallbackManager",
            "PromptHelper",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_TREE_SUMMARIZE_PROMPT_SEL",
            "PromptDictType",
            "BaseSynthesizer",
            "RESPONSE_TEXT_TYPE",
            "BaseModel"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/batch_runner.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "evaluators",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "workers",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_format_results",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "results",
                        "default": null
                    }
                ],
                "docstring": "Format results."
            },
            {
                "name": "_validate_and_clean_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Validate and clean input lists.\n\nEnforce that at least one of the inputs is not None.\nMake sure that all inputs have the same length.\nMake sure that None inputs are replaced with [None] * len(inputs)."
            },
            {
                "name": "_validate_nested_eval_kwargs_types",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "eval_kwargs_lists",
                        "default": null
                    }
                ],
                "docstring": "Ensure eval kwargs are acceptable format.\n    either a Dict[str, List] or a Dict[str, Dict[str, List]].\n\nAllows use of different kwargs (e.g. references) with different evaluators\n    while keeping backwards compatibility for single evaluators"
            },
            {
                "name": "_get_eval_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "eval_kwargs_lists",
                        "default": null
                    },
                    {
                        "name": "idx",
                        "default": null
                    }
                ],
                "docstring": "Get eval kwargs from eval_kwargs_lists at a given idx.\n\nSince eval_kwargs_lists is a dict of lists, we need to get the\nvalue at idx for each key."
            },
            {
                "name": "evaluate_response_strs",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "queries",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_strs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "contexts_list",
                        "default": null
                    }
                ],
                "docstring": "Evaluate query, response pairs.\n\nSync version of aevaluate_response_strs."
            },
            {
                "name": "evaluate_responses",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "queries",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "responses",
                        "default": null
                    }
                ],
                "docstring": "Evaluate query, response objs.\n\nSync version of aevaluate_responses."
            },
            {
                "name": "evaluate_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": null
                    },
                    {
                        "name": "queries",
                        "default": null
                    }
                ],
                "docstring": "Evaluate queries.\n\nSync version of aevaluate_queries."
            },
            {
                "name": "upload_eval_results",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "project_name",
                        "default": null
                    },
                    {
                        "name": "app_name",
                        "default": null
                    },
                    {
                        "name": "results",
                        "default": null
                    }
                ],
                "docstring": "Upload the evaluation results to LlamaCloud.\n\nArgs:\n    project_name (str): The name of the project.\n    app_name (str): The name of the app.\n    results (Dict[str, List[EvaluationResult]]):\n        The evaluation results, a mapping of metric name to a list of EvaluationResult objects.\n\nExamples:\n    ```python\n    results = batch_runner.evaluate_responses(...)\n\n    batch_runner.upload_eval_results(\n        project_name=\"my_project\",\n        app_name=\"my_app\",\n        results=results\n    )\n    ```"
            }
        ],
        "classes": [
            {
                "name": "BatchEvalRunner",
                "docstring": "Batch evaluation runner.\n\nArgs:\n    evaluators (Dict[str, BaseEvaluator]): Dictionary of evaluators.\n    workers (int): Number of workers to use for parallelization.\n        Defaults to 2.\n    show_progress (bool): Whether to show progress bars. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "retry",
            "stop_after_attempt",
            "wait_exponential",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "cast",
            "asyncio_module",
            "asyncio_run",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "Response",
            "BaseEvaluator",
            "EvaluationResult",
            "upload_eval_results"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/faithfulness.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "FaithfulnessEvaluator",
                "docstring": "Faithfulness evaluator.\n\nEvaluates whether a response is faithful to the contexts\n(i.e. whether the response is supported by the contexts or hallucinated.)\n\nThis evaluator only considers the response string and the list of context strings.\n\nArgs:\n    raise_error(bool): Whether to raise an error when the response is invalid.\n        Defaults to False.\n    eval_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    refine_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for refining the evaluation."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "asyncio",
            "Any",
            "Optional",
            "Sequence",
            "Union",
            "BaseEvaluator",
            "EvaluationResult",
            "SummaryIndex",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "Document",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/correctness.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=4.0)"
                    },
                    {
                        "name": "score_threshold",
                        "default": "Name(id='default_parser', ctx=Load())"
                    },
                    {
                        "name": "parser_function",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "CorrectnessEvaluator",
                "docstring": "Correctness evaluator.\n\nEvaluates the correctness of a question answering system.\nThis evaluator depends on `reference` answer to be provided, in addition to the\nquery string and response string.\n\nIt outputs a score between 1 and 5, where 1 is the worst and 5 is the best,\nalong with a reasoning for the score.\nPassing is defined as a score greater than or equal to the given threshold.\n\nArgs:\n    eval_template (Optional[Union[BasePromptTemplate, str]]):\n        Template for the evaluation prompt.\n    score_threshold (float): Numerical threshold for passing the evaluation,\n        defaults to 4.0."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "Tuple",
            "Union",
            "BaseEvaluator",
            "EvaluationResult",
            "default_parser",
            "LLM",
            "BasePromptTemplate",
            "ChatMessage",
            "ChatPromptTemplate",
            "MessageRole",
            "PromptTemplate",
            "PromptDictType",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/semantic_similarity.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_mode",
                        "default": "Constant(value=0.8)"
                    },
                    {
                        "name": "similarity_threshold",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "SemanticSimilarityEvaluator",
                "docstring": "Embedding similarity evaluator.\n\nEvaluate the quality of a question answering system by\ncomparing the similarity between embeddings of the generated answer\nand the reference answer.\n\nInspired by this paper:\n- Semantic Answer Similarity for Evaluating Question Answering Models\n    https://arxiv.org/pdf/2108.06130.pdf\n\nArgs:\n    similarity_threshold (float): Embedding similarity threshold for \"passing\".\n        Defaults to 0.8."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "BaseEmbedding",
            "SimilarityMode",
            "similarity",
            "BaseEvaluator",
            "EvaluationResult",
            "PromptDictType",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AnswerRelevancyEvaluator",
            "BaseEvaluator",
            "EvaluationResult",
            "BatchEvalRunner",
            "ContextRelevancyEvaluator",
            "CorrectnessEvaluator",
            "DatasetGenerator",
            "QueryResponseDataset",
            "FaithfulnessEvaluator",
            "ResponseEvaluator",
            "GuidelineEvaluator",
            "get_retrieval_results_df",
            "PairwiseComparisonEvaluator",
            "QueryResponseEvaluator",
            "RelevancyEvaluator",
            "BaseRetrievalEvaluator",
            "RetrievalEvalResult",
            "MultiModalRetrieverEvaluator",
            "RetrieverEvaluator",
            "MRR",
            "HitRate",
            "RetrievalMetricResult",
            "resolve_metrics",
            "SemanticSimilarityEvaluator",
            "EmbeddingQAFinetuneDataset",
            "generate_qa_embedding_pairs"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/dataset_generation.py": {
        "functions": [
            {
                "name": "from_qr_pairs",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "qr_pairs",
                        "default": null
                    }
                ],
                "docstring": "Create from qr pairs."
            },
            {
                "name": "qr_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get pairs."
            },
            {
                "name": "questions",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get questions."
            },
            {
                "name": "save_json",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Save json."
            },
            {
                "name": "from_json",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Load json."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_questions_per_chunk",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_question_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "question_gen_query",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_documents",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_questions_per_chunk",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_question_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "question_gen_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "required_keywords",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "exclude_keywords",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Generate dataset from documents."
            },
            {
                "name": "generate_questions_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num",
                        "default": null
                    }
                ],
                "docstring": "Generates questions for each document."
            },
            {
                "name": "generate_dataset_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num",
                        "default": null
                    }
                ],
                "docstring": "Generates questions for each document."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "QueryResponseDataset",
                "docstring": "Query Response Dataset.\n\nThe response can be empty if the dataset is generated from documents.\n\nArgs:\n    queries (Dict[str, str]): Query id -> query.\n    responses (Dict[str, str]): Query id -> response."
            },
            {
                "name": "DatasetGenerator",
                "docstring": "Generate dataset (question/ question-answer pairs)     based on the given documents.\n\nNOTE: this is a beta feature, subject to change!\n\nArgs:\n    nodes (List[Node]): List of nodes. (Optional)\n    llm (LLM): Language model.\n    callback_manager (CallbackManager): Callback manager.\n    num_questions_per_chunk: number of question to be         generated per chunk. Each document is chunked of size 512 words.\n    text_question_template: Question generation template.\n    question_gen_query: Question generation query."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "asyncio",
            "json",
            "re",
            "uuid",
            "Coroutine",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "deprecated",
            "asyncio_run",
            "BaseModel",
            "Field",
            "CallbackManager",
            "SummaryIndex",
            "run_transformations",
            "LLM",
            "KeywordNodePostprocessor",
            "BasePromptTemplate",
            "PromptTemplate",
            "DEFAULT_TEXT_QA_PROMPT",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "BaseNode",
            "Document",
            "MetadataMode",
            "NodeWithScore",
            "TransformComponent",
            "Settings",
            "tqdm_asyncio"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/pairwise.py": {
        "functions": [
            {
                "name": "_default_parser_function",
                "parameters": [
                    {
                        "name": "eval_response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Name(id='_default_parser_function', ctx=Load())"
                    },
                    {
                        "name": "parser_function",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "enforce_consensus",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "EvaluationSource",
                "docstring": "To distinguish between flipped or original."
            },
            {
                "name": "PairwiseComparisonEvaluator",
                "docstring": "Pairwise comparison evaluator.\n\nEvaluates the quality of a response vs. a \"reference\" response given a question by\nhaving an LLM judge which response is better.\n\nOutputs whether the `response` given is better than the `reference` response.\n\nArgs:\n    eval_template (Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    enforce_consensus (bool): Whether to enforce consensus (consistency if we\n        flip the order of the answers). Defaults to True."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Enum",
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "Tuple",
            "Union",
            "BaseEvaluator",
            "EvaluationResult",
            "LLM",
            "BasePromptTemplate",
            "ChatMessage",
            "ChatPromptTemplate",
            "MessageRole",
            "PromptTemplate",
            "PromptDictType",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/context_relevancy.py": {
        "functions": [
            {
                "name": "_default_parser_function",
                "parameters": [
                    {
                        "name": "output_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": "Name(id='_DEFAULT_SCORE_THRESHOLD', ctx=Load())"
                    },
                    {
                        "name": "score_threshold",
                        "default": "Name(id='_default_parser_function', ctx=Load())"
                    },
                    {
                        "name": "parser_function",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "ContextRelevancyEvaluator",
                "docstring": "Context relevancy evaluator.\n\nEvaluates the relevancy of retrieved contexts to a query.\nThis evaluator considers the query string and retrieved contexts.\n\nArgs:\n    raise_error(Optional[bool]):\n        Whether to raise an error if the response is invalid.\n        Defaults to False.\n    eval_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    refine_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for refinement."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "asyncio",
            "re",
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "Tuple",
            "BaseEvaluator",
            "EvaluationResult",
            "SummaryIndex",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "Document",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/guideline.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "guidelines",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "EvaluationData",
                "docstring": null
            },
            {
                "name": "GuidelineEvaluator",
                "docstring": "Guideline evaluator.\n\nEvaluates whether a query and response pair passes the given guidelines.\n\nThis evaluator only considers the query string and the response string.\n\nArgs:\n    guidelines(Optional[str]): User-added guidelines to use for evaluation.\n        Defaults to None, which uses the default guidelines.\n    eval_template(Optional[Union[str, BasePromptTemplate]] ):\n        The template to use for evaluation."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "Any",
            "Optional",
            "Sequence",
            "Union",
            "cast",
            "BaseModel",
            "Field",
            "BaseEvaluator",
            "EvaluationResult",
            "LLM",
            "PydanticOutputParser",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/answer_relevancy.py": {
        "functions": [
            {
                "name": "_default_parser_function",
                "parameters": [
                    {
                        "name": "output_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Name(id='_DEFAULT_SCORE_THRESHOLD', ctx=Load())"
                    },
                    {
                        "name": "score_threshold",
                        "default": "Name(id='_default_parser_function', ctx=Load())"
                    },
                    {
                        "name": "parser_function",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "AnswerRelevancyEvaluator",
                "docstring": "Answer relevancy evaluator.\n\nEvaluates the relevancy of response to a query.\nThis evaluator considers the query string and response string.\n\nArgs:\n    raise_error(Optional[bool]):\n        Whether to raise an error if the response is invalid.\n        Defaults to False.\n    eval_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    refine_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for refinement."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "asyncio",
            "re",
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "Tuple",
            "BaseEvaluator",
            "EvaluationResult",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/eval_utils.py": {
        "functions": [
            {
                "name": "get_responses",
                "parameters": [],
                "docstring": "Get responses.\n\nSync version of aget_responses."
            },
            {
                "name": "get_results_df",
                "parameters": [
                    {
                        "name": "eval_results_list",
                        "default": null
                    },
                    {
                        "name": "names",
                        "default": null
                    },
                    {
                        "name": "metric_keys",
                        "default": null
                    }
                ],
                "docstring": "Get results df.\n\nArgs:\n    eval_results_list (List[Dict[str, List[EvaluationResult]]]):\n        List of evaluation results.\n    names (List[str]):\n        Names of the evaluation results.\n    metric_keys (List[str]):\n        List of metric keys to get."
            },
            {
                "name": "_download_llama_dataset_from_hub",
                "parameters": [
                    {
                        "name": "llama_dataset_id",
                        "default": null
                    }
                ],
                "docstring": "Uses a subprocess and llamaindex-cli to download a dataset from llama-hub."
            },
            {
                "name": "upload_eval_dataset",
                "parameters": [
                    {
                        "name": "dataset_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "questions",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llama_dataset_id",
                        "default": "Name(id='DEFAULT_PROJECT_NAME', ctx=Load())"
                    },
                    {
                        "name": "project_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "base_url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "overwrite",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "append",
                        "default": null
                    }
                ],
                "docstring": "Upload questions to platform dataset."
            },
            {
                "name": "upload_eval_results",
                "parameters": [
                    {
                        "name": "project_name",
                        "default": null
                    },
                    {
                        "name": "app_name",
                        "default": null
                    },
                    {
                        "name": "results",
                        "default": null
                    }
                ],
                "docstring": "Upload the evaluation results to LlamaCloud.\n\nArgs:\n    project_name (str): The name of the project.\n    app_name (str): The name of the app.\n    results (Dict[str, List[EvaluationResult]]):\n        The evaluation results, a mapping of metric name to a list of EvaluationResult objects.\n\nExamples:\n    ```python\n    from llama_index.core.evaluation.eval_utils import upload_eval_results\n\n    result = evaluator.evaluate(...)\n    upload_eval_results(\n        project_name=\"my_project\",\n        app_name=\"my_app\",\n        results={\"evaluator_name\": [result]}\n    )\n    ```"
            },
            {
                "name": "default_parser",
                "parameters": [
                    {
                        "name": "eval_response",
                        "default": null
                    }
                ],
                "docstring": "Default parser function for evaluation response.\n\nArgs:\n    eval_response (str): The response string from the evaluation.\n\nReturns:\n    Tuple[float, str]: A tuple containing the score as a float and the reasoning as a string."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "subprocess",
            "tempfile",
            "defaultdict",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "TYPE_CHECKING",
            "numpy",
            "asyncio_module",
            "asyncio_run",
            "BaseQueryEngine",
            "DEFAULT_PROJECT_NAME",
            "EvaluationResult",
            "get_client",
            "LabelledRagDataset",
            "LabelledRagDataset",
            "ProjectCreate",
            "EvalQuestionCreate",
            "ProjectCreate",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/relevancy.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "RelevancyEvaluator",
                "docstring": "Relenvancy evaluator.\n\nEvaluates the relevancy of retrieved contexts and response to a query.\nThis evaluator considers the query string, retrieved contexts, and response string.\n\nArgs:\n    raise_error(Optional[bool]):\n        Whether to raise an error if the response is invalid.\n        Defaults to False.\n    eval_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    refine_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for refinement."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "asyncio",
            "Any",
            "Optional",
            "Sequence",
            "Union",
            "BaseEvaluator",
            "EvaluationResult",
            "SummaryIndex",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "Document",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/base.py": {
        "functions": [
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "evaluate",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "contexts",
                        "default": null
                    }
                ],
                "docstring": "Run evaluation with query string, retrieved contexts,\nand generated response string.\n\nSubclasses can override this method to provide custom evaluation logic and\ntake in additional arguments."
            },
            {
                "name": "evaluate_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Run evaluation with query string and generated Response object.\n\nSubclasses can override this method to provide custom evaluation logic and\ntake in additional arguments."
            }
        ],
        "classes": [
            {
                "name": "EvaluationResult",
                "docstring": "Evaluation result.\n\nOutput of an BaseEvaluator."
            },
            {
                "name": "BaseEvaluator",
                "docstring": "Base Evaluator class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Optional",
            "Sequence",
            "asyncio_run",
            "Response",
            "BaseModel",
            "Field",
            "PromptMixin",
            "PromptMixinType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/notebook_utils.py": {
        "functions": [
            {
                "name": "get_retrieval_results_df",
                "parameters": [
                    {
                        "name": "names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "results_arr",
                        "default": null
                    },
                    {
                        "name": "metric_keys",
                        "default": null
                    }
                ],
                "docstring": "Display retrieval results."
            },
            {
                "name": "get_eval_results_df",
                "parameters": [
                    {
                        "name": "names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "results_arr",
                        "default": null
                    },
                    {
                        "name": "metric",
                        "default": null
                    }
                ],
                "docstring": "Organizes EvaluationResults into a deep dataframe and computes the mean\nscore.\n\nresult:\n    result_df: pd.DataFrame representing all the evaluation results\n    mean_df: pd.DataFrame of average scores groupby names"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "defaultdict",
            "Any",
            "List",
            "Optional",
            "Tuple",
            "EvaluationResult",
            "RetrievalEvalResult",
            "pandas",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_pack/download.py": {
        "functions": [
            {
                "name": "download_llama_pack",
                "parameters": [
                    {
                        "name": "llama_pack_class",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "download_dir",
                        "default": "Name(id='LLAMA_PACKS_CONTENTS_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_pack_url",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": null
                    }
                ],
                "docstring": "Download a single LlamaPack PyPi Package.\n\nArgs:\n    llama_pack_class: The name of the LlamaPack class you want to download,\n        such as `GmailOpenAIAgentPack`.\n    refresh_cache: If true, the local cache will be skipped and the\n        loader will be fetched directly from the remote repo.\n    download_dir: Custom dirpath to download the pack into.\n\nReturns:\n    A Loader."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "Optional",
            "Type",
            "download_integration",
            "LLAMA_PACKS_CONTENTS_URL",
            "download_llama_pack_template",
            "track_download",
            "BaseLlamaPack"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_pack/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseLlamaPack",
            "download_llama_pack"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_pack/base.py": {
        "functions": [
            {
                "name": "get_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get modules."
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run."
            }
        ],
        "classes": [
            {
                "name": "BaseLlamaPack",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Dict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/condense_plus_context.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "context_refine_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "condense_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "skip_condense",
                        "default": null
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_refine_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "condense_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "skip_condense",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize a CondensePlusContextChatEngine from default parameters."
            },
            {
                "name": "_condense_question",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "latest_message",
                        "default": null
                    }
                ],
                "docstring": "Condense a conversation history and latest user message to a standalone question."
            },
            {
                "name": "_get_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Generate context information from a message."
            },
            {
                "name": "_get_response_synthesizer",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_run_c3",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "wrapped_gen",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CondensePlusContextChatEngine",
                "docstring": "Condensed Conversation & Context Chat Engine.\n\nFirst condense a conversation and latest user message to a standalone question\nThen build a context for the standalone question from a retriever,\nThen pass the context along with prompt and user message to LLM to generate a response."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "MessageRole",
            "AsyncStreamingResponse",
            "StreamingResponse",
            "CallbackManager",
            "trace_method",
            "AgentChatResponse",
            "BaseChatEngine",
            "StreamingAgentChatResponse",
            "ToolOutput",
            "BaseRetriever",
            "QueryBundle",
            "messages_to_history_str",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "BaseNodePostprocessor",
            "PromptTemplate",
            "CompactAndRefine",
            "NodeWithScore",
            "Settings",
            "TokenCounter",
            "get_prefix_messages_with_context",
            "get_response_synthesizer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/condense_question.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "condense_question_prompt",
                        "default": null
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "condense_question_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Name(id='ChatMemoryBuffer', ctx=Load())"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "memory_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Initialize a CondenseQuestionChatEngine from default parameters."
            },
            {
                "name": "_condense_question",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "last_message",
                        "default": null
                    }
                ],
                "docstring": "Generate standalone question from conversation context and last message."
            },
            {
                "name": "_get_tool_output_from_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            }
        ],
        "classes": [
            {
                "name": "CondenseQuestionChatEngine",
                "docstring": "Condense Question Chat Engine.\n\nFirst generate a standalone question from conversation context and last message,\nthen query the query engine for a response."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "Any",
            "List",
            "Optional",
            "Type",
            "BaseQueryEngine",
            "ChatMessage",
            "MessageRole",
            "RESPONSE_TYPE",
            "StreamingResponse",
            "AsyncStreamingResponse",
            "CallbackManager",
            "trace_method",
            "AgentChatResponse",
            "BaseChatEngine",
            "StreamingAgentChatResponse",
            "response_gen_from_query_engine",
            "aresponse_gen_from_query_engine",
            "messages_to_history_str",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "BasePromptTemplate",
            "PromptTemplate",
            "Settings",
            "ToolOutput",
            "Thread",
            "RetrieverQueryEngine",
            "RetrieverQueryEngine",
            "RetrieverQueryEngine",
            "RetrieverQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "CondensePlusContextChatEngine",
            "CondenseQuestionChatEngine",
            "ContextChatEngine",
            "SimpleChatEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/types.py": {
        "functions": [
            {
                "name": "is_function",
                "parameters": [
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Utility for ChatMessage responses from OpenAI models."
            },
            {
                "name": "set_source_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__post_init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "response_gen",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Used for fake streaming, i.e. with tool outputs."
            },
            {
                "name": "set_source_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__post_init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_ensure_async_setup",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "put_in_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "delta",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "aput_in_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "delta",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "write_response_to_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "on_stream_end_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "response_gen",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "print_response_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset conversation state."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": "Main chat interface."
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": "Stream chat interface."
            },
            {
                "name": "chat_repl",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Enter interactive chat REPL."
            },
            {
                "name": "streaming_chat_repl",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Enter interactive chat REPL with streaming responses."
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ChatResponseMode",
                "docstring": "Flag toggling waiting/streaming in `Agent._chat`."
            },
            {
                "name": "AgentChatResponse",
                "docstring": "Agent chat response."
            },
            {
                "name": "StreamingAgentChatResponse",
                "docstring": "Streaming chat response to user and writing to chat history."
            },
            {
                "name": "BaseChatEngine",
                "docstring": "Base Chat Engine."
            },
            {
                "name": "ChatMode",
                "docstring": "Chat Engine Modes."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "time",
            "ABC",
            "abstractmethod",
            "dataclass",
            "field",
            "Enum",
            "Queue",
            "Empty",
            "Event",
            "AsyncGenerator",
            "Callable",
            "Generator",
            "List",
            "Optional",
            "Union",
            "Dict",
            "Any",
            "ChatMessage",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "Response",
            "StreamingResponse",
            "BaseMemory",
            "NodeWithScore",
            "ToolOutput",
            "DispatcherSpanMixin",
            "StreamChatErrorEvent",
            "StreamChatEndEvent",
            "StreamChatStartEvent",
            "StreamChatDeltaReceivedEvent",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/context.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": null
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    },
                    {
                        "name": "context_template",
                        "default": null
                    },
                    {
                        "name": "context_refine_template",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_refine_template",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Initialize a ContextChatEngine from default parameters."
            },
            {
                "name": "_get_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Generate context information from a message."
            },
            {
                "name": "_get_response_synthesizer",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "prev_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "prev_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            },
            {
                "name": "wrapped_gen",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ContextChatEngine",
                "docstring": "Context Chat Engine.\n\nUses a retriever to retrieve a context, set the context in the system prompt,\nand then uses an LLM to generate a response, for a fluid chat experience."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Union",
            "BaseRetriever",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "MessageRole",
            "StreamingResponse",
            "AsyncStreamingResponse",
            "CallbackManager",
            "trace_method",
            "AgentChatResponse",
            "BaseChatEngine",
            "StreamingAgentChatResponse",
            "ToolOutput",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "BaseNodePostprocessor",
            "PromptTemplate",
            "CompactAndRefine",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "get_prefix_messages_with_context",
            "get_response_synthesizer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/utils.py": {
        "functions": [
            {
                "name": "get_prefix_messages_with_context",
                "parameters": [
                    {
                        "name": "context_template",
                        "default": null
                    },
                    {
                        "name": "system_prompt",
                        "default": null
                    },
                    {
                        "name": "prefix_messages",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "llm_metadata_system_role",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_response_synthesizer",
                "parameters": [
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "qa_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_messages",
                        "default": null
                    },
                    {
                        "name": "streaming",
                        "default": null
                    },
                    {
                        "name": "qa_function_mappings",
                        "default": null
                    },
                    {
                        "name": "refine_function_mappings",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "response_gen_from_query_engine",
                "parameters": [
                    {
                        "name": "response_gen",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Callable",
            "Dict",
            "List",
            "Optional",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseGen",
            "ChatResponseAsyncGen",
            "MessageRole",
            "LLM",
            "ChatPromptTemplate",
            "PromptTemplate",
            "CompactAndRefine",
            "CallbackManager",
            "TokenGen",
            "TokenAsyncGen"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/chat_engine/simple.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "prefix_messages",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Name(id='ChatMemoryBuffer', ctx=Load())"
                    },
                    {
                        "name": "memory_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": "Initialize a SimpleChatEngine from default parameters."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get chat history."
            }
        ],
        "classes": [
            {
                "name": "SimpleChatEngine",
                "docstring": "Simple Chat Engine.\n\nHave a conversation with the LLM.\nThis does not make use of a knowledge base."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "List",
            "Optional",
            "Type",
            "ChatMessage",
            "CallbackManager",
            "trace_method",
            "AgentChatResponse",
            "BaseChatEngine",
            "StreamingAgentChatResponse",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "Settings",
            "Thread"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/string_iterable.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": "Load the data."
            }
        ],
        "classes": [
            {
                "name": "StringIterableReader",
                "docstring": "String Iterable Reader.\n\nGets a list of documents, given an iterable (e.g. list) of strings.\n\nExample:\n    .. code-block:: python\n\n        from llama_index.core.legacy import StringIterableReader, TreeIndex\n\n        documents = StringIterableReader().load_data(\n            texts=[\"I went to the store\", \"I bought an apple\"]\n        )\n        index = TreeIndex.from_documents(documents)\n        query_engine = index.as_query_engine()\n        query_engine.query(\"what did I buy?\")\n\n        # response should be something like \"You bought an apple.\""
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "BasePydanticReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/loading.py": {
        "functions": [
            {
                "name": "load_reader",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Type",
            "BasePydanticReader",
            "StringIterableReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/download.py": {
        "functions": [
            {
                "name": "download_loader",
                "parameters": [
                    {
                        "name": "loader_class",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "loader_hub_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_cache",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_gpt_index_import",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "custom_path",
                        "default": null
                    }
                ],
                "docstring": "Download a single loader from the Loader Hub.\n\nArgs:\n    loader_class: The name of the loader class you want to download,\n        such as `SimpleWebPageReader`.\n    refresh_cache: If true, the local cache will be skipped and the\n        loader will be fetched directly from the remote repo.\n    use_gpt_index_import: If true, the loader files will use\n        llama_index as the base dependency. By default (False),\n        the loader files use llama_index as the base dependency.\n        NOTE: this is a temporary workaround while we fully migrate all usages\n        to llama_index.\n    custom_path: Custom dirpath to download loader into.\n\nReturns:\n    A Loader."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "Optional",
            "Type",
            "deprecated",
            "download_integration",
            "BaseReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ReaderConfig",
            "download_loader",
            "SimpleDirectoryReader",
            "FileSystemReaderMixin",
            "StringIterableReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/json.py": {
        "functions": [
            {
                "name": "_depth_first_yield",
                "parameters": [
                    {
                        "name": "json_data",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "levels_back",
                        "default": null
                    },
                    {
                        "name": "collapse_length",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    },
                    {
                        "name": "ensure_ascii",
                        "default": null
                    }
                ],
                "docstring": "Do depth first yield of all of the leaf nodes of a JSON.\n\nCombines keys in the JSON tree using spaces.\n\nIf levels_back is set to 0, prints all levels.\nIf collapse_length is not None and the json_data is <= that number\n  of characters, then we collapse it into one line."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "levels_back",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "collapse_length",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ensure_ascii",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_jsonl",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "clean_json",
                        "default": null
                    }
                ],
                "docstring": "Initialize with arguments."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "input_file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Load data from the input file."
            }
        ],
        "classes": [
            {
                "name": "JSONReader",
                "docstring": "JSON reader.\n\nReads JSON documents with options to help suss out relationships between nodes.\n\nArgs:\n    levels_back (int): the number of levels to go back in the JSON tree, 0\n      if you want all levels. If levels_back is None, then we just format the\n      JSON and make each line an embedding\n\n    collapse_length (int): the maximum number of characters a JSON fragment\n      would be collapsed in the output (levels_back needs to be not None)\n      ex: if collapse_length = 10, and\n      input is {a: [1, 2, 3], b: {\"hello\": \"world\", \"foo\": \"bar\"}}\n      then a would be collapsed into one line, while b would not.\n      Recommend starting around 100 and then adjusting from there.\n\n    is_jsonl (Optional[bool]): If True, indicates that the file is in JSONL format.\n    Defaults to False.\n\n    clean_json (Optional[bool]): If True, lines containing only JSON structure are removed.\n    This removes lines that are not as useful. If False, no lines are removed and the document maintains a valid JSON object structure.\n    If levels_back is set the json is not cleaned and this option is ignored.\n    Defaults to True."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "re",
            "Any",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "BaseReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/base.py": {
        "functions": [
            {
                "name": "lazy_load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Load data from the input directory lazily."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Load data from the input directory."
            },
            {
                "name": "load_langchain_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Load data in LangChain document format."
            },
            {
                "name": "list_resources",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "List of identifiers for the specific type of resources available in the reader.\n\nReturns:\n    List[str]: List of identifiers for the specific type of resources available in the reader."
            },
            {
                "name": "get_permission_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "resource_id",
                        "default": null
                    }
                ],
                "docstring": "Get a dictionary of information about the permissions of a specific resource."
            },
            {
                "name": "get_resource_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "resource_id",
                        "default": null
                    }
                ],
                "docstring": "Get a dictionary of information about a specific resource.\n\nArgs:\n    resource (str): The resource identifier.\n\nReturns:\n    Dict: A dictionary of information about the resource."
            },
            {
                "name": "list_resources_with_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a dictionary of information about all resources.\n\nReturns:\n    Dict[str, Dict]: A dictionary of information about all resources."
            },
            {
                "name": "load_resource",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "resource_id",
                        "default": null
                    }
                ],
                "docstring": "Load data from a specific resource.\n\nArgs:\n    resource (str): The resource identifier.\n\nReturns:\n    List[Document]: A list of documents loaded from the resource."
            },
            {
                "name": "load_resources",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "resource_ids",
                        "default": null
                    }
                ],
                "docstring": "Similar to load_data, but only for specific resources.\n\nArgs:\n    resource_ids (List[str]): List of resource identifiers.\n\nReturns:\n    List[Document]: A list of documents loaded from the resources."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get the name identifier of the class."
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert the class to a dictionary."
            },
            {
                "name": "read",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Call the loader with the given arguments."
            }
        ],
        "classes": [
            {
                "name": "BaseReader",
                "docstring": "Utilities for loading data from a directory."
            },
            {
                "name": "BasePydanticReader",
                "docstring": "Serialiable Data Loader with Pydantic."
            },
            {
                "name": "ResourcesReaderMixin",
                "docstring": "Mixin for readers that provide access to different types of resources.\n\nResources refer to specific data entities that can be accessed by the reader.\nExamples of resources include files for a filesystem reader, channel IDs for a Slack reader, or pages for a Notion reader."
            },
            {
                "name": "ReaderConfig",
                "docstring": "Represents a reader and it's input arguments."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "Iterable",
            "List",
            "ConfigDict",
            "Field",
            "BaseComponent",
            "Document",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/question_gen/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LLMQuestionGenerator",
            "SubQuestionOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/question_gen/output_parser.py": {
        "functions": [
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt_template",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SubQuestionOutputParser",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "StructuredOutput",
            "parse_json_markdown",
            "SubQuestion",
            "BaseOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/question_gen/types.py": {
        "functions": [
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "generate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SubQuestion",
                "docstring": null
            },
            {
                "name": "SubQuestionList",
                "docstring": "A pydantic object wrapping a list of sub-questions.\n\nThis is mostly used to make getting a json schema easier."
            },
            {
                "name": "BaseQuestionGenerator",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "List",
            "Sequence",
            "BaseModel",
            "DispatcherSpanMixin",
            "PromptMixin",
            "PromptMixinType",
            "QueryBundle",
            "ToolMetadata"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/question_gen/prompts.py": {
        "functions": [
            {
                "name": "build_tools_text",
                "parameters": [
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Sequence",
            "PromptTemplate",
            "SubQuestion",
            "ToolMetadata"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/question_gen/llm_generators.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "generate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LLMQuestionGenerator",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Sequence",
            "cast",
            "LLM",
            "StructuredOutput",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "PromptType",
            "SubQuestionOutputParser",
            "DEFAULT_SUB_QUESTION_PROMPT_TMPL",
            "build_tools_text",
            "BaseQuestionGenerator",
            "SubQuestion",
            "QueryBundle",
            "Settings",
            "ToolMetadata",
            "BaseOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/loading.py": {
        "functions": [
            {
                "name": "load_llm",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Load LLM by name."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Type",
            "LLM",
            "MockLLM",
            "OpenAI",
            "AzureOpenAI",
            "HuggingFaceInferenceAPI"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/custom.py": {
        "functions": [
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CustomLLM",
                "docstring": "Simple abstract base class for custom LLMs.\n\nSubclasses must implement the `__init__`, `_complete`,\n    `_stream_complete`, and `metadata` methods."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Sequence",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "llm_chat_callback",
            "llm_completion_callback",
            "completion_response_to_chat_response",
            "stream_completion_response_to_chat_response",
            "LLM"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/structured_llm.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Chat endpoint for LLM."
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": "Stream completion endpoint for LLM."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return query component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "StructuredLLM",
                "docstring": "A structured LLM takes in an inner LLM along with a designated output class,\nand all methods will return outputs in that structure."
            },
            {
                "name": "StructuredLLMComponent",
                "docstring": "Structured LLM component.\n\nWraps an existing LLM component, directly returns structured output."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Type",
            "Sequence",
            "Dict",
            "ChatMessage",
            "MessageRole",
            "LLM",
            "BaseLLMComponent",
            "LLMChatComponent",
            "LLMCompleteComponent",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseGen",
            "LLMMetadata",
            "MessageRole",
            "BaseModel",
            "Field",
            "SerializeAsAny",
            "ConfigDict",
            "LLMMetadata",
            "llm_chat_callback",
            "llm_completion_callback",
            "ChatPromptTemplate",
            "achat_to_completion_decorator",
            "chat_to_completion_decorator",
            "InputKeys",
            "OutputKeys",
            "QueryComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "ImageBlock",
            "LLMMetadata",
            "MessageRole",
            "TextBlock",
            "CustomLLM",
            "LLM",
            "MockLLM"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/llm.py": {
        "functions": [
            {
                "name": "stream_completion_response_to_tokens",
                "parameters": [
                    {
                        "name": "completion_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert a stream completion response to a stream of tokens."
            },
            {
                "name": "stream_chat_response_to_tokens",
                "parameters": [
                    {
                        "name": "chat_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert a stream completion response to a stream of tokens."
            },
            {
                "name": "default_completion_to_prompt",
                "parameters": [
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "ignore_non_dict_arguments",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "v",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "set_messages_to_prompt",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "messages_to_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_completion_to_prompt",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "completion_to_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "check_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_log_template_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_extend_prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "formatted_prompt",
                        "default": null
                    }
                ],
                "docstring": "Add system and query wrapper prompts to base prompt."
            },
            {
                "name": "_extend_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Add system prompt to chat message list."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return query component."
            },
            {
                "name": "structured_predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Structured predict.\n\nArgs:\n    output_cls (BaseModel):\n        Output class to use for structured prediction.\n    prompt (PromptTemplate):\n        Prompt template to use for structured prediction.\n    llm_kwargs (Optional[Dict[str, Any]]):\n        Arguments that are passed down to the LLM invoked by the program.\n    prompt_args (Any):\n        Additional arguments to format the prompt with.\n\nReturns:\n    BaseModel: The structured prediction output.\n\nExamples:\n    ```python\n    from pydantic import BaseModel\n\n    class Test(BaseModel):\n        \\\"\\\"\\\"My test class.\\\"\\\"\\\"\n        name: str\n\n    from llama_index.core.prompts import PromptTemplate\n\n    prompt = PromptTemplate(\"Please predict a Test with a random name related to {topic}.\")\n    output = llm.structured_predict(Test, prompt, topic=\"cats\")\n    print(output.name)\n    ```"
            },
            {
                "name": "stream_structured_predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Stream Structured predict.\n\nArgs:\n    output_cls (BaseModel):\n        Output class to use for structured prediction.\n    prompt (PromptTemplate):\n        Prompt template to use for structured prediction.\n    llm_kwargs (Optional[Dict[str, Any]]):\n        Arguments that are passed down to the LLM invoked by the program.\n    prompt_args (Any):\n        Additional arguments to format the prompt with.\n\nReturns:\n    Generator: A generator returning partial copies of the model or list of models.\n\nExamples:\n    ```python\n    from pydantic import BaseModel\n\n    class Test(BaseModel):\n        \\\"\\\"\\\"My test class.\\\"\\\"\\\"\n        name: str\n\n    from llama_index.core.prompts import PromptTemplate\n\n    prompt = PromptTemplate(\"Please predict a Test with a random name related to {topic}.\")\n    stream_output = llm.stream_structured_predict(Test, prompt, topic=\"cats\")\n    for partial_output in stream_output:\n        # stream partial outputs until completion\n        print(partial_output.name)\n    ```"
            },
            {
                "name": "predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Predict for a given prompt.\n\nArgs:\n    prompt (BasePromptTemplate):\n        The prompt to use for prediction.\n    prompt_args (Any):\n        Additional arguments to format the prompt with.\n\nReturns:\n    str: The prediction output.\n\nExamples:\n    ```python\n    from llama_index.core.prompts import PromptTemplate\n\n    prompt = PromptTemplate(\"Please write a random name related to {topic}.\")\n    output = llm.predict(prompt, topic=\"cats\")\n    print(output)\n    ```"
            },
            {
                "name": "stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Stream predict for a given prompt.\n\nArgs:\n    prompt (BasePromptTemplate):\n        The prompt to use for prediction.\n    prompt_args (Any):\n        Additional arguments to format the prompt with.\n\nYields:\n    str: Each streamed token.\n\nExamples:\n    ```python\n    from llama_index.core.prompts import PromptTemplate\n\n    prompt = PromptTemplate(\"Please write a random name related to {topic}.\")\n    gen = llm.stream_predict(prompt, topic=\"cats\")\n    for token in gen:\n        print(token, end=\"\", flush=True)\n    ```"
            },
            {
                "name": "predict_and_call",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Predict and call the tool.\n\nBy default uses a ReAct agent to do tool calling (through text prompting),\nbut function calling LLMs will implement this differently."
            },
            {
                "name": "as_structured_llm",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    }
                ],
                "docstring": "Return a structured LLM around a given object."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "ToolSelection",
                "docstring": "Tool selection."
            },
            {
                "name": "MessagesToPromptType",
                "docstring": null
            },
            {
                "name": "CompletionToPromptType",
                "docstring": null
            },
            {
                "name": "LLM",
                "docstring": "The LLM class is the main class for interacting with language models.\n\nAttributes:\n    system_prompt (Optional[str]):\n        System prompt for LLM calls.\n    messages_to_prompt (Callable):\n        Function to convert a list of messages to an LLM prompt.\n    completion_to_prompt (Callable):\n        Function to convert a completion to an LLM prompt.\n    output_parser (Optional[BaseOutputParser]):\n        Output parser to parse, validate, and correct errors programmatically.\n    pydantic_program_mode (PydanticProgramMode):\n        Pydantic program mode to use for structured prediction."
            },
            {
                "name": "BaseLLMComponent",
                "docstring": "Base LLM component."
            },
            {
                "name": "LLMCompleteComponent",
                "docstring": "LLM completion component."
            },
            {
                "name": "LLMChatComponent",
                "docstring": "LLM chat component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ChainMap",
            "Any",
            "Dict",
            "List",
            "Generator",
            "AsyncGenerator",
            "Optional",
            "Protocol",
            "Sequence",
            "Union",
            "get_args",
            "runtime_checkable",
            "TYPE_CHECKING",
            "Type",
            "Annotated",
            "ChatMessage",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "MessageRole",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "StringableInput",
            "validate_and_convert_stringable",
            "BaseModel",
            "WithJsonSchema",
            "Field",
            "field_validator",
            "model_validator",
            "ConfigDict",
            "ValidationError",
            "CBEventType",
            "EventPayload",
            "BaseLLM",
            "messages_to_prompt",
            "prompt_to_messages",
            "BasePromptTemplate",
            "PromptTemplate",
            "BaseOutputParser",
            "PydanticProgramMode",
            "TokenAsyncGen",
            "TokenGen",
            "Model",
            "LLMPredictEndEvent",
            "LLMPredictStartEvent",
            "LLMStructuredPredictInProgressEvent",
            "LLMStructuredPredictEndEvent",
            "LLMStructuredPredictStartEvent",
            "llama_index.core.instrumentation",
            "ChatMessage",
            "AgentChatResponse",
            "BaseTool",
            "StructuredLLM",
            "get_program_for_llm",
            "get_program_for_llm",
            "get_program_for_llm",
            "ReActAgentWorker",
            "Task",
            "AgentChatResponse",
            "ChatMemoryBuffer",
            "ReActAgentWorker",
            "Task",
            "AgentChatResponse",
            "ChatMemoryBuffer",
            "StructuredLLM",
            "get_program_for_llm"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/function_calling.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat_with_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Chat with function calling."
            },
            {
                "name": "stream_chat_with_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Stream chat with function calling."
            },
            {
                "name": "_prepare_chat_with_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Prepare the arguments needed to let the LLM chat with tools."
            },
            {
                "name": "_validate_chat_with_tools_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Validate the response from chat_with_tools."
            },
            {
                "name": "get_tool_calls_from_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "error_on_no_tool_call",
                        "default": null
                    }
                ],
                "docstring": "Predict and call the tool."
            },
            {
                "name": "predict_and_call",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    },
                    {
                        "name": "error_on_no_tool_call",
                        "default": null
                    }
                ],
                "docstring": "Predict and call the tool."
            }
        ],
        "classes": [
            {
                "name": "FunctionCallingLLM",
                "docstring": "Function calling LLMs are LLMs that support function calling.\nThey support an expanded range of capabilities."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "abstractmethod",
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Union",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "LLM",
            "ToolSelection",
            "AgentChatResponse",
            "BaseTool",
            "AgentChatResponse",
            "call_tool_with_selection",
            "AgentChatResponse",
            "acall_tool_with_selection"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/utils.py": {
        "functions": [
            {
                "name": "resolve_llm",
                "parameters": [
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Resolve LLM from string or LLM instance."
            },
            {
                "name": "parse_partial_json",
                "parameters": [
                    {
                        "name": "s",
                        "default": null
                    }
                ],
                "docstring": "Parse an incomplete JSON string into a valid python dictionary.\n\nNOTE: This is adapted from\nhttps://github.com/OpenInterpreter/open-interpreter/blob/5b6080fae1f8c68938a1e4fa8667e3744084ee21/interpreter/utils/parse_partial_json.py"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Optional",
            "Union",
            "Dict",
            "json",
            "os",
            "CallbackManager",
            "LLM",
            "MockLLM",
            "BaseLanguageModel",
            "Settings",
            "BaseLanguageModel",
            "OpenAI",
            "validate_openai_api_key",
            "completion_to_prompt",
            "messages_to_prompt",
            "LlamaCPP",
            "LangChainLLM"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/callbacks.py": {
        "functions": [
            {
                "name": "llm_chat_callback",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "llm_completion_callback",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "wrap",
                "parameters": [
                    {
                        "name": "f",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrap",
                "parameters": [
                    {
                        "name": "f",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper_logic",
                "parameters": [
                    {
                        "name": "_self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapped_llm_chat",
                "parameters": [
                    {
                        "name": "_self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "dummy_wrapper",
                "parameters": [
                    {
                        "name": "_self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper_logic",
                "parameters": [
                    {
                        "name": "_self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "extract_prompt",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "wrapped_llm_predict",
                "parameters": [
                    {
                        "name": "_self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "dummy_wrapper",
                "parameters": [
                    {
                        "name": "_self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapped_gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "wrapped_gen",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "contextmanager",
            "Any",
            "AsyncGenerator",
            "Callable",
            "Generator",
            "Sequence",
            "cast",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "get_dispatcher",
            "ExceptionEvent",
            "active_span_id",
            "LLMCompletionEndEvent",
            "LLMCompletionStartEvent",
            "LLMChatEndEvent",
            "LLMChatStartEvent",
            "LLMChatInProgressEvent",
            "LLMCompletionInProgressEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/chatml_utils.py": {
        "functions": [
            {
                "name": "messages_to_prompt",
                "parameters": [
                    {
                        "name": "messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "completion_to_prompt",
                "parameters": [
                    {
                        "name": "completion",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Sequence",
            "ChatMessage",
            "MessageRole"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llms/mock.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_tokens",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "messages_to_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "completion_to_prompt",
                        "default": "Attribute(value=Name(id='PydanticProgramMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "pydantic_program_mode",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_generate_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "length",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "gen_prompt",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "gen_response",
                "parameters": [
                    {
                        "name": "max_tokens",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MockLLM",
                "docstring": null
            },
            {
                "name": "MockLLMWithNonyieldingChatStream",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "Sequence",
            "ChatMessage",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseGen",
            "LLMMetadata",
            "CallbackManager",
            "llm_chat_callback",
            "llm_completion_callback",
            "CustomLLM",
            "MessagesToPromptType",
            "CompletionToPromptType",
            "PydanticProgramMode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/text_splitter/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "CodeSplitter",
            "SentenceSplitter",
            "TokenTextSplitter"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/custom.py": {
        "functions": [
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "custom_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Run a custom query."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CustomQueryEngine",
                "docstring": "Custom query engine.\n\nSubclasses can define additional attributes as Pydantic fields.\nSubclasses must implement the `custom_query` method, which takes a query string\nand returns either a Response object or a string as output.\n\nThey can optionally implement the `acustom_query` method for async support."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Union",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "Response",
            "BaseModel",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "PromptMixinType",
            "QueryBundle",
            "QueryType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/knowledge_graph_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph_query_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph_response_answer_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh_schema",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "generate_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Generate a Graph Store Query from a query bundle."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store."
            }
        ],
        "classes": [
            {
                "name": "KnowledgeGraphQueryEngine",
                "docstring": "Knowledge graph query engine.\n\nQuery engine to call a knowledge graph.\n\nArgs:\n    storage_context (Optional[StorageContext]): A storage context to use.\n    refresh_schema (bool): Whether to refresh the schema.\n    verbose (bool): Whether to print intermediate results.\n    response_synthesizer (Optional[BaseSynthesizer]):\n        A BaseSynthesizer object.\n    **kwargs: Additional keyword arguments."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "deprecated",
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "CBEventType",
            "EventPayload",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptType",
            "PromptDictType",
            "PromptMixinType",
            "BaseSynthesizer",
            "get_response_synthesizer",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings",
            "StorageContext",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/citation_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_CITATION_CHUNK_SIZE', ctx=Load())"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Name(id='DEFAULT_CITATION_CHUNK_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "citation_chunk_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "citation_chunk_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_splitter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_args",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_CITATION_CHUNK_SIZE', ctx=Load())"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Name(id='DEFAULT_CITATION_CHUNK_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "citation_chunk_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "citation_chunk_overlap",
                        "default": "Name(id='CITATION_QA_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "text_splitter",
                        "default": "Name(id='CITATION_REFINE_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "citation_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "citation_refine_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Attribute(value=Name(id='ResponseMode', ctx=Load()), attr='COMPACT', ctx=Load())"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "response_mode",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "streaming",
                        "default": null
                    },
                    {
                        "name": "metadata_mode",
                        "default": null
                    }
                ],
                "docstring": "Initialize a CitationQueryEngine object.\".\n\nArgs:\n    index: (BastGPTIndex): index to use for querying\n    llm: (Optional[LLM]): LLM object to use for response generation.\n    citation_chunk_size (int):\n        Size of citation chunks, default=512. Useful for controlling\n        granularity of sources.\n    citation_chunk_overlap (int): Overlap of citation nodes, default=20.\n    text_splitter (Optional[TextSplitter]):\n        A text splitter for creating citation source nodes. Default is\n        a SentenceSplitter.\n    citation_qa_template (BasePromptTemplate): Template for initial citation QA\n    citation_refine_template (BasePromptTemplate):\n        Template for citation refinement.\n    retriever (BaseRetriever): A retriever object.\n    node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n        node postprocessors.\n    verbose (bool): Whether to print out debug info.\n    response_mode (ResponseMode): A ResponseMode object.\n    use_async (bool): Whether to use async.\n    streaming (bool): Whether to use streaming.\n    optimizer (Optional[BaseTokenUsageOptimizer]): A BaseTokenUsageOptimizer\n        object."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_create_citation_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Modify retrieved nodes to be granular sources."
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the retriever object."
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            }
        ],
        "classes": [
            {
                "name": "CitationQueryEngine",
                "docstring": "Citation query engine.\n\nArgs:\n    retriever (BaseRetriever): A retriever object.\n    response_synthesizer (Optional[BaseSynthesizer]):\n        A BaseSynthesizer object.\n    citation_chunk_size (int):\n        Size of citation chunks, default=512. Useful for controlling\n        granularity of sources.\n    citation_chunk_overlap (int): Overlap of citation nodes, default=20.\n    text_splitter (Optional[TextSplitter]):\n        A text splitter for creating citation source nodes. Default is\n        a SentenceSplitter.\n    callback_manager (Optional[CallbackManager]): A callback manager.\n    metadata_mode (MetadataMode): A MetadataMode object that controls how\n        metadata is included in the citation prompt."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Sequence",
            "BaseQueryEngine",
            "BaseRetriever",
            "RESPONSE_TYPE",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "BaseGPTIndex",
            "LLM",
            "SentenceSplitter",
            "TextSplitter",
            "BaseNodePostprocessor",
            "PromptTemplate",
            "BasePromptTemplate",
            "PromptMixinType",
            "BaseSynthesizer",
            "ResponseMode",
            "get_response_synthesizer",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/sql_join_query_engine.py": {
        "functions": [
            {
                "name": "_default_check_stop",
                "parameters": [
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Default check stop function."
            },
            {
                "name": "_format_sql_query",
                "parameters": [
                    {
                        "name": "sql_query",
                        "default": null
                    }
                ],
                "docstring": "Format SQL query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_augment_transform_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "check_stop_parser",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "check_stop",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Check if query indicates stop."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_query_tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "other_query_tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "sql_join_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_augment_query_transform",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "use_sql_join_synthesis",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_query_sql_other",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Query SQL database + other query engine in sequence."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Query and get response."
            }
        ],
        "classes": [
            {
                "name": "SQLAugmentQueryTransform",
                "docstring": "SQL Augment Query Transform.\n\nThis query transform will transform the query into a more specific query\nafter augmenting with SQL results.\n\nArgs:\n    llm (LLM): LLM to use for query transformation.\n    sql_augment_transform_prompt (BasePromptTemplate): PromptTemplate to use\n        for query transformation.\n    check_stop_parser (Optional[Callable[[str], bool]]): Check stop function."
            },
            {
                "name": "SQLJoinQueryEngine",
                "docstring": "SQL Join Query Engine.\n\nThis query engine can \"Join\" a SQL database results\nwith another query engine.\nIt can decide it needs to query the SQL database or the other query engine.\nIf it decides to query the SQL database, it will first query the SQL database,\nwhether to augment information with retrieved results from the other query engine.\n\nArgs:\n    sql_query_tool (QueryEngineTool): Query engine tool for SQL database.\n        other_query_tool (QueryEngineTool): Other query engine tool.\n    selector (Optional[Union[LLMSingleSelector, PydanticSingleSelector]]):\n        Selector to use.\n    sql_join_synthesis_prompt (Optional[BasePromptTemplate]):\n        PromptTemplate to use for SQL join synthesis.\n    sql_augment_query_transform (Optional[SQLAugmentQueryTransform]): Query\n        transform to use for SQL augmentation.\n    use_sql_join_synthesis (bool): Whether to use SQL join synthesis.\n    callback_manager (Optional[CallbackManager]): Callback manager to use.\n    verbose (bool): Whether to print intermediate results."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Callable",
            "Dict",
            "Optional",
            "Union",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "Response",
            "StreamingResponse",
            "CallbackManager",
            "BaseQueryTransform",
            "BaseSQLTableQueryEngine",
            "NLSQLTableQueryEngine",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "PromptMixinType",
            "QueryBundle",
            "LLMSingleSelector",
            "PydanticSingleSelector",
            "get_selector_from_llm",
            "Settings",
            "QueryEngineTool",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/retriever_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "from_args",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": "Attribute(value=Name(id='ResponseMode', ctx=Load()), attr='COMPACT', ctx=Load())"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summary_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "simple_template",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": null
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": "Initialize a RetrieverQueryEngine object.\".\n\nArgs:\n    retriever (BaseRetriever): A retriever object.\n    llm (Optional[LLM]): An instance of an LLM.\n    response_synthesizer (Optional[BaseSynthesizer]): An instance of a response\n        synthesizer.\n    node_postprocessors (Optional[List[BaseNodePostprocessor]]): A list of\n        node postprocessors.\n    callback_manager (Optional[CallbackManager]): A callback manager.\n    response_mode (ResponseMode): A ResponseMode object.\n    text_qa_template (Optional[BasePromptTemplate]): A BasePromptTemplate\n        object.\n    refine_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n    summary_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n    simple_template (Optional[BasePromptTemplate]): A BasePromptTemplate object.\n    output_cls (Optional[Type[BaseModel]]): The pydantic model to pass to the\n        response synthesizer.\n    use_async (bool): Whether to use async.\n    streaming (bool): Whether to use streaming."
            },
            {
                "name": "_apply_node_postprocessors",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "with_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retriever",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the retriever object."
            }
        ],
        "classes": [
            {
                "name": "RetrieverQueryEngine",
                "docstring": "Retriever query engine.\n\nArgs:\n    retriever (BaseRetriever): A retriever object.\n    response_synthesizer (Optional[BaseSynthesizer]): A BaseSynthesizer\n        object.\n    callback_manager (Optional[CallbackManager]): A callback manager."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "BaseQueryEngine",
            "BaseRetriever",
            "RESPONSE_TYPE",
            "BaseModel",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "LLM",
            "BaseNodePostprocessor",
            "BasePromptTemplate",
            "PromptMixinType",
            "BaseSynthesizer",
            "ResponseMode",
            "get_response_synthesizer",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/multi_modal.py": {
        "functions": [
            {
                "name": "_get_image_and_text_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_apply_node_postprocessors",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_response_with_images",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt_str",
                        "default": null
                    },
                    {
                        "name": "image_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "image_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "image_path",
                        "default": null
                    },
                    {
                        "name": "prompt_str",
                        "default": null
                    }
                ],
                "docstring": "Answer a image query."
            },
            {
                "name": "retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the retriever object."
            }
        ],
        "classes": [
            {
                "name": "SimpleMultiModalQueryEngine",
                "docstring": "Simple Multi Modal Retriever query engine.\n\nAssumes that retrieved text context fits within context window of LLM, along with images.\n\nArgs:\n    retriever (MultiModalVectorIndexRetriever): A retriever object.\n    multi_modal_llm (Optional[MultiModalLLM]): MultiModalLLM Models.\n    text_qa_template (Optional[BasePromptTemplate]): Text QA Prompt Template.\n    image_qa_template (Optional[BasePromptTemplate]): Image QA Prompt Template.\n    node_postprocessors (Optional[List[BaseNodePostprocessor]]): Node Postprocessors.\n    callback_manager (Optional[CallbackManager]): A callback manager."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "RESPONSE_TYPE",
            "Response",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "BaseQueryEngine",
            "QueryBundle",
            "QueryType",
            "MultiModalLLM",
            "BaseNodePostprocessor",
            "BasePromptTemplate",
            "DEFAULT_TEXT_QA_PROMPT",
            "PromptMixinType",
            "ImageNode",
            "NodeWithScore",
            "MetadataMode",
            "MultiModalVectorIndexRetriever",
            "OpenAIMultiModal"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/retry_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "evaluator",
                        "default": null
                    },
                    {
                        "name": "max_retries",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "guideline_evaluator",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "resynthesize_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_retries",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "query_transformer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            }
        ],
        "classes": [
            {
                "name": "RetryQueryEngine",
                "docstring": "Does retry on query engine if it fails evaluation.\n\nArgs:\n    query_engine (BaseQueryEngine): A query engine object\n    evaluator (BaseEvaluator): An evaluator object\n    max_retries (int): Maximum number of retries\n    callback_manager (Optional[CallbackManager]): A callback manager object"
            },
            {
                "name": "RetryGuidelineQueryEngine",
                "docstring": "Does retry with evaluator feedback\nif query engine fails evaluation.\n\nArgs:\n    query_engine (BaseQueryEngine): A query engine object\n    guideline_evaluator (GuidelineEvaluator): A guideline evaluator object\n    resynthesize_query (bool): Whether to resynthesize query\n    max_retries (int): Maximum number of retries\n    callback_manager (Optional[CallbackManager]): A callback manager object"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Optional",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "Response",
            "AsyncStreamingResponse",
            "CallbackManager",
            "BaseEvaluator",
            "GuidelineEvaluator",
            "FeedbackQueryTransformation",
            "PromptMixinType",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/router_query_engine.py": {
        "functions": [
            {
                "name": "combine_responses",
                "parameters": [
                    {
                        "name": "summarizer",
                        "default": null
                    },
                    {
                        "name": "responses",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Combine multiple response from sub-engines."
            },
            {
                "name": "default_node_to_metadata_fn",
                "parameters": [
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Default node to metadata function.\n\nWe use the node's text as the Tool description."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine_tools",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "summarizer",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine_tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "summarizer",
                        "default": null
                    },
                    {
                        "name": "select_multi",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": null
                    },
                    {
                        "name": "node_to_query_engine_fn",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "summarizer",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RouterQueryEngine",
                "docstring": "Router query engine.\n\nSelects one out of several candidate query engines to execute a query.\n\nArgs:\n    selector (BaseSelector): A selector that chooses one out of many options based\n        on each candidate's metadata and query.\n    query_engine_tools (Sequence[QueryEngineTool]): A sequence of candidate\n        query engines. They must be wrapped as tools to expose metadata to\n        the selector.\n    summarizer (Optional[TreeSummarize]): Tree summarizer to summarize sub-results."
            },
            {
                "name": "RetrieverRouterQueryEngine",
                "docstring": "Retriever-based router query engine.\n\nNOTE: this is deprecated, please use our new ToolRetrieverRouterQueryEngine\n\nUse a retriever to select a set of Nodes. Each node will be converted\ninto a ToolMetadata object, and also used to retrieve a query engine, to form\na QueryEngineTool.\n\nNOTE: this is a beta feature. We are figuring out the right interface\nbetween the retriever and query engine.\n\nArgs:\n    selector (BaseSelector): A selector that chooses one out of many options based\n        on each candidate's metadata and query.\n    query_engine_tools (Sequence[QueryEngineTool]): A sequence of candidate\n        query engines. They must be wrapped as tools to expose metadata to\n        the selector.\n    callback_manager (Optional[CallbackManager]): A callback manager."
            },
            {
                "name": "ToolRetrieverRouterQueryEngine",
                "docstring": "Tool Retriever router query engine.\n\nSelects a set of candidate query engines to execute a query.\n\nArgs:\n    retriever (ObjectRetriever): A retriever that retrieves a set of\n        query engine tools.\n    summarizer (Optional[TreeSummarize]): Tree summarizer to summarize sub-results."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Callable",
            "Generator",
            "List",
            "Optional",
            "Sequence",
            "Any",
            "run_async_tasks",
            "BaseQueryEngine",
            "BaseRetriever",
            "BaseSelector",
            "RESPONSE_TYPE",
            "PydanticResponse",
            "Response",
            "StreamingResponse",
            "AsyncStreamingResponse",
            "BaseModel",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "LLM",
            "ObjectRetriever",
            "DEFAULT_TREE_SUMMARIZE_PROMPT_SEL",
            "PromptMixinType",
            "TreeSummarize",
            "BaseNode",
            "QueryBundle",
            "get_selector_from_llm",
            "Settings",
            "QueryEngineTool",
            "ToolMetadata",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/cogniswitch_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cs_token",
                        "default": null
                    },
                    {
                        "name": "OAI_token",
                        "default": null
                    },
                    {
                        "name": "apiKey",
                        "default": null
                    }
                ],
                "docstring": "The required fields.\n\nArgs:\n    cs_token (str): Cogniswitch token.\n    OAI_token (str): OpenAI token.\n    apiKey (str): Oauth token."
            },
            {
                "name": "query_knowledge",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Send a query to the Cogniswitch service and retrieve the response.\n\nArgs:\n    query (str): Query to be answered.\n\nReturns:\n    dict: Response JSON from the Cogniswitch service."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            }
        ],
        "classes": [
            {
                "name": "CogniswitchQueryEngine",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "requests",
            "BaseQueryEngine",
            "Response",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/multistep_query_engine.py": {
        "functions": [
            {
                "name": "default_stop_fn",
                "parameters": [
                    {
                        "name": "stop_dict",
                        "default": null
                    }
                ],
                "docstring": "Stop function for multi-step query combiner."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "query_transform",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Constant(value='None')"
                    },
                    {
                        "name": "num_steps",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "early_stopping",
                        "default": null
                    },
                    {
                        "name": "index_summary",
                        "default": null
                    },
                    {
                        "name": "stop_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_combine_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "prev_reasoning",
                        "default": null
                    }
                ],
                "docstring": "Combine queries."
            },
            {
                "name": "_query_multistep",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Run query combiner."
            }
        ],
        "classes": [
            {
                "name": "MultiStepQueryEngine",
                "docstring": "Multi-step query engine.\n\nThis query engine can operate over an existing base query engine,\nalong with the multi-step query transform.\n\nArgs:\n    query_engine (BaseQueryEngine): A BaseQueryEngine object.\n    query_transform (StepDecomposeQueryTransform): A StepDecomposeQueryTransform\n        object.\n    response_synthesizer (Optional[BaseSynthesizer]): A BaseSynthesizer\n        object.\n    num_steps (Optional[int]): Number of steps to run the multi-step query.\n    early_stopping (bool): Whether to stop early if the stop function returns True.\n    index_summary (str): A string summary of the index.\n    stop_fn (Optional[Callable[[Dict], bool]]): A stop function that takes in a\n        dictionary of information and returns a boolean."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "cast",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "CBEventType",
            "EventPayload",
            "StepDecomposeQueryTransform",
            "PromptMixinType",
            "BaseSynthesizer",
            "get_response_synthesizer",
            "NodeWithScore",
            "QueryBundle",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseQueryEngine",
            "NLSQLTableQueryEngine",
            "PGVectorSQLQueryEngine",
            "SQLTableRetrieverQueryEngine",
            "CitationQueryEngine",
            "CogniswitchQueryEngine",
            "CustomQueryEngine",
            "FLAREInstructQueryEngine",
            "ComposableGraphQueryEngine",
            "JSONalyzeQueryEngine",
            "KnowledgeGraphQueryEngine",
            "SimpleMultiModalQueryEngine",
            "MultiStepQueryEngine",
            "PandasQueryEngine",
            "RetrieverQueryEngine",
            "RetryGuidelineQueryEngine",
            "RetryQueryEngine",
            "RetrySourceQueryEngine",
            "RetrieverRouterQueryEngine",
            "RouterQueryEngine",
            "ToolRetrieverRouterQueryEngine",
            "SQLJoinQueryEngine",
            "SQLAutoVectorQueryEngine",
            "SubQuestionAnswerPair",
            "SubQuestionQueryEngine",
            "TransformQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/sql_vector_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_query_tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_query_tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "sql_vector_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_augment_query_transform",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "use_sql_vector_synthesis",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "from_sql_and_vector_query_engines",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_query_engine",
                        "default": null
                    },
                    {
                        "name": "sql_tool_name",
                        "default": null
                    },
                    {
                        "name": "sql_tool_description",
                        "default": null
                    },
                    {
                        "name": "vector_auto_retriever",
                        "default": null
                    },
                    {
                        "name": "vector_tool_name",
                        "default": null
                    },
                    {
                        "name": "vector_tool_description",
                        "default": null
                    },
                    {
                        "name": "selector",
                        "default": null
                    }
                ],
                "docstring": "From SQL and vector query engines.\n\nArgs:\n    sql_query_engine (BaseSQLTableQueryEngine): SQL query engine.\n    vector_query_engine (VectorIndexAutoRetriever): Vector retriever.\n    selector (Optional[Union[LLMSingleSelector, PydanticSingleSelector]]):\n        Selector to use."
            }
        ],
        "classes": [
            {
                "name": "SQLAutoVectorQueryEngine",
                "docstring": "SQL + Vector Index Auto Retriever Query Engine.\n\nThis query engine can query both a SQL database\nas well as a vector database. It will first decide\nwhether it needs to query the SQL database or vector store.\nIf it decides to query the SQL database, it will also decide\nwhether to augment information with retrieved results from the vector store.\nWe use the VectorIndexAutoRetriever to retrieve results.\n\nArgs:\n    sql_query_tool (QueryEngineTool): Query engine tool for SQL database.\n    vector_query_tool (QueryEngineTool): Query engine tool for vector database.\n    selector (Optional[Union[LLMSingleSelector, PydanticSingleSelector]]):\n        Selector to use.\n    sql_vector_synthesis_prompt (Optional[BasePromptTemplate]):\n        Prompt to use for SQL vector synthesis.\n    sql_augment_query_transform (Optional[SQLAugmentQueryTransform]): Query\n        transform to use for SQL augmentation.\n    use_sql_vector_synthesis (bool): Whether to use SQL vector synthesis.\n    callback_manager (Optional[CallbackManager]): Callback manager to use.\n    verbose (bool): Whether to print intermediate results."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Optional",
            "Union",
            "CallbackManager",
            "BaseSQLTableQueryEngine",
            "NLSQLTableQueryEngine",
            "VectorIndexAutoRetriever",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "PromptMixinType",
            "RetrieverQueryEngine",
            "SQLAugmentQueryTransform",
            "SQLJoinQueryEngine",
            "LLMSingleSelector",
            "PydanticSingleSelector",
            "QueryEngineTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/graph_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "custom_query_engines",
                        "default": null
                    },
                    {
                        "name": "recursive",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "index_id",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Query a single index."
            },
            {
                "name": "_fetch_recursive_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_with_score",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Fetch nodes.\n\nUses existing node if it's not an index node.\nOtherwise fetch response from corresponding index."
            }
        ],
        "classes": [
            {
                "name": "ComposableGraphQueryEngine",
                "docstring": "Composable graph query engine.\n\nThis query engine can operate over a ComposableGraph.\nIt can take in custom query engines for its sub-indices.\n\nArgs:\n    graph (ComposableGraph): A ComposableGraph object.\n    custom_query_engines (Optional[Dict[str, BaseQueryEngine]]): A dictionary of\n        custom query engines.\n    recursive (bool): Whether to recursively query the graph.\n    **kwargs: additional arguments to be passed to the underlying index query\n        engine."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "CBEventType",
            "EventPayload",
            "ComposableGraph",
            "IndexNode",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/sub_question_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "question_gen",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "query_engine_tools",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "use_async",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine_tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "question_gen",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "use_async",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_construct_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "qa_pair",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query_subq",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sub_q",
                        "default": null
                    },
                    {
                        "name": "color",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SubQuestionAnswerPair",
                "docstring": "Pair of the sub question and optionally its answer (if its been answered yet)."
            },
            {
                "name": "SubQuestionQueryEngine",
                "docstring": "Sub question query engine.\n\nA query engine that breaks down a complex query (e.g. compare and contrast) into\n    many sub questions and their target query engine for execution.\n    After executing all sub questions, all responses are gathered and sent to\n    response synthesizer to produce the final response.\n\nArgs:\n    question_gen (BaseQuestionGenerator): A module for generating sub questions\n        given a complex question and tools.\n    response_synthesizer (BaseSynthesizer): A response synthesizer for\n        generating the final response\n    query_engine_tools (Sequence[QueryEngineTool]): Tools to answer the\n        sub questions.\n    verbose (bool): whether to print intermediate questions and answers.\n        Defaults to True\n    use_async (bool): whether to execute the sub questions with asyncio.\n        Defaults to True"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "run_async_tasks",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "BaseModel",
            "Field",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "LLM",
            "PromptMixinType",
            "LLMQuestionGenerator",
            "BaseQuestionGenerator",
            "SubQuestion",
            "BaseSynthesizer",
            "get_response_synthesizer",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings",
            "QueryEngineTool",
            "get_color_mapping",
            "print_text",
            "OpenAIQuestionGenerator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/transform_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_transform",
                        "default": null
                    },
                    {
                        "name": "transform_metadata",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            }
        ],
        "classes": [
            {
                "name": "TransformQueryEngine",
                "docstring": "Transform query engine.\n\nApplies a query transform to a query bundle before passing\n    it to a query engine.\n\nArgs:\n    query_engine (BaseQueryEngine): A query engine object.\n    query_transform (BaseQueryTransform): A query transform object.\n    transform_metadata (Optional[dict]): metadata to pass to the\n        query transform.\n    callback_manager (Optional[CallbackManager]): A callback manager."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Sequence",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "CallbackManager",
            "BaseQueryTransform",
            "PromptMixinType",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/retry_source_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "evaluator",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "max_retries",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Run a BaseQueryEngine with retries."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RetrySourceQueryEngine",
                "docstring": "Retry with different source nodes."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Optional",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "Response",
            "CallbackManager",
            "BaseEvaluator",
            "SummaryIndex",
            "LLM",
            "PromptMixinType",
            "RetrieverQueryEngine",
            "Document",
            "QueryBundle",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/extractors/metadata_extractors.py": {
        "functions": [
            {
                "name": "add_class_name",
                "parameters": [
                    {
                        "name": "value",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    },
                    {
                        "name": "info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_predictor",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "nodes",
                        "default": "Name(id='DEFAULT_TITLE_NODE_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "node_template",
                        "default": "Name(id='DEFAULT_TITLE_COMBINE_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "combine_template",
                        "default": "Name(id='DEFAULT_NUM_WORKERS', ctx=Load())"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "filter_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "separate_nodes_by_ref_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_predictor",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "keywords",
                        "default": "Name(id='DEFAULT_KEYWORD_EXTRACT_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "prompt_template",
                        "default": "Name(id='DEFAULT_NUM_WORKERS', ctx=Load())"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_predictor",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "questions",
                        "default": "Name(id='DEFAULT_QUESTION_GEN_TMPL', ctx=Load())"
                    },
                    {
                        "name": "prompt_template",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "embedding_only",
                        "default": "Name(id='DEFAULT_NUM_WORKERS', ctx=Load())"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_predictor",
                        "default": "List(elts=[Constant(value='self')], ctx=Load())"
                    },
                    {
                        "name": "summaries",
                        "default": "Name(id='DEFAULT_SUMMARY_EXTRACT_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "prompt_template",
                        "default": "Name(id='DEFAULT_NUM_WORKERS', ctx=Load())"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "TitleExtractor",
                "docstring": "Title extractor. Useful for long documents. Extracts `document_title`\nmetadata field.\n\nArgs:\n    llm (Optional[LLM]): LLM\n    nodes (int): number of nodes from front to use for title extraction\n    node_template (str): template for node-level title clues extraction\n    combine_template (str): template for combining node-level clues into\n        a document-level title"
            },
            {
                "name": "KeywordExtractor",
                "docstring": "Keyword extractor. Node-level extractor. Extracts\n`excerpt_keywords` metadata field.\n\nArgs:\n    llm (Optional[LLM]): LLM\n    keywords (int): number of keywords to extract\n    prompt_template (str): template for keyword extraction"
            },
            {
                "name": "QuestionsAnsweredExtractor",
                "docstring": "Questions answered extractor. Node-level extractor.\nExtracts `questions_this_excerpt_can_answer` metadata field.\n\nArgs:\n    llm (Optional[LLM]): LLM\n    questions (int): number of questions to extract\n    prompt_template (str): template for question extraction,\n    embedding_only (bool): whether to use embedding only"
            },
            {
                "name": "SummaryExtractor",
                "docstring": "Summary extractor. Node-level extractor with adjacent sharing.\nExtracts `section_summary`, `prev_section_summary`, `next_section_summary`\nmetadata fields.\n\nArgs:\n    llm (Optional[LLM]): LLM\n    summaries (List[str]): list of summaries to extract: 'self', 'prev', 'next'\n    prompt_template (str): template for summary extraction"
            },
            {
                "name": "PydanticProgramExtractor",
                "docstring": "Pydantic program extractor.\n\nUses an LLM to extract out a Pydantic object. Return attributes of that object\nin a dictionary."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "DEFAULT_NUM_WORKERS",
            "run_jobs",
            "Field",
            "PrivateAttr",
            "SerializeAsAny",
            "BaseExtractor",
            "LLM",
            "PromptTemplate",
            "BaseNode",
            "TextNode",
            "Settings",
            "BasePydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/extractors/loading.py": {
        "functions": [
            {
                "name": "load_extractor",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseExtractor",
            "KeywordExtractor",
            "QuestionsAnsweredExtractor",
            "SummaryExtractor",
            "TitleExtractor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/extractors/interface.py": {
        "functions": [
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "extract",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Extracts metadata for a sequence of nodes, returning a list of\nmetadata dictionaries corresponding to each node.\n\nArgs:\n    nodes (Sequence[Document]): nodes to extract metadata from"
            },
            {
                "name": "process_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "excluded_embed_metadata_keys",
                        "default": null
                    },
                    {
                        "name": "excluded_llm_metadata_keys",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Post process nodes parsed from documents.\n\nAllows extractors to be chained.\n\nArgs:\n    nodes (List[BaseNode]): nodes to post-process"
            }
        ],
        "classes": [
            {
                "name": "BaseExtractor",
                "docstring": "Metadata extractor."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "deepcopy",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "asyncio_run",
            "Field",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "TransformComponent",
            "Self",
            "load_predictor",
            "load_llm"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/extractors/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseExtractor",
            "KeywordExtractor",
            "PydanticProgramExtractor",
            "QuestionsAnsweredExtractor",
            "SummaryExtractor",
            "TitleExtractor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/command_line/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/command_line/upgrade.py": {
        "functions": [
            {
                "name": "_parse_from_imports",
                "parameters": [
                    {
                        "name": "mappings",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "installed_modules",
                        "default": null
                    },
                    {
                        "name": "line_idx",
                        "default": null
                    },
                    {
                        "name": "lines",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_hub_downloads",
                "parameters": [
                    {
                        "name": "mappings",
                        "default": null
                    },
                    {
                        "name": "installed_modules",
                        "default": null
                    },
                    {
                        "name": "line",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse_lines",
                "parameters": [
                    {
                        "name": "lines",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "installed_modules",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_cell_installs_llama_hub",
                "parameters": [
                    {
                        "name": "cell",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_format_new_installs",
                "parameters": [
                    {
                        "name": "new_installs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_nb_file",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_py_md_file",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_file",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_is_hidden",
                "parameters": [
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_dir",
                "parameters": [
                    {
                        "name": "input_dir",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "re",
            "Path",
            "Any",
            "Dict",
            "List",
            "Tuple"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/download.py": {
        "functions": [
            {
                "name": "_resolve_dataset_class",
                "parameters": [
                    {
                        "name": "filename",
                        "default": null
                    }
                ],
                "docstring": "Resolve appropriate llama dataset class based on file name."
            },
            {
                "name": "download_llama_dataset",
                "parameters": [
                    {
                        "name": "llama_dataset_class",
                        "default": "Name(id='LLAMA_DATASETS_URL', ctx=Load())"
                    },
                    {
                        "name": "download_dir",
                        "default": "Name(id='LLAMA_DATASETS_LFS_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_url",
                        "default": "Name(id='LLAMA_DATASETS_SOURCE_FILES_GITHUB_TREE_URL', ctx=Load())"
                    },
                    {
                        "name": "llama_datasets_lfs_url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llama_datasets_source_files_tree_url",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    },
                    {
                        "name": "load_documents",
                        "default": null
                    }
                ],
                "docstring": "Download dataset from datasets-LFS and llamahub.\n\nArgs:\n    dataset_class: The name of the llamadataset class you want to download,\n        such as `PaulGrahamEssayDataset`.\n    custom_dir: Custom dir name to download loader into (under parent folder).\n    custom_path: Custom dirpath to download loader into.\n    llama_datasets_url: Url for getting ordinary files from llama_datasets repo\n    llama_datasets_lfs_url: Url for lfs-traced files llama_datasets repo\n    llama_datasets_source_files_tree_url: Url for listing source_files contents\n    refresh_cache: If true, the local cache will be skipped and the\n        loader will be fetched directly from the remote repo.\n    source_files_dirpath: The directory for storing source files\n    library_path: File name of the library file.\n    base_file_name: The rag dataset json file\n    disable_library_cache: Boolean to control library cache\n    override_path: Boolean to control overriding path\n    show_progress: Boolean for showing progress on downloading source files\n    load_documents: Boolean for whether or not source_files for LabelledRagDataset should\n                    be loaded.\n\nReturns:\n    a `BaseLlamaDataset` and a `List[Document]`"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Tuple",
            "Type",
            "LLAMA_DATASETS_LFS_URL",
            "LLAMA_DATASETS_SOURCE_FILES_GITHUB_TREE_URL",
            "LLAMA_DATASETS_URL",
            "download_llama_dataset",
            "MODULE_TYPE",
            "track_download",
            "BaseLlamaDataset",
            "LabelledEvaluatorDataset",
            "LabelledPairwiseEvaluatorDataset",
            "LabelledRagDataset",
            "SimpleDirectoryReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseLlamaDataExample",
            "BaseLlamaDataset",
            "BaseLlamaExamplePrediction",
            "BaseLlamaPredictionDataset",
            "CreatedBy",
            "CreatedByType",
            "download_llama_dataset",
            "EvaluatorExamplePrediction",
            "EvaluatorPredictionDataset",
            "LabeledEvaluatorDataExample",
            "LabeledEvaluatorDataset",
            "LabeledPairwiseEvaluatorDataExample",
            "LabeledPairwiseEvaluatorDataset",
            "LabelledEvaluatorDataExample",
            "LabelledEvaluatorDataset",
            "LabelledPairwiseEvaluatorDataExample",
            "LabelledPairwiseEvaluatorDataset",
            "PairwiseEvaluatorExamplePrediction",
            "PairwiseEvaluatorPredictionDataset",
            "LabeledRagDataExample",
            "LabeledRagDataset",
            "LabelledRagDataExample",
            "LabelledRagDataset",
            "RagExamplePrediction",
            "RagPredictionDataset"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/generator.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_questions_per_chunk",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_question_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Attribute(value=Name(id='MetadataMode', ctx=Load()), attr='NONE', ctx=Load())"
                    },
                    {
                        "name": "question_gen_query",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "metadata_mode",
                        "default": "Name(id='DEFAULT_NUM_WORKERS', ctx=Load())"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    },
                    {
                        "name": "workers",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_documents",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_questions_per_chunk",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_question_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "question_gen_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "required_keywords",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "exclude_keywords",
                        "default": "Name(id='DEFAULT_NUM_WORKERS', ctx=Load())"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    },
                    {
                        "name": "workers",
                        "default": null
                    }
                ],
                "docstring": "Generate dataset from documents."
            },
            {
                "name": "generate_questions_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Generates questions but not the reference answers."
            },
            {
                "name": "generate_dataset_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Generates questions for each document."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            }
        ],
        "classes": [
            {
                "name": "RagDatasetGenerator",
                "docstring": "Generate dataset (question/ question-answer pairs)     based on the given documents.\n\nNOTE: this is a beta feature, subject to change!\n\nArgs:\n    nodes (List[Node]): List of nodes. (Optional)\n    num_questions_per_chunk: number of question to be         generated per chunk. Each document is chunked of size 512 words.\n    text_question_template: Question generation template.\n    question_gen_query: Question generation query."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "re",
            "warnings",
            "List",
            "Sequence",
            "Optional",
            "Document",
            "SummaryIndex",
            "DEFAULT_NUM_WORKERS",
            "run_jobs",
            "asyncio_run",
            "RESPONSE_TYPE",
            "run_transformations",
            "CreatedBy",
            "CreatedByType",
            "LabelledRagDataExample",
            "LabelledRagDataset",
            "LLM",
            "KeywordNodePostprocessor",
            "BasePromptTemplate",
            "PromptTemplate",
            "DEFAULT_TEXT_QA_PROMPT",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "BaseNode",
            "MetadataMode",
            "NodeWithScore",
            "TransformComponent",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/rag.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "_predict_example",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "predictor",
                        "default": null
                    },
                    {
                        "name": "example",
                        "default": null
                    },
                    {
                        "name": "sleep_time_in_seconds",
                        "default": null
                    }
                ],
                "docstring": "Predict RAG example with a query engine."
            },
            {
                "name": "_construct_prediction_dataset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "predictions",
                        "default": null
                    }
                ],
                "docstring": "Construct prediction dataset."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "RagExamplePrediction",
                "docstring": "RAG example prediction class.\n\nArgs:\n    response (str): The response generated by the LLM.\n    contexts (Optional[List[str]]): The retrieved context (text) for generating\n                                    response."
            },
            {
                "name": "LabelledRagDataExample",
                "docstring": "RAG example class. Analogous to traditional ML datasets, this dataset contains\nthe \"features\" (i.e., query + context) to make a prediction and the \"label\" (i.e., response)\nto evaluate the prediction.\n\nArgs:\n    query (str): The user query\n    query_by (CreatedBy): Query generated by human or ai (model-name)\n    reference_contexts (Optional[List[str]]): The contexts used for response\n    reference_answer ([str]): Reference answer to the query. An answer\n                                that would receive full marks upon evaluation.\n    reference_answer_by: The reference answer generated by human or ai (model-name)."
            },
            {
                "name": "RagPredictionDataset",
                "docstring": "RagDataset class."
            },
            {
                "name": "LabelledRagDataset",
                "docstring": "RagDataset class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "time",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "BaseQueryEngine",
            "Field",
            "BaseLlamaDataExample",
            "BaseLlamaDataset",
            "BaseLlamaExamplePrediction",
            "BaseLlamaPredictionDataset",
            "CreatedBy",
            "pandas",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/simple.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "_construct_prediction_dataset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "predictions",
                        "default": null
                    }
                ],
                "docstring": "Construct the specific prediction dataset.\n\nArgs:\n    predictions (List[BaseLlamaExamplePrediction]): the list of predictions.\n\nReturns:\n    BaseLlamaPredictionDataset: A dataset of predictions."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "_predict_example",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "predictor",
                        "default": null
                    },
                    {
                        "name": "example",
                        "default": null
                    },
                    {
                        "name": "sleep_time_in_seconds",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            }
        ],
        "classes": [
            {
                "name": "SimpleExamplePrediction",
                "docstring": "RAG example prediction class.\n\nArgs:\n    response (str): The response generated by the LLM.\n    contexts (Optional[List[str]]): The retrieved context (text) for generating\n                                    response."
            },
            {
                "name": "SimplePredictionDataset",
                "docstring": "RagDataset class."
            },
            {
                "name": "LabelledSimpleDataExample",
                "docstring": null
            },
            {
                "name": "LabelledSimpleDataset",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Sequence",
            "Optional",
            "BaseLlamaDataExample",
            "BaseLlamaDataset",
            "CreatedBy",
            "BaseLlamaExamplePrediction",
            "BaseLlamaPredictionDataset",
            "LLM",
            "Field",
            "pandas",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/evaluator_evaluation.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "_predict_example",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "predictor",
                        "default": null
                    },
                    {
                        "name": "example",
                        "default": null
                    },
                    {
                        "name": "sleep_time_in_seconds",
                        "default": null
                    }
                ],
                "docstring": "Predict RAG example with a query engine."
            },
            {
                "name": "_construct_prediction_dataset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "predictions",
                        "default": null
                    }
                ],
                "docstring": "Construct prediction dataset."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Data example class name."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "_predict_example",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "predictor",
                        "default": null
                    },
                    {
                        "name": "example",
                        "default": null
                    },
                    {
                        "name": "sleep_time_in_seconds",
                        "default": null
                    }
                ],
                "docstring": "Predict RAG example with a query engine."
            },
            {
                "name": "_construct_prediction_dataset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "predictions",
                        "default": null
                    }
                ],
                "docstring": "Construct prediction dataset."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "EvaluatorExamplePrediction",
                "docstring": "Evaluation example prediction class.\n\nArgs:\n    feedback (Optional[str]): The evaluator's feedback.\n    score (Optional[float]): The evaluator's score."
            },
            {
                "name": "LabelledEvaluatorDataExample",
                "docstring": "Evaluation example class.\n\nThis data class contains the ingredients to perform a new \"prediction\" i.e.,\nevaluation. Here an evaluator is meant to evaluate a response against an\nassociated query as well as optionally contexts.\n\nArgs:\n    query (str): The user query\n    query_by (CreatedBy): Query generated by human or ai (model-name)\n    contexts (Optional[List[str]]): The contexts used for response\n    answer (str): Answer to the query that is to be evaluated.\n    answer_by: The reference answer generated by human or ai (model-name).\n    ground_truth_answer (Optional[str]):\n    ground_truth_answer_by (Optional[CreatedBy]):\n    reference_feedback (str): The reference feedback evaluation.\n    reference_score (float): The reference score evaluation.\n    reference_evaluation_by (CreatedBy): Evaluation generated by human or ai (model-name)"
            },
            {
                "name": "EvaluatorPredictionDataset",
                "docstring": "Evaluation Prediction Dataset Class."
            },
            {
                "name": "LabelledEvaluatorDataset",
                "docstring": "LabelledEvalationDataset class."
            },
            {
                "name": "PairwiseEvaluatorExamplePrediction",
                "docstring": "Pairwise evaluation example prediction class.\n\nArgs:\n    feedback (Optional[str]): The evaluator's feedback.\n    score (Optional[float]): The evaluator's score.\n    evaluation_source (EvaluationSource): If the evaluation came from original order or flipped; or inconclusive."
            },
            {
                "name": "PairwiseEvaluatorPredictionDataset",
                "docstring": "Pairwise evaluation predictions dataset class."
            },
            {
                "name": "LabelledPairwiseEvaluatorDataExample",
                "docstring": "Labelled pairwise evaluation data example class."
            },
            {
                "name": "LabelledPairwiseEvaluatorDataset",
                "docstring": "Labelled pairwise evaluation dataset. For evaluating the evaluator in\nperforming pairwise evaluations.\n\nArgs:\n    BaseLlamaDataset (_type_): _description_"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "time",
            "Any",
            "Dict",
            "List",
            "Sequence",
            "Optional",
            "Field",
            "BaseEvaluator",
            "EvaluationResult",
            "EvaluationSource",
            "BaseLlamaDataExample",
            "BaseLlamaDataset",
            "BaseLlamaExamplePrediction",
            "BaseLlamaPredictionDataset",
            "CreatedBy",
            "pandas",
            "pandas",
            "pandas",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/base.py": {
        "functions": [
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "__getitem__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "val",
                        "default": null
                    }
                ],
                "docstring": "Enable slicing and indexing.\n\nReturns the desired slice on `predictions`."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "save_json",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Save json."
            },
            {
                "name": "from_json",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Load json."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "__getitem__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "val",
                        "default": null
                    }
                ],
                "docstring": "Enable slicing and indexing.\n\nReturns the desired slice on `examples`."
            },
            {
                "name": "to_pandas",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Create pandas dataframe."
            },
            {
                "name": "save_json",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Save json."
            },
            {
                "name": "from_json",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Load json."
            },
            {
                "name": "_construct_prediction_dataset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "predictions",
                        "default": null
                    }
                ],
                "docstring": "Construct the specific prediction dataset.\n\nArgs:\n    predictions (List[BaseLlamaExamplePrediction]): the list of predictions.\n\nReturns:\n    BaseLlamaPredictionDataset: A dataset of predictions."
            },
            {
                "name": "_predict_example",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "predictor",
                        "default": null
                    },
                    {
                        "name": "example",
                        "default": null
                    },
                    {
                        "name": "sleep_time_in_seconds",
                        "default": null
                    }
                ],
                "docstring": "Predict on a single example.\n\nNOTE: Subclasses need to implement this.\n\nArgs:\n    predictor (PredictorType): The predictor to make the prediciton with.\n    example (BaseLlamaDataExample): The example to predict on.\n\nReturns:\n    BaseLlamaExamplePrediction: The prediction."
            },
            {
                "name": "make_predictions_with",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "predictor",
                        "default": "Constant(value=20)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    },
                    {
                        "name": "sleep_time_in_seconds",
                        "default": null
                    }
                ],
                "docstring": "Predict with a given query engine.\n\nArgs:\n    predictor (PredictorType): The predictor to make predictions with.\n    show_progress (bool, optional): Show progress of making predictions.\n    batch_size (int): Used to batch async calls, especially to reduce chances\n                    of hitting RateLimitError from openai.\n    sleep_time_in_seconds (int): Amount of time to sleep between batch call\n                    to reduce chance of hitting RateLimitError from openai.\n\nReturns:\n    BaseLlamaPredictionDataset: A dataset of predictions."
            },
            {
                "name": "_batch_examples",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=20)"
                    },
                    {
                        "name": "batch_size",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "start_position",
                        "default": null
                    }
                ],
                "docstring": "Batches examples and predictions with a given batch_size."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "CreatedByType",
                "docstring": "The kinds of rag data examples."
            },
            {
                "name": "CreatedBy",
                "docstring": null
            },
            {
                "name": "BaseLlamaExamplePrediction",
                "docstring": "Base llama dataset example class."
            },
            {
                "name": "BaseLlamaDataExample",
                "docstring": "Base llama dataset example class."
            },
            {
                "name": "BaseLlamaPredictionDataset",
                "docstring": null
            },
            {
                "name": "BaseLlamaDataset",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "abstractmethod",
            "Enum",
            "Any",
            "ClassVar",
            "Generator",
            "Generic",
            "List",
            "Sequence",
            "Optional",
            "Type",
            "TypeVar",
            "Union",
            "tqdm",
            "asyncio_module",
            "BaseQueryEngine",
            "LLM",
            "BaseModel",
            "Field",
            "PrivateAttr",
            "ConfigDict",
            "BaseEvaluator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/base_auto_retriever.py": {
        "functions": [
            {
                "name": "generate_retrieval_spec",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Generate retrieval spec synchronously."
            },
            {
                "name": "_build_retriever_from_spec",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retrieval_spec",
                        "default": null
                    }
                ],
                "docstring": "Build retriever from spec and provide query bundle."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve using generated spec."
            }
        ],
        "classes": [
            {
                "name": "BaseAutoRetriever",
                "docstring": "Base auto retriever."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "List",
            "Tuple",
            "BaseRetriever",
            "BaseModel",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/base_selector.py": {
        "functions": [
            {
                "name": "_wrap_choice",
                "parameters": [
                    {
                        "name": "choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_wrap_query",
                "parameters": [
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "ind",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reason",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "inds",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reasons",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            }
        ],
        "classes": [
            {
                "name": "SingleSelection",
                "docstring": "A single selection of a choice."
            },
            {
                "name": "MultiSelection",
                "docstring": "A multi-selection of choices."
            },
            {
                "name": "BaseSelector",
                "docstring": "Base selector."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "List",
            "Sequence",
            "Union",
            "ChainableMixin",
            "QueryComponent",
            "BaseModel",
            "DispatcherSpanMixin",
            "PromptMixin",
            "PromptMixinType",
            "QueryBundle",
            "QueryType",
            "ToolMetadata",
            "SelectorComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/base_multi_modal_retriever.py": {
        "functions": [
            {
                "name": "text_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve text nodes given text query.\n\nImplemented by the user."
            },
            {
                "name": "text_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve image nodes given text query.\n\nImplemented by the user."
            },
            {
                "name": "image_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve image nodes given image query.\n\nImplemented by the user."
            }
        ],
        "classes": [
            {
                "name": "MultiModalRetriever",
                "docstring": "Multi Modal base retriever."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "List",
            "BaseRetriever",
            "BaseImageRetriever",
            "QueryType",
            "NodeWithScore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/base_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "synthesize",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "additional_source_nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return a query component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "BaseQueryEngine",
                "docstring": "Base query engine."
            },
            {
                "name": "QueryEngineComponent",
                "docstring": "Query engine component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "RESPONSE_TYPE",
            "Field",
            "ConfigDict",
            "SerializeAsAny",
            "CallbackManager",
            "PromptDictType",
            "PromptMixin",
            "NodeWithScore",
            "QueryBundle",
            "QueryType",
            "DispatcherSpanMixin",
            "QueryEndEvent",
            "QueryStartEvent",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/base_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "object_map",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_check_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Check callback manager."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_retrieve_from_object",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "score",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes from object."
            },
            {
                "name": "_handle_recursive_retrieval",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes given query.\n\nArgs:\n    str_or_query_bundle (QueryType): Either a query string or\n        a QueryBundle object."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes given query.\n\nImplemented by the user."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return a query component."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "BaseRetriever",
                "docstring": "Base retriever."
            },
            {
                "name": "RetrieverComponent",
                "docstring": "Retriever component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseQueryEngine",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "BaseNode",
            "IndexNode",
            "NodeWithScore",
            "QueryBundle",
            "QueryType",
            "TextNode",
            "Settings",
            "print_text",
            "DispatcherSpanMixin",
            "RetrievalEndEvent",
            "RetrievalStartEvent",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/selectors/embedding_selectors.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "EmbeddingSingleSelector",
                "docstring": "Embedding selector.\n\nEmbedding selector that chooses one out of many options.\n\nArgs:\n    embed_model (BaseEmbedding): An embedding model."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "BaseSelector",
            "SelectorResult",
            "SingleSelection",
            "BaseEmbedding",
            "get_top_k_embeddings",
            "PromptDictType",
            "QueryBundle",
            "Settings",
            "ToolMetadata"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/selectors/pydantic_selectors.py": {
        "functions": [
            {
                "name": "_pydantic_output_to_selector_result",
                "parameters": [
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Convert pydantic output to selector result.\nTakes into account zero-indexing on answer indexes."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "selector_program",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "program",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_SINGLE_PYD_SELECT_PROMPT_TMPL', ctx=Load())"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selector_program",
                        "default": null
                    },
                    {
                        "name": "max_outputs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "program",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_MULTI_PYD_SELECT_PROMPT_TMPL', ctx=Load())"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_outputs",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PydanticSingleSelector",
                "docstring": null
            },
            {
                "name": "PydanticMultiSelector",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "BaseSelector",
            "MultiSelection",
            "SelectorResult",
            "SingleSelection",
            "PromptDictType",
            "QueryBundle",
            "_build_choices_text",
            "DEFAULT_MULTI_PYD_SELECT_PROMPT_TMPL",
            "DEFAULT_SINGLE_PYD_SELECT_PROMPT_TMPL",
            "ToolMetadata",
            "BasePydanticProgram",
            "OpenAI",
            "OpenAIPydanticProgram",
            "OpenAIPydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/selectors/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseSelector",
            "MultiSelection",
            "SingleSelection",
            "SelectorResult",
            "EmbeddingSingleSelector",
            "LLMMultiSelector",
            "LLMSingleSelector",
            "PydanticMultiSelector",
            "PydanticSingleSelector"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/selectors/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptTemplate",
            "PromptType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/selectors/utils.py": {
        "functions": [
            {
                "name": "get_selector_from_llm",
                "parameters": [
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_multi",
                        "default": null
                    }
                ],
                "docstring": "Get a selector from a service context. Prefers Pydantic selectors if possible."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "BaseSelector",
            "LLM",
            "LLMMultiSelector",
            "LLMSingleSelector",
            "PydanticMultiSelector",
            "PydanticSingleSelector"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/selectors/llm_selectors.py": {
        "functions": [
            {
                "name": "_build_choices_text",
                "parameters": [
                    {
                        "name": "choices",
                        "default": null
                    }
                ],
                "docstring": "Convert sequence of metadata to enumeration text."
            },
            {
                "name": "_structured_output_to_selector_result",
                "parameters": [
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Convert structured output to selector result."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "max_outputs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_outputs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_select",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LLMSingleSelector",
                "docstring": "LLM single selector.\n\nLLM-based selector that chooses one out of many options.\n\nArgs:\n    LLM (LLM): An LLM.\n    prompt (SingleSelectPrompt): A LLM prompt for selecting one out of many options."
            },
            {
                "name": "LLMMultiSelector",
                "docstring": "LLM multi selector.\n\nLLM-based selector that chooses multiple out of many options.\n\nArgs:\n    llm (LLM): An LLM.\n    prompt (SingleSelectPrompt): A LLM prompt for selecting multiple out of many\n        options."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "BaseSelector",
            "SelectorResult",
            "SingleSelection",
            "LLM",
            "StructuredOutput",
            "Answer",
            "SelectionOutputParser",
            "BasePromptTemplate",
            "PromptDictType",
            "PromptType",
            "QueryBundle",
            "DEFAULT_MULTI_SELECT_PROMPT_TMPL",
            "DEFAULT_SINGLE_SELECT_PROMPT_TMPL",
            "MultiSelectPrompt",
            "SingleSelectPrompt",
            "Settings",
            "ToolMetadata",
            "BaseOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/tree_root_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            }
        ],
        "classes": [
            {
                "name": "TreeRootRetriever",
                "docstring": "Tree root retriever.\n\nThis class directly retrieves the answer from the root nodes.\n\nUnlike GPTTreeIndexLeafQuery, this class assumes the graph already stores\nthe answer (because it was constructed with a query_str), so it does not\nattempt to parse information down the graph in order to synthesize an answer."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Optional",
            "BaseRetriever",
            "CallbackManager",
            "QueryBundle",
            "TreeIndex",
            "get_sorted_node_list",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/select_leaf_retriever.py": {
        "functions": [
            {
                "name": "get_text_from_node",
                "parameters": [
                    {
                        "name": "node",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "level",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Get text from node."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "query_template_multiple",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "child_branch_factor",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "object_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query_with_selected_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "selected_node",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "prev_response",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Get response for selected node.\n\nIf not leaf node, it will recursively call _query on the child nodes.\nIf prev_response is provided, we will update prev_response with the answer."
            },
            {
                "name": "_query_level",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "cur_node_ids",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Answer a query recursively."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "_select_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "cur_node_list",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve_level",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "cur_node_ids",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Answer a query recursively."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            }
        ],
        "classes": [
            {
                "name": "TreeSelectLeafRetriever",
                "docstring": "Tree select leaf retriever.\n\nThis class traverses the index graph and searches for a leaf node that can best\nanswer the query.\n\nArgs:\n    query_template (Optional[BasePromptTemplate]): Tree Select Query Prompt\n        (see :ref:`Prompt-Templates`).\n    query_template_multiple (Optional[BasePromptTemplate]): Tree Select\n        Query Prompt (Multiple)\n        (see :ref:`Prompt-Templates`).\n    child_branch_factor (int): Number of child nodes to consider at each level.\n        If child_branch_factor is 1, then the query will only choose one child node\n        to traverse for any given parent node.\n        If child_branch_factor is 2, then the query will choose two child nodes."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "cast",
            "BaseRetriever",
            "Response",
            "CallbackManager",
            "PromptHelper",
            "QueryBundle",
            "TreeIndex",
            "get_numbered_text_from_nodes",
            "extract_numbers_given_response",
            "get_sorted_node_list",
            "BasePromptTemplate",
            "DEFAULT_REFINE_PROMPT_SEL",
            "DEFAULT_QUERY_PROMPT",
            "DEFAULT_QUERY_PROMPT_MULTIPLE",
            "DEFAULT_TEXT_QA_PROMPT",
            "get_response_synthesizer",
            "BaseNode",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "print_text",
            "truncate_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/select_leaf_embedding_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_qa_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "query_template_multiple",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "child_branch_factor",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "object_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_query_level",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "cur_node_ids",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Answer a query recursively."
            },
            {
                "name": "_get_query_text_embedding_similarities",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get query text embedding similarity.\n\nCache the query embedding and the node text embedding."
            },
            {
                "name": "_get_most_similar_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get the node with the highest similarity to the query."
            },
            {
                "name": "_select_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "cur_node_list",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "TreeSelectLeafEmbeddingRetriever",
                "docstring": "Tree select leaf embedding retriever.\n\nThis class traverses the index graph using the embedding similarity between the\nquery and the node text.\n\nArgs:\n    query_template (Optional[BasePromptTemplate]): Tree Select Query Prompt\n        (see :ref:`Prompt-Templates`).\n    query_template_multiple (Optional[BasePromptTemplate]): Tree Select\n        Query Prompt (Multiple)\n        (see :ref:`Prompt-Templates`).\n    text_qa_template (Optional[BasePromptTemplate]): Question-Answer Prompt\n        (see :ref:`Prompt-Templates`).\n    refine_template (Optional[BasePromptTemplate]): Refinement Prompt\n        (see :ref:`Prompt-Templates`).\n    child_branch_factor (int): Number of child nodes to consider at each level.\n        If child_branch_factor is 1, then the query will only choose one child node\n        to traverse for any given parent node.\n        If child_branch_factor is 2, then the query will choose two child nodes.\n    embed_model (Optional[BaseEmbedding]): Embedding model to use for\n        embedding similarity."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "cast",
            "BaseEmbedding",
            "CallbackManager",
            "TreeIndex",
            "TreeSelectLeafRetriever",
            "get_sorted_node_list",
            "BasePromptTemplate",
            "BaseNode",
            "MetadataMode",
            "QueryBundle",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TreeAllLeafRetriever",
            "GPTTreeIndex",
            "TreeIndex",
            "TreeSelectLeafEmbeddingRetriever",
            "TreeSelectLeafRetriever",
            "TreeRootRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/inserter.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_graph",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_INSERT_PROMPT', ctx=Load())"
                    },
                    {
                        "name": "num_children",
                        "default": "Name(id='DEFAULT_SUMMARY_PROMPT', ctx=Load())"
                    },
                    {
                        "name": "insert_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summary_prompt",
                        "default": null
                    },
                    {
                        "name": "docstore",
                        "default": null
                    }
                ],
                "docstring": "Initialize with params."
            },
            {
                "name": "_insert_under_parent_and_consolidate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text_node",
                        "default": null
                    },
                    {
                        "name": "parent_node",
                        "default": null
                    }
                ],
                "docstring": "Insert node under parent and consolidate.\n\nConsolidation will happen by dividing up child nodes, and creating a new\nintermediate layer of nodes."
            },
            {
                "name": "_insert_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "parent_node",
                        "default": null
                    }
                ],
                "docstring": "Insert node."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert into index_graph."
            }
        ],
        "classes": [
            {
                "name": "TreeIndexInserter",
                "docstring": "LlamaIndex inserter."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Optional",
            "Sequence",
            "IndexGraph",
            "PromptHelper",
            "get_numbered_text_from_nodes",
            "extract_numbers_given_response",
            "get_sorted_node_list",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_INSERT_PROMPT",
            "DEFAULT_SUMMARY_PROMPT",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "Settings",
            "BaseDocumentStore",
            "get_default_docstore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/utils.py": {
        "functions": [
            {
                "name": "get_numbered_text_from_nodes",
                "parameters": [
                    {
                        "name": "node_list",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_splitter",
                        "default": null
                    }
                ],
                "docstring": "Get text from nodes in the format of a numbered list.\n\nUsed by tree-structured indices."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "TokenTextSplitter",
            "truncate_text",
            "BaseNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summary_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "insert_prompt",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "num_children",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "build_tree",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='TreeRetrieverMode', ctx=Load()), attr='SELECT_LEAF', ctx=Load())"
                    },
                    {
                        "name": "retriever_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_validate_build_tree_required",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retriever_mode",
                        "default": null
                    }
                ],
                "docstring": "Check if index supports modes that require trees."
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "TreeRetrieverMode",
                "docstring": null
            },
            {
                "name": "TreeIndex",
                "docstring": "Tree Index.\n\nThe tree index is a tree-structured index, where each node is a summary of\nthe children nodes. During index construction, the tree is constructed\nin a bottoms-up fashion until we end up with a set of root_nodes.\n\nThere are a few different options during query time (see :ref:`Ref-Query`).\nThe main option is to traverse down the tree from the root nodes.\nA secondary answer is to directly synthesize the answer from the root nodes.\n\nArgs:\n    summary_template (Optional[BasePromptTemplate]): A Summarization Prompt\n        (see :ref:`Prompt-Templates`).\n    insert_prompt (Optional[BasePromptTemplate]): An Tree Insertion Prompt\n        (see :ref:`Prompt-Templates`).\n    num_children (int): The number of children each node should have.\n    build_tree (bool): Whether to build the tree during index construction.\n    show_progress (bool): Whether to show progress bars. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "Union",
            "BaseRetriever",
            "BaseEmbedding",
            "IndexGraph",
            "BaseIndex",
            "GPTTreeIndexBuilder",
            "TreeIndexInserter",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_INSERT_PROMPT",
            "DEFAULT_SUMMARY_PROMPT",
            "BaseNode",
            "IndexNode",
            "Settings",
            "RefDocInfo",
            "TreeAllLeafRetriever",
            "TreeSelectLeafEmbeddingRetriever",
            "TreeSelectLeafRetriever",
            "TreeRootRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/tree/all_leaf_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            }
        ],
        "classes": [
            {
                "name": "TreeAllLeafRetriever",
                "docstring": "GPT all leaf retriever.\n\nThis class builds a query-specific tree from leaf nodes to return a response.\nUsing this query mode means that the tree index doesn't need to be built\nwhen initialized, since we rebuild the tree for each query.\n\nArgs:\n    text_qa_template (Optional[BasePromptTemplate]): Question-Answer Prompt\n        (see :ref:`Prompt-Templates`)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Optional",
            "cast",
            "BaseRetriever",
            "CallbackManager",
            "IndexGraph",
            "TreeIndex",
            "get_sorted_node_list",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/pandas.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PandasIndex",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/sql_query.py": {
        "functions": [
            {
                "name": "_validate_prompt",
                "parameters": [
                    {
                        "name": "custom_prompt",
                        "default": null
                    },
                    {
                        "name": "default_prompt",
                        "default": null
                    }
                ],
                "docstring": "Validate prompt."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "sql_context_container",
                        "default": null
                    },
                    {
                        "name": "sql_only",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_run_with_sql_only_check",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sql_query_str",
                        "default": null
                    }
                ],
                "docstring": "Don't run sql if sql_only is true, else continue with normal path."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_to_sql_prompt",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "context_query_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "synthesize_response",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "response_synthesis_prompt",
                        "default": null
                    },
                    {
                        "name": "sql_only",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_parse_response_to_sql",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Parse response to SQL."
            },
            {
                "name": "_get_table_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get table context.\n\nGet tables schema + optional context as a single string. Taken from\nSQLContextContainer."
            },
            {
                "name": "_run_with_sql_only_check",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sql_query_str",
                        "default": null
                    }
                ],
                "docstring": "Don't run sql if sql_only is true, else continue with normal path."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "synthesize_response",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "markdown_response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_synthesis_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "streaming",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "sql_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get SQL retriever."
            },
            {
                "name": "_format_result_markdown",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retrieved_nodes",
                        "default": null
                    }
                ],
                "docstring": "Format the result in markdown."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_to_sql_prompt",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "context_query_kwargs",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "synthesize_response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "markdown_response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tables",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_str_prefix",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_only",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "sql_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get SQL retriever."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_to_sql_prompt",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "context_query_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "synthesize_response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tables",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "context_str_prefix",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_only",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "sql_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get SQL retriever."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "table_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "text_to_sql_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_query_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "synthesize_response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesis_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refine_synthesis_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_str_prefix",
                        "default": null
                    },
                    {
                        "name": "sql_only",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "sql_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get SQL retriever."
            }
        ],
        "classes": [
            {
                "name": "SQLStructStoreQueryEngine",
                "docstring": "GPT SQL query engine over a structured database.\n\nNOTE: deprecated in favor of SQLTableRetriever, kept for backward compatibility.\n\nRuns raw SQL over a SQLStructStoreIndex. No LLM calls are made here.\n\nNOTE: this query cannot work with composed indices - if the index\ncontains subindices, those subindices will not be queried.\n\nNOTE: Any Text-to-SQL application should be aware that executing\narbitrary SQL queries can be a security risk. It is recommended to\ntake precautions as needed, such as using restricted roles, read-only\ndatabases, sandboxing, etc."
            },
            {
                "name": "NLStructStoreQueryEngine",
                "docstring": "GPT natural language query engine over a structured database.\n\nNOTE: deprecated in favor of SQLTableRetriever, kept for backward compatibility.\n\nGiven a natural language query, we will extract the query to SQL.\nRuns raw SQL over a SQLStructStoreIndex. No LLM calls are made during\nthe SQL execution.\n\nNOTE: this query cannot work with composed indices - if the index\ncontains subindices, those subindices will not be queried.\n\nNOTE: Any Text-to-SQL application should be aware that executing\narbitrary SQL queries can be a security risk. It is recommended to\ntake precautions as needed, such as using restricted roles, read-only\ndatabases, sandboxing, etc.\n\nArgs:\n    index (SQLStructStoreIndex): A SQL Struct Store Index\n    text_to_sql_prompt (Optional[BasePromptTemplate]): A Text to SQL\n        BasePromptTemplate to use for the query.\n        Defaults to DEFAULT_TEXT_TO_SQL_PROMPT.\n    context_query_kwargs (Optional[dict]): Keyword arguments for the\n        context query. Defaults to {}.\n    synthesize_response (bool): Whether to synthesize a response from the\n        query results. Defaults to True.\n    sql_only (bool) : Whether to get only sql and not the sql query result.\n        Default to False.\n    response_synthesis_prompt (Optional[BasePromptTemplate]): A\n        Response Synthesis BasePromptTemplate to use for the query. Defaults to\n        DEFAULT_RESPONSE_SYNTHESIS_PROMPT."
            },
            {
                "name": "BaseSQLTableQueryEngine",
                "docstring": "Base SQL Table query engine.\n\nNOTE: Any Text-to-SQL application should be aware that executing\narbitrary SQL queries can be a security risk. It is recommended to\ntake precautions as needed, such as using restricted roles, read-only\ndatabases, sandboxing, etc."
            },
            {
                "name": "NLSQLTableQueryEngine",
                "docstring": "Natural language SQL Table query engine.\n\nRead NLStructStoreQueryEngine's docstring for more info on NL SQL.\n\nNOTE: Any Text-to-SQL application should be aware that executing\narbitrary SQL queries can be a security risk. It is recommended to\ntake precautions as needed, such as using restricted roles, read-only\ndatabases, sandboxing, etc."
            },
            {
                "name": "PGVectorSQLQueryEngine",
                "docstring": "PGvector SQL query engine.\n\nA modified version of the normal text-to-SQL query engine because\nwe can infer embedding vectors in the sql query.\n\nNOTE: this is a beta feature\n\nNOTE: Any Text-to-SQL application should be aware that executing\narbitrary SQL queries can be a security risk. It is recommended to\ntake precautions as needed, such as using restricted roles, read-only\ndatabases, sandboxing, etc."
            },
            {
                "name": "SQLTableRetrieverQueryEngine",
                "docstring": "SQL Table retriever query engine."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "cast",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "AsyncStreamingResponse",
            "Response",
            "StreamingResponse",
            "CallbackManager",
            "SQLContextContainerBuilder",
            "SQLStructStoreIndex",
            "NLSQLRetriever",
            "SQLParserMode",
            "LLM",
            "ObjectRetriever",
            "SQLTableSchema",
            "BaseEmbedding",
            "BasePromptTemplate",
            "PromptTemplate",
            "DEFAULT_TEXT_TO_SQL_PGVECTOR_PROMPT",
            "DEFAULT_TEXT_TO_SQL_PROMPT",
            "DEFAULT_REFINE_PROMPT",
            "PromptDictType",
            "PromptMixinType",
            "PromptType",
            "get_response_synthesizer",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "SQLDatabase",
            "Table"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "JSONQueryEngine",
            "GPTPandasIndex",
            "PandasIndex",
            "GPTSQLStructStoreIndex",
            "SQLContextContainerBuilder",
            "SQLStructStoreIndex",
            "GPTNLStructStoreQueryEngine",
            "GPTSQLStructStoreQueryEngine",
            "NLSQLTableQueryEngine",
            "NLStructStoreQueryEngine",
            "SQLStructStoreQueryEngine",
            "SQLTableRetrieverQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/json_query.py": {
        "functions": [
            {
                "name": "default_output_response_parser",
                "parameters": [
                    {
                        "name": "llm_output",
                        "default": null
                    }
                ],
                "docstring": "Attempts to parse the JSON path prompt output. Only applicable if the default prompt is used."
            },
            {
                "name": "default_output_processor",
                "parameters": [
                    {
                        "name": "llm_output",
                        "default": null
                    },
                    {
                        "name": "json_value",
                        "default": null
                    }
                ],
                "docstring": "Default output processor that extracts values based on JSON Path expressions."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "json_value",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "json_schema",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "json_path_prompt",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "output_processor",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_kwargs",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "synthesize_response",
                        "default": null
                    },
                    {
                        "name": "response_synthesis_prompt",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_get_schema_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get JSON schema context."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Answer a query."
            }
        ],
        "classes": [
            {
                "name": "JSONQueryEngine",
                "docstring": "GPT JSON Query Engine.\n\nConverts natural language to JSON Path queries.\n\nArgs:\n    json_value (JSONType): JSON value\n    json_schema (JSONType): JSON schema\n    json_path_prompt (BasePromptTemplate): The JSON Path prompt to use.\n    output_processor (Callable): The output processor that executes the\n        JSON Path query.\n    output_kwargs (dict): Additional output processor kwargs for the\n        output_processor function.\n    verbose (bool): Whether to print verbose output."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "re",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Union",
            "BaseQueryEngine",
            "Response",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "DEFAULT_JSON_PATH_PROMPT",
            "PromptDictType",
            "PromptMixinType",
            "PromptType",
            "QueryBundle",
            "Settings",
            "print_text",
            "parse",
            "DatumInContext"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/container_builder.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_dict",
                        "default": null
                    },
                    {
                        "name": "context_str",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "from_documents",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "documents_dict",
                        "default": null
                    },
                    {
                        "name": "sql_database",
                        "default": null
                    }
                ],
                "docstring": "Build context from documents."
            },
            {
                "name": "_build_context_from_sql_database",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": null
                    },
                    {
                        "name": "current_context",
                        "default": null
                    }
                ],
                "docstring": "Get tables schema + optional context as a single string."
            },
            {
                "name": "_get_context_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ignore_db_schema",
                        "default": null
                    }
                ],
                "docstring": "Get full context dict."
            },
            {
                "name": "derive_index_from_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_cls",
                        "default": null
                    },
                    {
                        "name": "ignore_db_schema",
                        "default": null
                    }
                ],
                "docstring": "Derive index from context."
            },
            {
                "name": "query_index_for_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_CONTEXT_QUERY_TMPL', ctx=Load())"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "query_tmpl",
                        "default": null
                    },
                    {
                        "name": "store_context_str",
                        "default": null
                    }
                ],
                "docstring": "Query index for context.\n\nA simple wrapper around the index.query call which\ninjects a query template to specifically fetch table information,\nand can store a context_str.\n\nArgs:\n    index (BaseIndex): index data structure\n    query_str (QueryType): query string\n    query_tmpl (Optional[str]): query template\n    store_context_str (bool): store context_str"
            },
            {
                "name": "build_context_container",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ignore_db_schema",
                        "default": null
                    }
                ],
                "docstring": "Build index structure."
            }
        ],
        "classes": [
            {
                "name": "SQLContextContainerBuilder",
                "docstring": "SQLContextContainerBuilder.\n\nBuild a SQLContextContainer that can be passed to the SQL index\nduring index construction or during query-time.\n\nNOTE: if context_str is specified, that will be used as context\ninstead of context_dict\n\nArgs:\n    sql_database (SQLDatabase): SQL database\n    context_dict (Optional[Dict[str, str]]): context dict"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Type",
            "BaseIndex",
            "SQLDocumentContextBuilder",
            "SQLContextContainer",
            "Document",
            "BaseNode",
            "QueryType",
            "SQLDatabase"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/sql_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "return_raw",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_format_node_results",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "results",
                        "default": null
                    },
                    {
                        "name": "col_keys",
                        "default": null
                    }
                ],
                "docstring": "Format node results."
            },
            {
                "name": "retrieve_with_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve with metadata."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes given query."
            },
            {
                "name": "parse_response_to_sql",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Parse response to SQL."
            },
            {
                "name": "parse_response_to_sql",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Parse response to SQL."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "parse_response_to_sql",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Parse response to SQL."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_to_sql_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_query_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tables",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "table_retriever",
                        "default": "Attribute(value=Name(id='SQLParserMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "context_str_prefix",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_parser_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "return_raw",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "handle_sql_errors",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_only",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_load_sql_parser",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sql_parser_mode",
                        "default": null
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": "Load SQL parser."
            },
            {
                "name": "_load_get_tables_fn",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tables",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context_query_kwargs",
                        "default": null
                    },
                    {
                        "name": "table_retriever",
                        "default": null
                    }
                ],
                "docstring": "Load get_tables function."
            },
            {
                "name": "retrieve_with_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve with metadata."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes given query."
            },
            {
                "name": "_get_table_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get table context.\n\nGet tables schema + optional context as a single string."
            }
        ],
        "classes": [
            {
                "name": "SQLRetriever",
                "docstring": "SQL Retriever.\n\nRetrieves via raw SQL statements.\n\nArgs:\n    sql_database (SQLDatabase): SQL database.\n    return_raw (bool): Whether to return raw results or format results.\n        Defaults to True."
            },
            {
                "name": "SQLParserMode",
                "docstring": "SQL Parser Mode."
            },
            {
                "name": "BaseSQLParser",
                "docstring": "Base SQL Parser."
            },
            {
                "name": "DefaultSQLParser",
                "docstring": "Default SQL Parser."
            },
            {
                "name": "PGVectorSQLParser",
                "docstring": "PGVector SQL Parser."
            },
            {
                "name": "NLSQLRetriever",
                "docstring": "Text-to-SQL Retriever.\n\nRetrieves via text.\n\nArgs:\n    sql_database (SQLDatabase): SQL database.\n    text_to_sql_prompt (BasePromptTemplate): Prompt template for text-to-sql.\n        Defaults to DEFAULT_TEXT_TO_SQL_PROMPT.\n    context_query_kwargs (dict): Mapping from table name to context query.\n        Defaults to None.\n    tables (Union[List[str], List[Table]]): List of table names or Table objects.\n    table_retriever (ObjectRetriever[SQLTableSchema]): Object retriever for\n        SQLTableSchema objects. Defaults to None.\n    context_str_prefix (str): Prefix for context string. Defaults to None.\n    return_raw (bool): Whether to return plain-text dump of SQL results, or parsed into Nodes.\n    handle_sql_errors (bool): Whether to handle SQL errors. Defaults to True.\n    sql_only (bool) : Whether to get only sql and not the sql query result.\n        Default to False.\n    llm (Optional[LLM]): Language model to use."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "ABC",
            "abstractmethod",
            "Enum",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "cast",
            "BaseRetriever",
            "BaseEmbedding",
            "CallbackManager",
            "DispatcherSpanMixin",
            "LLM",
            "ObjectRetriever",
            "SQLTableSchema",
            "BasePromptTemplate",
            "DEFAULT_TEXT_TO_SQL_PROMPT",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "NodeWithScore",
            "QueryBundle",
            "QueryType",
            "TextNode",
            "Settings",
            "SQLDatabase",
            "Table"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/sql.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "table_name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "table",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ref_doc_id_column",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_context_container",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "ref_doc_id_column",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build index from nodes."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Attribute(value=Name(id='SQLQueryMode', ctx=Load()), attr='NL', ctx=Load())"
                    },
                    {
                        "name": "query_mode",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SQLQueryMode",
                "docstring": null
            },
            {
                "name": "SQLStructStoreIndex",
                "docstring": "SQL Struct Store Index.\n\nThe SQLStructStoreIndex is an index that uses a SQL database\nunder the hood. During index construction, the data can be inferred\nfrom unstructured documents given a schema extract prompt,\nor it can be pre-loaded in the database.\n\nDuring query time, the user can either specify a raw SQL query\nor a natural language query to retrieve their data.\n\nNOTE: this is deprecated.\n\nArgs:\n    documents (Optional[Sequence[DOCUMENTS_INPUT]]): Documents to index.\n        NOTE: in the SQL index, this is an optional field.\n    sql_database (Optional[SQLDatabase]): SQL database to use,\n        including table names to specify.\n        See :ref:`Ref-Struct-Store` for more details.\n    table_name (Optional[str]): Name of the table to use\n        for extracting data.\n        Either table_name or table must be specified.\n    table (Optional[Table]): SQLAlchemy Table object to use.\n        Specifying the Table object explicitly, instead of\n        the table name, allows you to pass in a view.\n        Either table_name or table must be specified.\n    sql_context_container (Optional[SQLContextContainer]): SQL context container.\n        an be generated from a SQLContextContainerBuilder.\n        See :ref:`Ref-Struct-Store` for more details."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "defaultdict",
            "Enum",
            "Any",
            "Optional",
            "Sequence",
            "Union",
            "BaseQueryEngine",
            "BaseRetriever",
            "SQLStructTable",
            "SQLContextContainer",
            "SQLStructDatapointExtractor",
            "BaseStructStoreIndex",
            "SQLContextContainerBuilder",
            "LLMType",
            "BaseNode",
            "Settings",
            "SQLDatabase",
            "Table",
            "NLStructStoreQueryEngine",
            "SQLStructStoreQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/struct_store/base.py": {
        "functions": [
            {
                "name": "default_output_parser",
                "parameters": [
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Parse output of schema extraction.\n\nAttempt to parse the following format from the default prompt:\nfield1: <value>, field2: <value>, ..."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "schema_extract_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "BaseStructStoreIndex",
                "docstring": "Base Struct Store Index."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Any",
            "Callable",
            "Dict",
            "Generic",
            "Optional",
            "Sequence",
            "TypeVar",
            "BaseStructTable",
            "BaseIndex",
            "BasePromptTemplate",
            "DEFAULT_SCHEMA_EXTRACT_PROMPT",
            "BaseNode",
            "RefDocInfo"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/managed/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseManagedIndex"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/managed/types.py": {
        "functions": [],
        "classes": [
            {
                "name": "ManagedIndexQueryMode",
                "docstring": "Managed Index query mode."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/managed/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a set of documents (each a node)."
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a document and it's nodes by using ref_doc_id."
            },
            {
                "name": "update_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "document",
                        "default": null
                    }
                ],
                "docstring": "Update a document and it's corresponding nodes."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return a Retriever for this managed index."
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            },
            {
                "name": "from_documents",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "documents",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "transformations",
                        "default": null
                    }
                ],
                "docstring": "Build an index from a sequence of documents."
            }
        ],
        "classes": [
            {
                "name": "BaseManagedIndex",
                "docstring": "Managed Index.\nThe managed service can index documents into a managed service.\nHow documents are structured into nodes is a detail for the managed service,\nand not exposed in this interface (although could be controlled by\nconfiguration parameters).\n\nArgs:\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "BaseRetriever",
            "CallbackManager",
            "IndexDict",
            "BaseIndex",
            "IndexType",
            "BaseNode",
            "Document",
            "TransformComponent",
            "RefDocInfo",
            "StorageContext"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/knowledge_graph/retrievers.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "query_keyword_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_keywords_per_query",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "num_chunks_per_query",
                        "default": "Attribute(value=Name(id='KGRetrieverMode', ctx=Load()), attr='KEYWORD', ctx=Load())"
                    },
                    {
                        "name": "include_text",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "retriever_mode",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "graph_store_query_depth",
                        "default": "Name(id='REL_TEXT_LIMIT', ctx=Load())"
                    },
                    {
                        "name": "use_global_node_triplets",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_knowledge_sequence",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords."
            },
            {
                "name": "_extract_rel_text_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "rel_texts",
                        "default": null
                    }
                ],
                "docstring": "Find the keywords for given rel text triplets."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            },
            {
                "name": "_get_metadata_for_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get metadata for response."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_extract_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_extract_template",
                        "default": "Constant(value='union')"
                    },
                    {
                        "name": "entity_extract_policy",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "synonym_expand_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "synonym_expand_template",
                        "default": "Constant(value='union')"
                    },
                    {
                        "name": "synonym_expand_policy",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "max_entities",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "max_synonyms",
                        "default": "Constant(value='keyword')"
                    },
                    {
                        "name": "retriever_mode",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "with_nl2graphquery",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "graph_traversal_depth",
                        "default": "Name(id='REL_TEXT_LIMIT', ctx=Load())"
                    },
                    {
                        "name": "max_knowledge_sequence",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize the retriever."
            },
            {
                "name": "_process_entities",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='union')"
                    },
                    {
                        "name": "query_str",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "handle_fn",
                        "default": "Constant(value='KEYWORDS:')"
                    },
                    {
                        "name": "handle_llm_prompt_template",
                        "default": null
                    },
                    {
                        "name": "cross_handle_policy",
                        "default": null
                    },
                    {
                        "name": "max_items",
                        "default": null
                    },
                    {
                        "name": "result_start_token",
                        "default": null
                    }
                ],
                "docstring": "Get entities from query string."
            },
            {
                "name": "_get_entities",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Get entities from query string."
            },
            {
                "name": "_expand_synonyms",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "keywords",
                        "default": null
                    }
                ],
                "docstring": "Expand synonyms or similar expressions for keywords."
            },
            {
                "name": "_get_knowledge_sequence",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "entities",
                        "default": null
                    }
                ],
                "docstring": "Get knowledge sequence from entities."
            },
            {
                "name": "_build_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "knowledge_sequence",
                        "default": null
                    },
                    {
                        "name": "rel_map",
                        "default": null
                    }
                ],
                "docstring": "Build nodes from knowledge sequence."
            },
            {
                "name": "_retrieve_keyword",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve in keyword mode."
            },
            {
                "name": "_retrieve_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve in embedding mode."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Build nodes for response."
            }
        ],
        "classes": [
            {
                "name": "KGRetrieverMode",
                "docstring": "Query mode enum for Knowledge Graphs.\n\nCan be passed as the enum struct, or as the underlying string.\n\nAttributes:\n    KEYWORD (\"keyword\"): Default query mode, using keywords to find triplets.\n    EMBEDDING (\"embedding\"): Embedding mode, using embeddings to find\n        similar triplets.\n    HYBRID (\"hybrid\"): Hybrid mode, combining both keywords and embeddings\n        to find relevant triplets."
            },
            {
                "name": "KGTableRetriever",
                "docstring": "KG Table Retriever.\n\nArguments are shared among subclasses.\n\nArgs:\n    query_keyword_extract_template (Optional[QueryKGExtractPrompt]): A Query\n        KG Extraction\n        Prompt (see :ref:`Prompt-Templates`).\n    refine_template (Optional[BasePromptTemplate]): A Refinement Prompt\n        (see :ref:`Prompt-Templates`).\n    text_qa_template (Optional[BasePromptTemplate]): A Question Answering Prompt\n        (see :ref:`Prompt-Templates`).\n    max_keywords_per_query (int): Maximum number of keywords to extract from query.\n    num_chunks_per_query (int): Maximum number of text chunks to query.\n    include_text (bool): Use the document text source from each relevant triplet\n        during queries.\n    retriever_mode (KGRetrieverMode): Specifies whether to use keywords,\n        embeddings, or both to find relevant triplets. Should be one of \"keyword\",\n        \"embedding\", or \"hybrid\".\n    similarity_top_k (int): The number of top embeddings to use\n        (if embeddings are used).\n    graph_store_query_depth (int): The depth of the graph store query.\n    use_global_node_triplets (bool): Whether to get more keywords(entities) from\n        text chunks matched by keywords. This helps introduce more global knowledge.\n        While it's more expensive, thus to be turned off by default.\n    max_knowledge_sequence (int): The maximum number of knowledge sequence to\n        include in the response. By default, it's 30."
            },
            {
                "name": "KnowledgeGraphRAGRetriever",
                "docstring": "Knowledge Graph RAG retriever.\n\nRetriever that perform SubGraph RAG towards knowledge graph.\n\nArgs:\n    storage_context (Optional[StorageContext]): A storage context to use.\n    entity_extract_fn (Optional[Callable]): A function to extract entities.\n    entity_extract_template Optional[BasePromptTemplate]): A Query Key Entity\n        Extraction Prompt (see :ref:`Prompt-Templates`).\n    entity_extract_policy (Optional[str]): The entity extraction policy to use.\n        default: \"union\"\n        possible values: \"union\", \"intersection\"\n    synonym_expand_fn (Optional[Callable]): A function to expand synonyms.\n    synonym_expand_template (Optional[QueryKeywordExpandPrompt]): A Query Key Entity\n        Expansion Prompt (see :ref:`Prompt-Templates`).\n    synonym_expand_policy (Optional[str]): The synonym expansion policy to use.\n        default: \"union\"\n        possible values: \"union\", \"intersection\"\n    max_entities (int): The maximum number of entities to extract.\n        default: 5\n    max_synonyms (int): The maximum number of synonyms to expand per entity.\n        default: 5\n    retriever_mode (Optional[str]): The retriever mode to use.\n        default: \"keyword\"\n        possible values: \"keyword\", \"embedding\", \"keyword_embedding\"\n    with_nl2graphquery (bool): Whether to combine NL2GraphQuery in context.\n        default: False\n    graph_traversal_depth (int): The depth of graph traversal.\n        default: 2\n    max_knowledge_sequence (int): The maximum number of knowledge sequence to\n        include in the response. By default, it's 30.\n    verbose (bool): Whether to print out debug info."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "deprecated",
            "logging",
            "defaultdict",
            "Enum",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Set",
            "Tuple",
            "BaseRetriever",
            "BaseEmbedding",
            "CallbackManager",
            "extract_keywords_given_response",
            "KnowledgeGraphIndex",
            "get_top_k_embeddings",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptType",
            "DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE",
            "BaseNode",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings",
            "StorageContext",
            "print_text",
            "truncate_text",
            "KnowledgeGraphQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/knowledge_graph/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "KnowledgeGraphIndex",
            "KGTableRetriever",
            "KnowledgeGraphRAGRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/knowledge_graph/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kg_triplet_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_triplets_per_chunk",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_embeddings",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=128)"
                    },
                    {
                        "name": "max_object_length",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kg_triplet_extract_fn",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "graph_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retriever_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_extract_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_llm_extract_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords from text."
            },
            {
                "name": "_parse_triplet_response",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=128)"
                    },
                    {
                        "name": "max_length",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "upsert_triplet",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "triplet",
                        "default": null
                    },
                    {
                        "name": "include_embeddings",
                        "default": null
                    }
                ],
                "docstring": "Insert triplets and optionally embeddings.\n\nUsed for manual insertion of KG triplets (in the form\nof (subject, relationship, object)).\n\nArgs:\n    triplet (tuple): Knowledge triplet\n    embedding (Any, optional): Embedding option for the triplet. Defaults to None."
            },
            {
                "name": "add_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "keywords",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Add node.\n\nUsed for manual insertion of nodes (keyed by keywords).\n\nArgs:\n    keywords (List[str]): Keywords to index the node.\n    node (Node): Node to be indexed."
            },
            {
                "name": "upsert_triplet_and_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "triplet",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "include_embeddings",
                        "default": null
                    }
                ],
                "docstring": "Upsert KG triplet and node.\n\nCalls both upsert_triplet and add_node.\nBehavior is idempotent; if Node already exists,\nonly triplet will be added.\n\nArgs:\n    keywords (List[str]): Keywords to index the node.\n    node (Node): Node to be indexed.\n    include_embeddings (bool): Option to add embeddings for triplets. Defaults to False"
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            },
            {
                "name": "get_networkx_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": "Get networkx representation of the graph structure.\n\nArgs:\n    limit (int): Number of starting nodes to be included in the graph.\n\nNOTE: This function requires networkx to be installed.\nNOTE: This is a beta feature."
            },
            {
                "name": "query_context",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "KnowledgeGraphIndex",
                "docstring": "Knowledge Graph Index.\n\nBuild a KG by extracting triplets, and leveraging the KG during query-time.\n\nArgs:\n    kg_triplet_extract_template (BasePromptTemplate): The prompt to use for\n        extracting triplets.\n    max_triplets_per_chunk (int): The maximum number of triplets to extract.\n    storage_context (Optional[StorageContext]): The storage context to use.\n    graph_store (Optional[GraphStore]): The graph store to use.\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False.\n    include_embeddings (bool): Whether to include embeddings in the index.\n        Defaults to False.\n    max_object_length (int): The maximum length of the object in a triplet.\n        Defaults to 128.\n    kg_triplet_extract_fn (Optional[Callable]): The function to use for\n        extracting triplets. Defaults to None."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "deprecated",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "BaseRetriever",
            "BaseEmbedding",
            "GRAPH_STORE_KEY",
            "KG",
            "SimpleGraphStore",
            "GraphStore",
            "BaseIndex",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_KG_TRIPLET_EXTRACT_PROMPT",
            "BaseNode",
            "IndexNode",
            "MetadataMode",
            "Settings",
            "RefDocInfo",
            "StorageContext",
            "get_tqdm_iterable",
            "KGRetrieverMode",
            "KGTableRetriever",
            "networkx"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/empty/retrievers.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input_prompt",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve relevant nodes."
            }
        ],
        "classes": [
            {
                "name": "EmptyIndexRetriever",
                "docstring": "EmptyIndex query.\n\nPasses the raw LLM call to the underlying LLM model.\n\nArgs:\n    input_prompt (Optional[BasePromptTemplate]): A Simple Input Prompt\n        (see :ref:`Prompt-Templates`)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "BaseRetriever",
            "CallbackManager",
            "EmptyIndex",
            "BasePromptTemplate",
            "DEFAULT_SIMPLE_INPUT_PROMPT",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/empty/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "EmptyIndex",
            "GPTEmptyIndex",
            "EmptyIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/empty/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from documents.\n\nArgs:\n    documents (List[BaseDocument]): A list of documents.\n\nReturns:\n    IndexList: The created summary index."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "EmptyIndex",
                "docstring": "Empty Index.\n\nAn index that doesn't contain any documents. Used for\npure LLM calls.\nNOTE: this exists because an empty index it allows certain properties,\nsuch as the ability to be composed with other indices + token\ncounting + others."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "BaseQueryEngine",
            "BaseRetriever",
            "EmptyIndexStruct",
            "BaseIndex",
            "LLMType",
            "BaseNode",
            "RefDocInfo",
            "EmptyIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/keyword_table/simple_base.py": {
        "functions": [
            {
                "name": "_extract_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords from text."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='KeywordTableRetrieverMode', ctx=Load()), attr='SIMPLE', ctx=Load())"
                    },
                    {
                        "name": "retriever_mode",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimpleKeywordTableIndex",
                "docstring": "Simple Keyword Table Index.\n\nThis index uses a simple regex extractor to extract keywords from the text."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Set",
            "Union",
            "BaseRetriever",
            "BaseKeywordTableIndex",
            "KeywordTableRetrieverMode",
            "simple_extract_keywords",
            "DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/keyword_table/rake_base.py": {
        "functions": [
            {
                "name": "_extract_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords from text."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='KeywordTableRetrieverMode', ctx=Load()), attr='RAKE', ctx=Load())"
                    },
                    {
                        "name": "retriever_mode",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "RAKEKeywordTableIndex",
                "docstring": "RAKE Keyword Table Index.\n\nThis index uses a RAKE keyword extractor to extract keywords from the text."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Set",
            "Union",
            "BaseRetriever",
            "BaseKeywordTableIndex",
            "KeywordTableRetrieverMode",
            "rake_extract_keywords"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/keyword_table/retrievers.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "keyword_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "query_keyword_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_keywords_per_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_chunks_per_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Get nodes for response."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "keyword_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "query_keyword_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_keywords_per_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_chunks_per_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords."
            },
            {
                "name": "_get_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords."
            },
            {
                "name": "_get_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords."
            }
        ],
        "classes": [
            {
                "name": "BaseKeywordTableRetriever",
                "docstring": "Base Keyword Table Retriever.\n\nArguments are shared among subclasses.\n\nArgs:\n    keyword_extract_template (Optional[BasePromptTemplate]): A Keyword\n        Extraction Prompt\n        (see :ref:`Prompt-Templates`).\n    query_keyword_extract_template (Optional[BasePromptTemplate]): A Query\n        Keyword Extraction\n        Prompt (see :ref:`Prompt-Templates`).\n    refine_template (Optional[BasePromptTemplate]): A Refinement Prompt\n        (see :ref:`Prompt-Templates`).\n    text_qa_template (Optional[BasePromptTemplate]): A Question Answering Prompt\n        (see :ref:`Prompt-Templates`).\n    max_keywords_per_query (int): Maximum number of keywords to extract from query.\n    num_chunks_per_query (int): Maximum number of text chunks to query."
            },
            {
                "name": "KeywordTableGPTRetriever",
                "docstring": "Keyword Table Index GPT Retriever.\n\nExtracts keywords using GPT. Set when using `retriever_mode=\"default\"`.\n\nSee BaseGPTKeywordTableQuery for arguments."
            },
            {
                "name": "KeywordTableSimpleRetriever",
                "docstring": "Keyword Table Index Simple Retriever.\n\nExtracts keywords using simple regex-based keyword extractor.\nSet when `retriever_mode=\"simple\"`.\n\nSee BaseGPTKeywordTableQuery for arguments."
            },
            {
                "name": "KeywordTableRAKERetriever",
                "docstring": "Keyword Table Index RAKE Retriever.\n\nExtracts keywords using RAKE keyword extractor.\nSet when `retriever_mode=\"rake\"`.\n\nSee BaseGPTKeywordTableQuery for arguments."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "abstractmethod",
            "defaultdict",
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseRetriever",
            "CallbackManager",
            "BaseKeywordTableIndex",
            "extract_keywords_given_response",
            "rake_extract_keywords",
            "simple_extract_keywords",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_KEYWORD_EXTRACT_TEMPLATE",
            "DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "truncate_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/keyword_table/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "GPTKeywordTableIndex",
            "KeywordTableIndex",
            "GPTRAKEKeywordTableIndex",
            "RAKEKeywordTableIndex",
            "KeywordTableGPTRetriever",
            "KeywordTableRAKERetriever",
            "KeywordTableSimpleRetriever",
            "GPTSimpleKeywordTableIndex",
            "SimpleKeywordTableIndex"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/keyword_table/utils.py": {
        "functions": [
            {
                "name": "simple_extract_keywords",
                "parameters": [
                    {
                        "name": "text_chunk",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_keywords",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "filter_stopwords",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords with simple algorithm."
            },
            {
                "name": "rake_extract_keywords",
                "parameters": [
                    {
                        "name": "text_chunk",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_keywords",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "expand_with_subtokens",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords with RAKE."
            },
            {
                "name": "extract_keywords_given_response",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "lowercase",
                        "default": "Constant(value='')"
                    },
                    {
                        "name": "start_token",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords given the GPT-generated response.\n\nUsed by keyword table indices.\nParses <start_token>: <word1>, <word2>, ... into [word1, word2, ...]\nRaises exception if response doesn't start with <start_token>"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Counter",
            "Optional",
            "Set",
            "expand_tokens_with_subtokens",
            "globals_helper",
            "nltk",
            "Rake"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/keyword_table/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "keyword_extract_template",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_keywords_per_chunk",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='KeywordTableRetrieverMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "retriever_mode",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_extract_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords from text."
            },
            {
                "name": "_add_nodes_to_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Add document to index."
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert nodes."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            },
            {
                "name": "_extract_keywords",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract keywords from text."
            }
        ],
        "classes": [
            {
                "name": "KeywordTableRetrieverMode",
                "docstring": null
            },
            {
                "name": "BaseKeywordTableIndex",
                "docstring": "Base Keyword Table Index.\n\nThis index extracts keywords from the text, and maps each\nkeyword to the node(s) that it corresponds to. In this sense it mimics a\n\"hash table\". During index construction, the keyword table is constructed\nby extracting keywords from each node and creating an internal mapping.\n\nDuring query time, the keywords are extracted from the query text, and these\nkeywords are used to index into the keyword table. The retrieved nodes\nare then used to answer the query.\n\nArgs:\n    keyword_extract_template (Optional[BasePromptTemplate]): A Keyword\n        Extraction Prompt\n        (see :ref:`Prompt-Templates`).\n    use_async (bool): Whether to use asynchronous calls. Defaults to False.\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False."
            },
            {
                "name": "KeywordTableIndex",
                "docstring": "Keyword Table Index.\n\nThis index uses a GPT model to extract keywords from the text."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Enum",
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "Set",
            "Union",
            "run_async_tasks",
            "BaseRetriever",
            "KeywordTable",
            "BaseIndex",
            "extract_keywords_given_response",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_KEYWORD_EXTRACT_TEMPLATE",
            "DEFAULT_QUERY_KEYWORD_EXTRACT_TEMPLATE",
            "BaseNode",
            "IndexNode",
            "MetadataMode",
            "Settings",
            "RefDocInfo",
            "get_tqdm_iterable",
            "KeywordTableGPTRetriever",
            "KeywordTableRAKERetriever",
            "KeywordTableSimpleRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "sub_retrievers",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "num_workers",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_deduplicate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PGRetriever",
                "docstring": "A retriever that uses multiple sub-retrievers to retrieve nodes from a property graph.\n\nArgs:\n    sub_retrievers (List[BasePGRetriever]):\n        The sub-retrievers to use.\n    num_workers (int, optional):\n        The number of workers to use for async retrieval. Defaults to 4.\n    use_async (bool, optional):\n        Whether to use async retrieval. Defaults to True.\n    show_progress (bool, optional):\n        Whether to show progress bars. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "tqdm",
            "Any",
            "List",
            "asyncio_run",
            "run_jobs",
            "BaseRetriever",
            "BasePGRetriever",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PropertyGraphIndex",
            "PGRetriever",
            "BasePGRetriever",
            "CustomPGRetriever",
            "CUSTOM_RETRIEVE_TYPE",
            "CypherTemplateRetriever",
            "LLMSynonymRetriever",
            "TextToCypherRetriever",
            "VectorContextRetriever",
            "ImplicitPathExtractor",
            "SchemaLLMPathExtractor",
            "SimpleLLMPathExtractor",
            "DynamicLLMPathExtractor",
            "default_parse_triplets_fn"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/utils.py": {
        "functions": [
            {
                "name": "default_parse_triplets_fn",
                "parameters": [
                    {
                        "name": "response",
                        "default": "Constant(value=128)"
                    },
                    {
                        "name": "max_length",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Tuple"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kg_extractors",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "property_graph_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "embed_kg_nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_existing",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "property_graph_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "kg_extractors",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_kg_nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "storage_context",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Create an index from an existing property graph store (and optional vector store)."
            },
            {
                "name": "property_graph_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the labelled property graph store."
            },
            {
                "name": "vector_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_insert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert nodes to the index struct."
            },
            {
                "name": "_insert_nodes_to_vector_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert vector nodes."
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build index from nodes."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sub_retrievers",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_text",
                        "default": null
                    }
                ],
                "docstring": "Return a retriever for the index.\n\nArgs:\n    sub_retrievers (Optional[List[BasePGRetriever]]):\n        A list of sub-retrievers to use. If not provided, a default list will be used:\n        `[LLMSynonymRetriever, VectorContextRetriever]` if the graph store supports vector queries.\n    include_text (bool):\n        Whether to include source-text in the retriever results.\n    **kwargs:\n        Additional kwargs to pass to the retriever."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Index-specific logic for inserting nodes to the index struct."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "PropertyGraphIndex",
                "docstring": "An index for a property graph.\n\nArgs:\n    nodes (Optional[Sequence[BaseNode]]):\n        A list of nodes to insert into the index.\n    llm (Optional[LLM]):\n        The language model to use for extracting triplets. Defaults to `Settings.llm`.\n    kg_extractors (Optional[List[TransformComponent]]):\n        A list of transformations to apply to the nodes to extract triplets.\n        Defaults to `[SimpleLLMPathExtractor(llm=llm), ImplicitEdgeExtractor()]`.\n    property_graph_store (Optional[PropertyGraphStore]):\n        The property graph store to use. If not provided, a new `SimplePropertyGraphStore` will be created.\n    vector_store (Optional[BasePydanticVectorStore]):\n        The vector store index to use, if the graph store does not support vector queries.\n    use_async (bool):\n        Whether to use async for transformations. Defaults to `True`.\n    embed_model (Optional[EmbedType]):\n        The embedding model to use for embedding nodes.\n        If not provided, `Settings.embed_model` will be used if `embed_kg_nodes=True`.\n    embed_kg_nodes (bool):\n        Whether to embed the KG nodes. Defaults to `True`.\n    callback_manager (Optional[CallbackManager]):\n        The callback manager to use.\n    transformations (Optional[List[TransformComponent]]):\n        A list of transformations to apply to the nodes before inserting them into the index.\n        These are applied prior to the `kg_extractors`.\n    storage_context (Optional[StorageContext]):\n        The storage context to use.\n    show_progress (bool):\n        Whether to show progress bars for transformations. Defaults to `False`."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "TYPE_CHECKING",
            "IndexLPG",
            "BaseRetriever",
            "LLM",
            "EmbedType",
            "resolve_embed_model",
            "CallbackManager",
            "SimplePropertyGraphStore",
            "KG_NODES_KEY",
            "KG_RELATIONS_KEY",
            "VECTOR_SOURCE_KEY",
            "DEFAULT_VECTOR_STORE",
            "BaseIndex",
            "SimpleLLMPathExtractor",
            "ImplicitPathExtractor",
            "run_transformations",
            "arun_transformations",
            "LabelledNode",
            "Relation",
            "PropertyGraphStore",
            "TRIPLET_SOURCE_KEY",
            "RefDocInfo",
            "StorageContext",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "TransformComponent",
            "Settings",
            "BasePydanticVectorStore",
            "BasePGRetriever",
            "PGRetriever",
            "VectorContextRetriever",
            "LLMSynonymRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "GPTVectorStoreIndex",
            "VectorStoreIndex",
            "VectorIndexAutoRetriever",
            "VectorIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "store_nodes_override",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=2048)"
                    },
                    {
                        "name": "insert_batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "transformations",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "from_vector_store",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": null
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "vector_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_node_with_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Get tuples of id, node, and embedding.\n\nAllows us to store these nodes in a vector store.\nEmbeddings are called in batches."
            },
            {
                "name": "_add_nodes_to_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Add document to index."
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build index from nodes."
            },
            {
                "name": "build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build the index from nodes.\n\nNOTE: Overrides BaseIndex.build_index_from_nodes.\n    VectorStoreIndex only stores nodes in document store\n    if vector store does not store text"
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "insert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert nodes.\n\nNOTE: overrides BaseIndex.insert_nodes.\n    VectorStoreIndex only stores nodes in document store\n    if vector store does not store text"
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a list of nodes from the index.\n\nArgs:\n    node_ids (List[str]): A list of node_ids from the nodes to delete"
            },
            {
                "name": "_delete_from_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_delete_from_docstore",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a document and it's nodes by using ref_doc_id."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "VectorStoreIndex",
                "docstring": "Vector Store Index.\n\nArgs:\n    use_async (bool): Whether to use asynchronous calls. Defaults to False.\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False.\n    store_nodes_override (bool): set to True to always store Node objects in index\n        store and document store even if vector store keeps text. Defaults to False"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "run_async_tasks",
            "BaseRetriever",
            "CallbackManager",
            "IndexDict",
            "EmbedType",
            "resolve_embed_model",
            "BaseIndex",
            "async_embed_nodes",
            "embed_nodes",
            "BaseNode",
            "ImageNode",
            "IndexNode",
            "MetadataMode",
            "TransformComponent",
            "Settings",
            "RefDocInfo",
            "StorageContext",
            "iter_batch",
            "BasePydanticVectorStore",
            "VectorIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/composability/graph.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "all_indices",
                        "default": null
                    },
                    {
                        "name": "root_id",
                        "default": null
                    },
                    {
                        "name": "storage_context",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "root_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "all_indices",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "root_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_indices",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "root_index_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "children_indices",
                        "default": null
                    },
                    {
                        "name": "index_summaries",
                        "default": null
                    },
                    {
                        "name": "storage_context",
                        "default": null
                    }
                ],
                "docstring": "Create composable graph using this index class as the root."
            },
            {
                "name": "get_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct_id",
                        "default": null
                    }
                ],
                "docstring": "Get index from index struct id."
            },
            {
                "name": "as_query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ComposableGraph",
                "docstring": "Composable graph."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "cast",
            "BaseQueryEngine",
            "IndexStruct",
            "BaseIndex",
            "IndexNode",
            "NodeRelationship",
            "ObjectType",
            "RelatedNodeInfo",
            "StorageContext",
            "Settings",
            "ComposableGraphQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/composability/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ComposableGraph"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common_tree/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common_tree/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_children",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summary_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "docstore",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    },
                    {
                        "name": "use_async",
                        "default": null
                    }
                ],
                "docstring": "Initialize with params."
            },
            {
                "name": "docstore",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return docstore."
            },
            {
                "name": "build_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "build_tree",
                        "default": null
                    }
                ],
                "docstring": "Build from text.\n\nReturns:\n    IndexGraph: graph object consisting of all_nodes, root_nodes"
            },
            {
                "name": "_prepare_node_and_text_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cur_node_ids",
                        "default": null
                    }
                ],
                "docstring": "Prepare node and text chunks."
            },
            {
                "name": "_construct_parent_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "index_graph",
                        "default": null
                    },
                    {
                        "name": "indices",
                        "default": null
                    },
                    {
                        "name": "cur_nodes_chunks",
                        "default": null
                    },
                    {
                        "name": "summaries",
                        "default": null
                    }
                ],
                "docstring": "Construct parent nodes.\n\nSave nodes to docstore."
            },
            {
                "name": "build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "index_graph",
                        "default": null
                    },
                    {
                        "name": "cur_node_ids",
                        "default": null
                    },
                    {
                        "name": "all_node_ids",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Consolidates chunks recursively, in a bottoms-up fashion."
            }
        ],
        "classes": [
            {
                "name": "GPTTreeIndexBuilder",
                "docstring": "GPT tree index builder.\n\nHelper class to build the tree-structured index,\nor to synthesize an answer."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "logging",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "run_async_tasks",
            "CBEventType",
            "EventPayload",
            "IndexGraph",
            "PromptHelper",
            "get_sorted_node_list",
            "truncate_text",
            "LLM",
            "BasePromptTemplate",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "Settings",
            "BaseDocumentStore",
            "get_default_docstore",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/list/retrievers.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes."
            },
            {
                "name": "_get_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get top nodes by similarity to the query."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "choice_select_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "choice_batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "format_node_batch_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parse_choice_select_answer_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes."
            }
        ],
        "classes": [
            {
                "name": "SummaryIndexRetriever",
                "docstring": "Simple retriever for SummaryIndex that returns all nodes.\n\nArgs:\n    index (SummaryIndex): The index to retrieve from."
            },
            {
                "name": "SummaryIndexEmbeddingRetriever",
                "docstring": "Embedding based retriever for SummaryIndex.\n\nGenerates embeddings in a lazy fashion for all\nnodes that are traversed.\n\nArgs:\n    index (SummaryIndex): The index to retrieve from.\n    similarity_top_k (Optional[int]): The number of top nodes to return."
            },
            {
                "name": "SummaryIndexLLMRetriever",
                "docstring": "LLM retriever for SummaryIndex.\n\nArgs:\n    index (SummaryIndex): The index to retrieve from.\n    choice_select_prompt (Optional[PromptTemplate]): A Choice-Select Prompt\n       (see :ref:`Prompt-Templates`).)\n    choice_batch_size (int): The number of nodes to query at a time.\n    format_node_batch_fn (Optional[Callable]): A function that formats a\n        batch of nodes.\n    parse_choice_select_answer_fn (Optional[Callable]): A function that parses the\n        choice select answer."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Callable",
            "List",
            "Optional",
            "Tuple",
            "BaseRetriever",
            "BaseEmbedding",
            "CallbackManager",
            "SummaryIndex",
            "get_top_k_embeddings",
            "default_format_node_batch_fn",
            "default_parse_choice_select_answer_fn",
            "LLM",
            "PromptTemplate",
            "DEFAULT_CHOICE_SELECT_PROMPT",
            "BaseNode",
            "MetadataMode",
            "NodeWithScore",
            "QueryBundle",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/list/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "GPTListIndex",
            "ListIndex",
            "SummaryIndex",
            "ListIndexEmbeddingRetriever",
            "ListIndexLLMRetriever",
            "ListIndexRetriever",
            "SummaryIndexEmbeddingRetriever",
            "SummaryIndexLLMRetriever",
            "SummaryIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/list/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='ListRetrieverMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "retriever_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Build the index from documents.\n\nArgs:\n    documents (List[BaseDocument]): A list of documents.\n\nReturns:\n    IndexList: The created summary index."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": "Delete a node."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "ListRetrieverMode",
                "docstring": null
            },
            {
                "name": "SummaryIndex",
                "docstring": "Summary Index.\n\nThe summary index is a simple data structure where nodes are stored in\na sequence. During index construction, the document texts are\nchunked up, converted to nodes, and stored in a list.\n\nDuring query time, the summary index iterates through the nodes\nwith some optional filter parameters, and synthesizes an\nanswer from all the nodes.\n\nArgs:\n    text_qa_template (Optional[BasePromptTemplate]): A Question-Answer Prompt\n        (see :ref:`Prompt-Templates`).\n        NOTE: this is a deprecated field.\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "Union",
            "BaseRetriever",
            "BaseEmbedding",
            "IndexList",
            "BaseIndex",
            "LLM",
            "BaseNode",
            "IndexNode",
            "Settings",
            "RefDocInfo",
            "get_tqdm_iterable",
            "SummaryIndexEmbeddingRetriever",
            "SummaryIndexLLMRetriever",
            "SummaryIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/multi_modal/retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_SIMILARITY_TOP_K', ctx=Load())"
                    },
                    {
                        "name": "index",
                        "default": "Name(id='DEFAULT_SIMILARITY_TOP_K', ctx=Load())"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Attribute(value=Name(id='VectorStoreQueryMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "image_similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store_query_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "alpha",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "doc_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sparse_top_k",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "similarity_top_k",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return similarity top k."
            },
            {
                "name": "similarity_top_k",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "similarity_top_k",
                        "default": null
                    }
                ],
                "docstring": "Set similarity top k."
            },
            {
                "name": "image_similarity_top_k",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return image similarity top k."
            },
            {
                "name": "image_similarity_top_k",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "image_similarity_top_k",
                        "default": null
                    }
                ],
                "docstring": "Set image similarity top k."
            },
            {
                "name": "_build_vector_store_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle_with_embeddings",
                        "default": null
                    },
                    {
                        "name": "similarity_top_k",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_text_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "text_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_text_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "text_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_image_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_to_image_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_or_query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_nodes_with_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle_with_embeddings",
                        "default": null
                    },
                    {
                        "name": "similarity_top_k",
                        "default": null
                    },
                    {
                        "name": "vector_store",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_node_list_from_query_result",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_result",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MultiModalVectorIndexRetriever",
                "docstring": "Multi Modal Vector index retriever.\n\nArgs:\n    index (MultiModalVectorStoreIndex): Multi Modal vector store index for images and texts.\n    similarity_top_k (int): number of top k results to return.\n    vector_store_query_mode (str): vector store query mode\n        See reference for VectorStoreQueryMode for full list of supported modes.\n    filters (Optional[MetadataFilters]): metadata filters, defaults to None\n    alpha (float): weight for sparse/dense retrieval, only used for\n        hybrid query mode.\n    doc_ids (Optional[List[str]]): list of documents to constrain search.\n    vector_store_kwargs (dict): Additional vector store specific kwargs to pass\n        through to the vector store at query time."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "List",
            "Optional",
            "MultiModalRetriever",
            "BaseEmbedding",
            "CallbackManager",
            "DEFAULT_SIMILARITY_TOP_K",
            "IndexDict",
            "MultiModalEmbedding",
            "log_vector_store_query_result",
            "NodeWithScore",
            "ObjectType",
            "QueryBundle",
            "QueryType",
            "Settings",
            "MetadataFilters",
            "BasePydanticVectorStore",
            "VectorStoreQuery",
            "VectorStoreQueryMode",
            "VectorStoreQueryResult",
            "MultiModalVectorStoreIndex"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/multi_modal/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MultiModalVectorStoreIndex",
            "MultiModalVectorIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/multi_modal/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "use_async",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "store_nodes_override",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_vector_store",
                        "default": "Constant(value='clip:ViT-B/32')"
                    },
                    {
                        "name": "image_embed_model",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_image_to_text",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_image_vector_store_empty",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_text_vector_store_empty",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "image_vector_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "image_embed_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "is_image_vector_store_empty",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "is_text_vector_store_empty",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_query_engine",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_vector_store",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value='clip')"
                    },
                    {
                        "name": "image_vector_store",
                        "default": null
                    },
                    {
                        "name": "image_embed_model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_node_with_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    },
                    {
                        "name": "is_image",
                        "default": null
                    }
                ],
                "docstring": "Get tuples of id, node, and embedding.\n\nAllows us to store these nodes in a vector store.\nEmbeddings are called in batches."
            },
            {
                "name": "_add_nodes_to_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Add document to index."
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a document and it's nodes by using ref_doc_id."
            }
        ],
        "classes": [
            {
                "name": "MultiModalVectorStoreIndex",
                "docstring": "Multi-Modal Vector Store Index.\n\nArgs:\n    use_async (bool): Whether to use asynchronous calls. Defaults to False.\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False.\n    store_nodes_override (bool): set to True to always store Node objects in index\n        store and document store even if vector store keeps text. Defaults to False"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "BaseEmbedding",
            "IndexDict",
            "MultiModelIndexDict",
            "MultiModalEmbedding",
            "EmbedType",
            "resolve_embed_model",
            "async_embed_image_nodes",
            "async_embed_nodes",
            "embed_image_nodes",
            "embed_nodes",
            "MultiModalVectorIndexRetriever",
            "VectorStoreIndex",
            "LLMType",
            "MultiModalLLM",
            "SimpleMultiModalQueryEngine",
            "BaseNode",
            "ImageNode",
            "TextNode",
            "Settings",
            "StorageContext",
            "DEFAULT_VECTOR_STORE",
            "SimpleVectorStore",
            "BasePydanticVectorStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/document_summary/retrievers.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "choice_select_prompt",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "choice_batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "choice_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "format_node_batch_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parse_choice_select_answer_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes."
            }
        ],
        "classes": [
            {
                "name": "DocumentSummaryIndexLLMRetriever",
                "docstring": "Document Summary Index LLM Retriever.\n\nBy default, select relevant summaries from index using LLM calls.\n\nArgs:\n    index (DocumentSummaryIndex): The index to retrieve from.\n    choice_select_prompt (Optional[BasePromptTemplate]): The prompt to use for selecting relevant summaries.\n    choice_batch_size (int): The number of summary nodes to send to LLM at a time.\n    choice_top_k (int): The number of summary nodes to retrieve.\n    format_node_batch_fn (Callable): Function to format a batch of nodes for LLM.\n    parse_choice_select_answer_fn (Callable): Function to parse LLM response.\n    llm (LLM): The llm to use."
            },
            {
                "name": "DocumentSummaryIndexEmbeddingRetriever",
                "docstring": "Document Summary Index Embedding Retriever.\n\nArgs:\n    index (DocumentSummaryIndex): The index to retrieve from.\n    similarity_top_k (int): The number of summary nodes to retrieve."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Callable",
            "List",
            "Optional",
            "BaseRetriever",
            "BaseEmbedding",
            "CallbackManager",
            "DocumentSummaryIndex",
            "default_format_node_batch_fn",
            "default_parse_choice_select_answer_fn",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_CHOICE_SELECT_PROMPT",
            "NodeWithScore",
            "QueryBundle",
            "Settings",
            "VectorStoreQuery"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/document_summary/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DocumentSummaryIndex",
            "GPTDocumentSummaryIndex",
            "DocumentSummaryIndexEmbeddingRetriever",
            "DocumentSummaryIndexLLMRetriever",
            "DocumentSummaryIndexRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/document_summary/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "objects",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_struct",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "storage_context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_synthesizer",
                        "default": "Name(id='DEFAULT_SUMMARY_QUERY', ctx=Load())"
                    },
                    {
                        "name": "summary_query",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "embed_summaries",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "vector_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "as_retriever",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='_RetrieverMode', ctx=Load()), attr='EMBEDDING', ctx=Load())"
                    },
                    {
                        "name": "retriever_mode",
                        "default": null
                    }
                ],
                "docstring": "Get retriever.\n\nArgs:\n    retriever_mode (Union[str, DocumentSummaryRetrieverMode]): A retriever mode.\n        Defaults to DocumentSummaryRetrieverMode.EMBEDDING."
            },
            {
                "name": "get_document_summary",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Get document summary by doc id.\n\nArgs:\n    doc_id (str): A document id."
            },
            {
                "name": "_add_nodes_to_index",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Add nodes to index."
            },
            {
                "name": "_build_index_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Build index from nodes."
            },
            {
                "name": "_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Insert a document."
            },
            {
                "name": "_delete_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a list of nodes from the index.\n\nArgs:\n    node_ids (List[str]): A list of node_ids from the nodes to delete"
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "delete_from_docstore",
                        "default": null
                    }
                ],
                "docstring": "Delete a document from the index.\nAll nodes in the index related to the document will be deleted."
            },
            {
                "name": "ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Retrieve a dict mapping of ingested documents and their nodes+metadata."
            }
        ],
        "classes": [
            {
                "name": "DocumentSummaryRetrieverMode",
                "docstring": null
            },
            {
                "name": "DocumentSummaryIndex",
                "docstring": "Document Summary Index.\n\nArgs:\n    response_synthesizer (BaseSynthesizer): A response synthesizer for generating\n        summaries.\n    summary_query (str): The query to use to generate the summary for each document.\n    show_progress (bool): Whether to show tqdm progress bars.\n        Defaults to False.\n    embed_summaries (bool): Whether to embed the summaries.\n        This is required for running the default embedding-based retriever.\n        Defaults to True."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "defaultdict",
            "Enum",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Union",
            "cast",
            "BaseRetriever",
            "BaseEmbedding",
            "Response",
            "IndexDocumentSummary",
            "BaseIndex",
            "embed_nodes",
            "LLM",
            "BaseSynthesizer",
            "ResponseMode",
            "get_response_synthesizer",
            "BaseNode",
            "IndexNode",
            "NodeRelationship",
            "NodeWithScore",
            "RelatedNodeInfo",
            "TextNode",
            "Settings",
            "RefDocInfo",
            "StorageContext",
            "get_tqdm_iterable",
            "BasePydanticVectorStore",
            "DocumentSummaryIndexEmbeddingRetriever",
            "DocumentSummaryIndexLLMRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/embedding_utils.py": {
        "functions": [
            {
                "name": "get_top_k_embeddings",
                "parameters": [
                    {
                        "name": "query_embedding",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embeddings",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embedding_ids",
                        "default": null
                    },
                    {
                        "name": "similarity_cutoff",
                        "default": null
                    }
                ],
                "docstring": "Get top nodes by similarity to the query."
            },
            {
                "name": "get_top_k_embeddings_learner",
                "parameters": [
                    {
                        "name": "query_embedding",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embeddings",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Attribute(value=Name(id='VectorStoreQueryMode', ctx=Load()), attr='SVM', ctx=Load())"
                    },
                    {
                        "name": "embedding_ids",
                        "default": null
                    },
                    {
                        "name": "query_mode",
                        "default": null
                    }
                ],
                "docstring": "Get top embeddings by fitting a learner against query.\n\nInspired by Karpathy's SVM demo:\nhttps://github.com/karpathy/randomfun/blob/master/knn_vs_svm.ipynb\n\nCan fit SVM, linear regression, and more."
            },
            {
                "name": "get_top_k_mmr_embeddings",
                "parameters": [
                    {
                        "name": "query_embedding",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embeddings",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embedding_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_cutoff",
                        "default": null
                    },
                    {
                        "name": "mmr_threshold",
                        "default": null
                    }
                ],
                "docstring": "Get top nodes by similarity to the query,\ndiscount by their similarity to previous results.\n\nA mmr_threshold of 0 will strongly avoid similarity to previous results.\nA mmr_threshold of 1 will check similarity the query and ignore previous results."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "heapq",
            "math",
            "Any",
            "Callable",
            "List",
            "Optional",
            "Tuple",
            "numpy",
            "similarity",
            "VectorStoreQueryMode",
            "linear_model",
            "svm"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/base.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/schema.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "QueryBundle",
            "QueryType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/transformations/dynamic_llm.py": {
        "functions": [
            {
                "name": "default_parse_dynamic_triplets",
                "parameters": [
                    {
                        "name": "llm_output",
                        "default": null
                    }
                ],
                "docstring": "Parse the LLM output and convert it into a list of entity-relation-entity triplets.\nThis function is flexible and can handle various output formats.\n\nArgs:\n    llm_output (str): The output from the LLM, which may be JSON-like or plain text.\n\nReturns:\n    List[Tuple[EntityNode, Relation, EntityNode]]: A list of triplets."
            },
            {
                "name": "default_parse_dynamic_triplets_with_props",
                "parameters": [
                    {
                        "name": "llm_output",
                        "default": null
                    }
                ],
                "docstring": "Parse the LLM output and convert it into a list of entity-relation-entity triplets.\nThis function is flexible and can handle various output formats.\n\nArgs:\n    llm_output (str): The output from the LLM, which may be JSON-like or plain text.\n\nReturns:\n    List[Tuple[EntityNode, Relation, EntityNode]]: A list of triplets."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extract_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parse_fn",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_triplets_per_chunk",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "num_workers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allowed_entity_types",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allowed_entity_props",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allowed_relation_types",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allowed_relation_props",
                        "default": null
                    }
                ],
                "docstring": "Initialize the DynamicLLMPathExtractor.\n\nArgs:\n    llm (Optional[LLM]): The language model to use. If None, uses the default from Settings.\n    extract_prompt (Optional[Union[str, PromptTemplate]]): The prompt template to use.\n    parse_fn (Callable): Function to parse LLM output into triplets.\n    max_triplets_per_chunk (int): Maximum number of triplets to extract per chunk.\n    num_workers (int): Number of workers for parallel processing.\n    allowed_entity_types (Optional[List[str]]): List of initial entity types for the ontology.\n    allowed_relation_types (Optional[List[str]]): List of initial relation types for the ontology."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Return the name of the class."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Extract triples from nodes.\n\nArgs:\n    nodes (List[BaseNode]): List of nodes to process.\n    show_progress (bool): Whether to show a progress bar.\n    **kwargs: Additional keyword arguments.\n\nReturns:\n    List[BaseNode]: Processed nodes with extracted information."
            },
            {
                "name": "parse_props",
                "parameters": [
                    {
                        "name": "props_str",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DynamicLLMPathExtractor",
                "docstring": "DynamicLLMPathExtractor is a component for extracting structured information from text\nto build a knowledge graph. It uses an LLM to identify entities and their relationships,\nwith the ability to infer entity types and expand upon an initial ontology.\n\nThis extractor improves upon SimpleLLMPathExtractor by:\n1. Detecting entity types instead of labeling them generically as \"entity\" and \"chunk\".\n2. Accepting an initial ontology as input, specifying desired nodes and relationships.\n3. Encouraging ontology expansion through its prompt design.\n\nThis extractor differs from SchemaLLMPathExtractor because:\n1. It interprets the passed possible entities and relations as an initial ontology.\n2. It encourages expansion of the initial ontology in the prompt.\n3. It aims for flexibility in knowledge graph construction while still providing guidance.\n\nAttributes:\n    llm (LLM): The language model used for extraction.\n    extract_prompt (PromptTemplate): The prompt template used to guide the LLM.\n    parse_fn (Callable): Function to parse the LLM output into triplets.\n    num_workers (int): Number of workers for parallel processing.\n    max_triplets_per_chunk (int): Maximum number of triplets to extract per text chunk.\n    allowed_entity_types (List[str]): List of initial entity types for the ontology.\n    allowed_entity_props (Optional[Union[List[str], List[Tuple[str, str]]]]):\n        List of initial entity properties for the ontology.\n        Can be either property names or tuples of (name, description).\n    allowed_relation_types (List[str]): List of initial relation types for the ontology.\n    allowed_relation_props (Optional[Union[List[str], List[Tuple[str, str]]]]):\n        List of initial relation properties for the ontology.\n        Can be either property names or tuples of (name, description)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Union",
            "Tuple",
            "re",
            "json",
            "run_jobs",
            "PromptTemplate",
            "LLM",
            "EntityNode",
            "Relation",
            "KG_NODES_KEY",
            "KG_RELATIONS_KEY",
            "DEFAULT_DYNAMIC_EXTRACT_PROMPT",
            "DEFAULT_DYNAMIC_EXTRACT_PROPS_PROMPT",
            "TransformComponent",
            "BaseNode",
            "MetadataMode",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/transformations/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ImplicitPathExtractor",
            "SchemaLLMPathExtractor",
            "SimpleLLMPathExtractor",
            "DynamicLLMPathExtractor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/transformations/implicit.py": {
        "functions": [
            {
                "name": "get_node_rel_string",
                "parameters": [
                    {
                        "name": "relationship",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Extract edges from node relationships."
            }
        ],
        "classes": [
            {
                "name": "ImplicitPathExtractor",
                "docstring": "Extract edges from node relationships.\n\nUses `node.relationships` to extract relations between nodes."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "tqdm",
            "Any",
            "Sequence",
            "TransformComponent",
            "BaseNode",
            "NodeRelationship",
            "Relation",
            "KG_NODES_KEY",
            "KG_RELATIONS_KEY"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/transformations/simple_llm.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extract_prompt",
                        "default": "Name(id='default_parse_triplets_fn', ctx=Load())"
                    },
                    {
                        "name": "parse_fn",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_paths_per_chunk",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Extract triples from nodes."
            }
        ],
        "classes": [
            {
                "name": "SimpleLLMPathExtractor",
                "docstring": "Extract triples from a graph.\n\nUses an LLM and a simple prompt + output parsing to extract paths (i.e. triples) from text.\n\nArgs:\n    llm (LLM):\n        The language model to use.\n    extract_prompt (Union[str, PromptTemplate]):\n        The prompt to use for extracting triples.\n    parse_fn (callable):\n        A function to parse the output of the language model.\n    num_workers (int):\n        The number of workers to use for parallel processing.\n    max_paths_per_chunk (int):\n        The maximum number of paths to extract per chunk."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Callable",
            "Optional",
            "Sequence",
            "Union",
            "run_jobs",
            "default_parse_triplets_fn",
            "EntityNode",
            "Relation",
            "KG_NODES_KEY",
            "KG_RELATIONS_KEY",
            "LLM",
            "PromptTemplate",
            "DEFAULT_KG_TRIPLET_EXTRACT_PROMPT",
            "TransformComponent",
            "BaseNode",
            "MetadataMode",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/transformations/schema_llm.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extract_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "possible_entities",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "possible_entity_props",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "possible_relations",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "possible_relation_props",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "strict",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kg_schema_cls",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "kg_validation_schema",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "max_triplets_per_chunk",
                        "default": null
                    },
                    {
                        "name": "num_workers",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Extract triplets from nodes."
            },
            {
                "name": "_prune_invalid_props",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "props",
                        "default": null
                    },
                    {
                        "name": "allowed_props",
                        "default": null
                    }
                ],
                "docstring": "Prune invalid properties."
            },
            {
                "name": "_prune_invalid_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kg_schema",
                        "default": null
                    }
                ],
                "docstring": "Prune invalid triplets."
            },
            {
                "name": "validate",
                "parameters": [
                    {
                        "name": "v",
                        "default": null
                    }
                ],
                "docstring": "Validate triplets."
            }
        ],
        "classes": [
            {
                "name": "SchemaLLMPathExtractor",
                "docstring": "Extract paths from a graph using a schema.\n\nArgs:\n    llm (LLM):\n        The language model to use.\n    extract_prompt (Union[PromptTemplate, str], optional):\n        The template to use for the extraction query. Defaults to None.\n    possible_entities (Optional[Type[Any]], optional):\n        The possible entities to extract. Defaults to None.\n    possible_entity_props (Optional[Union[List[str], List[Tuple[str, str]]], optional):\n        The possible entity properties to extract. Defaults to None.\n        Can be a list of strings or a list of tuples with the format (name, description).\n    possible_relations (Optional[Type[Any]], optional):\n        The possible relations to extract. Defaults to None.\n    possible_relation_props (Optional[Union[List[str], List[Tuple[str, str]]], optional):\n        The possible relation properties to extract. Defaults to None.\n        Can be a list of strings or a list of tuples with the format (name, description).\n    strict (bool, optional):\n        Whether to enforce strict validation of entities and relations. Defaults to True.\n        If false, values outside of the schema will be allowed.\n    kg_schema_cls (Any, optional):\n        The schema class to use. Defaults to None.\n    kg_validation_schema (Dict[str, str], optional):\n        The validation schema to use. Defaults to None.\n    max_triplets_per_chunk (int, optional):\n        The maximum number of triplets to extract per chunk. Defaults to 10.\n    num_workers (int, optional):\n        The number of workers to use. Defaults to 4."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Dict",
            "List",
            "Literal",
            "Optional",
            "Sequence",
            "Tuple",
            "Type",
            "Union",
            "run_jobs",
            "create_model",
            "field_validator",
            "EntityNode",
            "Relation",
            "Triplet",
            "KG_NODES_KEY",
            "KG_RELATIONS_KEY",
            "get_entity_class",
            "get_relation_class",
            "PromptTemplate",
            "TransformComponent",
            "BaseNode",
            "MetadataMode",
            "LLM"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/transformations/utils.py": {
        "functions": [
            {
                "name": "get_entity_class",
                "parameters": [
                    {
                        "name": "possible_entities",
                        "default": null
                    },
                    {
                        "name": "possible_entity_props",
                        "default": null
                    },
                    {
                        "name": "strict",
                        "default": null
                    }
                ],
                "docstring": "Get entity class."
            },
            {
                "name": "get_relation_class",
                "parameters": [
                    {
                        "name": "possible_relations",
                        "default": null
                    },
                    {
                        "name": "possible_relation_props",
                        "default": null
                    },
                    {
                        "name": "strict",
                        "default": null
                    }
                ],
                "docstring": "Get relation class."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "create_model",
            "Field",
            "TypeAlias",
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/vector.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "graph_store",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_text",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "include_properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "vector_store",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "path_depth",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "limit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "similarity_score",
                        "default": null
                    },
                    {
                        "name": "filters",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_valid_vector_store_params",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "_filter_vector_store_query_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_vector_store_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_kg_ids",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kg_nodes",
                        "default": null
                    }
                ],
                "docstring": "Backward compatibility method to get kg_ids from kg_nodes."
            },
            {
                "name": "retrieve_from_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "VectorContextRetriever",
                "docstring": "A retriever that uses a vector store to retrieve nodes based on a query.\n\nArgs:\n    graph_store (PropertyGraphStore):\n        The graph store to retrieve data from.\n    include_text (bool, optional):\n        Whether to include source text in the retrieved nodes. Defaults to True.\n    embed_model (Optional[BaseEmbedding], optional):\n        The embedding model to use. Defaults to Settings.embed_model.\n    vector_store (Optional[BasePydanticVectorStore], optional):\n        The vector store to use. Defaults to None.\n        Should be supplied if the graph store does not support vector queries.\n    similarity_top_k (int, optional):\n        The number of top similar kg nodes to retrieve. Defaults to 4.\n    path_depth (int, optional):\n        The depth of the path to retrieve for each node. Defaults to 1 (i.e. a triple).\n    similarity_score (float, optional):\n        The minimum similarity score to retrieve the nodes. Defaults to None."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclasses",
            "Any",
            "List",
            "Sequence",
            "Optional",
            "Dict",
            "Set",
            "BaseEmbedding",
            "BasePGRetriever",
            "PropertyGraphStore",
            "KG_SOURCE_REL",
            "VECTOR_SOURCE_KEY",
            "Settings",
            "BaseNode",
            "NodeWithScore",
            "QueryBundle",
            "BasePydanticVectorStore",
            "VectorStoreQuery",
            "MetadataFilters"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/custom.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "graph_store",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_text",
                        "default": null
                    },
                    {
                        "name": "include_properties",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "graph_store",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "init",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize the retriever.\n\nHas access to all keyword arguments passed to the retriever, as well as:\n- `self.graph_store`: The graph store to retrieve data from.\n- `self.include_text``: Whether to include text in the retrieved nodes."
            },
            {
                "name": "custom_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": "Retrieve data from the graph store based on the query string.\n\nArgs:\n    query_str (str): The query string to retrieve data for.\n\nReturns:\n    The retrieved data. The return type can be one of:\n    - str: A single string.\n    - List[str]: A list of strings.\n    - TextNode: A single TextNode.\n    - List[TextNode]: A list of TextNodes.\n    - NodeWithScore: A single NodeWithScore.\n    - List[NodeWithScore]: A list of NodeWithScores."
            },
            {
                "name": "_parse_custom_return_type",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve_from_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CustomPGRetriever",
                "docstring": "A retriever meant to be easily subclassed to implement custom retrieval logic.\n\nThe user only has to implement:\n- `init` to initialize the retriever and assign any necessary attributes.\n- `custom_retrieve` to implement the custom retrieval logic.\n- `aretrieve_custom` (optional) to implement asynchronous retrieval logic.\n\nArgs:\n    graph_store (PropertyGraphStore):\n        The graph store to retrieve data from.\n    include_text (bool):\n        Whether to include text in the retrieved nodes. Only works for kg nodes\n        inserted by LlamaIndex.\n    **kwargs:\n        Additional keyword arguments passed to init()."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "List",
            "Union",
            "PropertyGraphStore",
            "BasePGRetriever",
            "NodeWithScore",
            "QueryBundle",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/text_to_cypher.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph_store",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_to_cypher_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "cypher_validator",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "allowed_output_fields",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_raw_response_as_metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "summarize_response",
                        "default": null
                    },
                    {
                        "name": "summarization_template",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_generated_cypher",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "cypher_query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_clean_query_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_output",
                        "default": null
                    }
                ],
                "docstring": "Iterate the cypher response, looking for the allowed fields."
            },
            {
                "name": "retrieve_from_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "TextToCypherRetriever",
                "docstring": "A Text-to-Cypher retriever that uses a language model to generate Cypher queries.\n\nNOTE: Executing arbitrary cypher has its risks. Ensure you take the needed measures\n(read-only roles, sandboxed env, etc.) to ensure safe usage in a production environment.\n\nArgs:\n    graph_store (PropertyGraphStore):\n        The graph store to retrieve data from.\n    llm (Optional[LLM], optional):\n        The language model to use. Defaults to Settings.llm.\n    text_to_cypher_template (Optional[Union[PromptTemplate, str]], optional):\n        The template to use for the text-to-cypher query. Defaults to None.\n    response_template (Optional[str], optional):\n        The template to use for the response. Defaults to None.\n    cypher_validator (Optional[callable], optional):\n        A callable function to validate the generated Cypher query. Defaults to None.\n    allowed_query_fields (Optional[List[str]], optional):\n        The fields to allow in the query output. Defaults to [\"text\", \"label\", \"type\"].\n    include_raw_response_as_metadata (Optional[bool], optional):\n        If True this will add the query and raw response data to the metadata property. Defaults to False.\n    summarize_response (Optional[bool], optional):\n        If True this will run the response through the provided LLM to create a more human readable\n        response, If False this uses the provided or default response_template. Defaults to False.\n    summarization_template (Optional[str], optional):\n        The template to use for summarizing the response. Defaults to None."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Union",
            "PropertyGraphStore",
            "BasePGRetriever",
            "LLM",
            "PromptTemplate",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/cypher_template.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "graph_store",
                        "default": null
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "cypher_query",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve_from_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "CypherTemplateRetriever",
                "docstring": "A Cypher retriever that fills in params for a cypher query using an LLM.\n\nArgs:\n    graph_store (PropertyGraphStore):\n        The graph store to retrieve data from.\n    output_cls (Type[BaseModel]):\n        The output class to use for the LLM.\n        Should contain the params needed for the cypher query.\n    cypher_query (str):\n        The cypher query to use, with templated params.\n    llm (Optional[LLM], optional):\n        The language model to use. Defaults to Settings.llm."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Type",
            "BaseModel",
            "PropertyGraphStore",
            "BasePGRetriever",
            "LLM",
            "PromptTemplate",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "graph_store",
                        "default": "Name(id='DEFAULT_PREAMBLE', ctx=Load())"
                    },
                    {
                        "name": "include_text",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_text_preamble",
                        "default": null
                    },
                    {
                        "name": "include_properties",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_nodes_with_score",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "triplets",
                        "default": null
                    },
                    {
                        "name": "scores",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_add_source_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "retrieved_nodes",
                        "default": null
                    },
                    {
                        "name": "og_node_map",
                        "default": null
                    }
                ],
                "docstring": "Combine retrieved nodes/triplets with their source text, using provided preamble."
            },
            {
                "name": "add_source_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Combine retrieved nodes/triplets with their source text."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve_from_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Retrieve nodes from the labelled property graph."
            }
        ],
        "classes": [
            {
                "name": "BasePGRetriever",
                "docstring": "The base class for property graph retrievers.\n\nBy default, will retrieve nodes from the graph store and add source text to the nodes if needed.\n\nArgs:\n    graph_store (PropertyGraphStore):\n        The graph store to retrieve data from.\n    include_text (bool, optional):\n        Whether to include source text in the retrieved nodes. Defaults to True.\n    include_text_preamble (Optional[str], optional):\n        The preamble to include before the source text. Defaults to DEFAULT_PREAMBLE."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseRetriever",
            "PropertyGraphStore",
            "Triplet",
            "TRIPLET_SOURCE_KEY",
            "BaseNode",
            "NodeWithScore",
            "NodeRelationship",
            "RelatedNodeInfo",
            "QueryBundle",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/property_graph/sub_retrievers/llm_synonym.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "graph_store",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_text",
                        "default": "Name(id='DEFAULT_SYNONYM_EXPAND_TEMPLATE', ctx=Load())"
                    },
                    {
                        "name": "include_properties",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "synonym_prompt",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "max_keywords",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "path_depth",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "limit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parsing_fn",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_llm_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_prepare_matches",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "matches",
                        "default": null
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "retrieve_from_graph",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LLMSynonymRetriever",
                "docstring": "A retriever that uses a language model to expand a query with synonyms.\nThe synonyms are then used to retrieve nodes from a property graph.\n\nArgs:\n    graph_store (PropertyGraphStore):\n        The graph store to retrieve data from.\n    include_text (bool, optional):\n        Whether to include source text in the retrieved nodes. Defaults to True.\n    synonym_prompt (Union[BasePromptTemplate, str], optional):\n        The template to use for the synonym expansion query.\n        Defaults to DEFAULT_SYNONYM_EXPAND_TEMPLATE.\n    max_keywords (int, optional):\n        The maximum number of synonyms to generate. Defaults to 10.\n    path_depth (int, optional):\n        The depth of the path to retrieve for each node. Defaults to 1 (i.e. a triple).\n    output_parsing_fn (Optional[callable], optional):\n        A callable function to parse the output of the language model. Defaults to None.\n    llm (Optional[LLM], optional):\n        The language model to use. Defaults to Settings.llm."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Union",
            "LLM",
            "BasePGRetriever",
            "PropertyGraphStore",
            "KG_SOURCE_REL",
            "BasePromptTemplate",
            "PromptTemplate",
            "Settings",
            "NodeWithScore",
            "QueryBundle"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/retrievers/retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_SIMILARITY_TOP_K', ctx=Load())"
                    },
                    {
                        "name": "index",
                        "default": "Attribute(value=Name(id='VectorStoreQueryMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store_query_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "filters",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "alpha",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "doc_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sparse_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "hybrid_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "object_map",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "embed_model",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "similarity_top_k",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return similarity top k."
            },
            {
                "name": "similarity_top_k",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "similarity_top_k",
                        "default": null
                    }
                ],
                "docstring": "Set similarity top k."
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_vector_store_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle_with_embeddings",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_node_list_from_query_result",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_result",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_nodes_with_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle_with_embeddings",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "VectorIndexRetriever",
                "docstring": "Vector index retriever.\n\nArgs:\n    index (VectorStoreIndex): vector store index.\n    similarity_top_k (int): number of top k results to return.\n    vector_store_query_mode (str): vector store query mode\n        See reference for VectorStoreQueryMode for full list of supported modes.\n    filters (Optional[MetadataFilters]): metadata filters, defaults to None\n    alpha (float): weight for sparse/dense retrieval, only used for\n        hybrid query mode.\n    doc_ids (Optional[List[str]]): list of documents to constrain search.\n    vector_store_kwargs (dict): Additional vector store specific kwargs to pass\n        through to the vector store at query time."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseRetriever",
            "BaseEmbedding",
            "CallbackManager",
            "DEFAULT_SIMILARITY_TOP_K",
            "IndexDict",
            "log_vector_store_query_result",
            "VectorStoreIndex",
            "NodeWithScore",
            "ObjectType",
            "QueryBundle",
            "MetadataFilters",
            "VectorStoreQuery",
            "VectorStoreQueryMode",
            "VectorStoreQueryResult",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/retrievers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "VectorIndexRetriever",
            "VectorIndexAutoRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/retrievers/auto_retriever/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "VectorIndexAutoRetriever"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/retrievers/auto_retriever/output_parser.py": {
        "functions": [
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt_template",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "VectorStoreQueryOutputParser",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "StructuredOutput",
            "parse_json_markdown",
            "BaseOutputParser",
            "VectorStoreQuerySpec"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/retrievers/auto_retriever/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptTemplate",
            "PromptType",
            "FilterOperator",
            "MetadataFilter",
            "MetadataInfo",
            "VectorStoreInfo",
            "VectorStoreQuerySpec"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/vector_store/retrievers/auto_retriever/auto_retriever.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store_info",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_SIMILARITY_TOP_K', ctx=Load())"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_top_k",
                        "default": "Attribute(value=Name(id='VectorStoreQueryMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "similarity_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "empty_query_top_k",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "vector_store_query_mode",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "default_empty_query_vector",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_filters",
                        "default": null
                    },
                    {
                        "name": "object_map",
                        "default": null
                    },
                    {
                        "name": "objects",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_get_query_bundle",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Get query bundle."
            },
            {
                "name": "_parse_generated_spec",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Parse generated spec."
            },
            {
                "name": "generate_retrieval_spec",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_retriever_from_spec",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "spec",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "VectorIndexAutoRetriever",
                "docstring": "Vector store auto retriever.\n\nA retriever for vector store index that uses an LLM to automatically set\nvector store query parameters.\n\nArgs:\n    index (VectorStoreIndex): vector store index\n    vector_store_info (VectorStoreInfo): additional information about\n        vector store content and supported metadata filters. The natural language\n        description is used by an LLM to automatically set vector store query\n        parameters.\n    prompt_template_str: custom prompt template string for LLM.\n        Uses default template string if None.\n    similarity_top_k (int): number of top k results to return.\n    empty_query_top_k (Optional[int]): number of top k results to return\n        if the inferred query string is blank (uses metadata filters only).\n        Can be set to None, which would use the similarity_top_k instead.\n        By default, set to 10.\n    max_top_k (int):\n        the maximum top_k allowed. The top_k set by LLM or similarity_top_k will\n        be clamped to this value.\n    vector_store_query_mode (str): vector store query mode\n        See reference for VectorStoreQueryMode for full list of supported modes.\n    default_empty_query_vector (Optional[List[float]]): default empty query vector.\n        Defaults to None. If not None, then this vector will be used as the query\n        vector if the query is empty.\n    callback_manager (Optional[CallbackManager]): callback manager\n    verbose (bool): verbose mode"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "List",
            "Optional",
            "Tuple",
            "cast",
            "BaseAutoRetriever",
            "BaseRetriever",
            "BaseModel",
            "CallbackManager",
            "DEFAULT_SIMILARITY_TOP_K",
            "VectorStoreIndex",
            "VectorIndexRetriever",
            "VectorStoreQueryOutputParser",
            "DEFAULT_VECTOR_STORE_QUERY_PROMPT_TMPL",
            "LLM",
            "OutputParserException",
            "StructuredOutput",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "IndexNode",
            "QueryBundle",
            "Settings",
            "FilterCondition",
            "MetadataFilters",
            "VectorStoreInfo",
            "VectorStoreQueryMode",
            "VectorStoreQuerySpec"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common/struct_store/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common/struct_store/sql.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "schema_extract_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    },
                    {
                        "name": "sql_database",
                        "default": null
                    },
                    {
                        "name": "table_name",
                        "default": null
                    },
                    {
                        "name": "table",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id_column",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_get_col_types_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get col types map for schema."
            },
            {
                "name": "_get_schema_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Insert datapoint into index."
            },
            {
                "name": "_insert_datapoint",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "datapoint",
                        "default": null
                    }
                ],
                "docstring": "Insert datapoint into index."
            }
        ],
        "classes": [
            {
                "name": "SQLStructDatapointExtractor",
                "docstring": "Extracts datapoints from a structured document for a SQL db."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "cast",
            "StructDatapoint",
            "OUTPUT_PARSER_TYPE",
            "BaseStructDatapointExtractor",
            "LLM",
            "BasePromptTemplate",
            "SQLDatabase",
            "Table"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common/struct_store/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sql_database",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text_splitter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "table_context_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_table_context_prompt",
                        "default": null
                    },
                    {
                        "name": "table_context_task",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "build_all_context_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents_dict",
                        "default": null
                    }
                ],
                "docstring": "Build context for all tables in the database."
            },
            {
                "name": "build_table_context_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    },
                    {
                        "name": "table_name",
                        "default": null
                    }
                ],
                "docstring": "Build context from documents for a single table."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "schema_extract_prompt",
                        "default": null
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    }
                ],
                "docstring": "Initialize params."
            },
            {
                "name": "_clean_and_validate_fields",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "fields",
                        "default": null
                    }
                ],
                "docstring": "Validate fields with col_types_map."
            },
            {
                "name": "_insert_datapoint",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "datapoint",
                        "default": null
                    }
                ],
                "docstring": "Insert datapoint into index."
            },
            {
                "name": "_get_col_types_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get col types map for schema."
            },
            {
                "name": "_get_schema_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get schema text for extracting relevant info from unstructured text."
            },
            {
                "name": "insert_datapoint_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Extract datapoint from a document and insert it."
            }
        ],
        "classes": [
            {
                "name": "SQLDocumentContextBuilder",
                "docstring": "Builder that builds context for a given set of SQL tables.\n\nArgs:\n    sql_database (Optional[SQLDatabase]): SQL database to use,\n    text_splitter (Optional[TextSplitter]): Text Splitter to use.\n    table_context_prompt (Optional[BasePromptTemplate]): A\n        Table Context Prompt (see :ref:`Prompt-Templates`).\n    refine_table_context_prompt (Optional[BasePromptTemplate]):\n        A Refine Table Context Prompt (see :ref:`Prompt-Templates`).\n    table_context_task (Optional[str]): The query to perform\n        on the table context. A default query string is used\n        if none is provided by the user."
            },
            {
                "name": "BaseStructDatapointExtractor",
                "docstring": "Extracts datapoints from a structured document."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "abstractmethod",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "CBEventType",
            "EventPayload",
            "StructDatapoint",
            "PromptHelper",
            "TextSplitter",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_REFINE_TABLE_CONTEXT_PROMPT_SEL",
            "DEFAULT_TABLE_CONTEXT_PROMPT",
            "DEFAULT_TABLE_CONTEXT_QUERY",
            "PromptType",
            "get_response_synthesizer",
            "BaseNode",
            "MetadataMode",
            "Settings",
            "SQLDatabase",
            "truncate_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/common/struct_store/schema.py": {
        "functions": [],
        "classes": [
            {
                "name": "SQLContextContainer",
                "docstring": "SQLContextContainer.\n\nA container interface to store context for a given table.\nContext can be built from unstructured documents (e.g. using SQLContextBuilder).\nContext can also be dumped to an underlying LlamaIndex data structure.\n\nContains both the raw context_dict as well as any index_structure.\n\nShould be not be used directly - build one from SQLContextContainerBuilder instead."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "Dict",
            "Optional",
            "DataClassJsonMixin"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/query_transform/feedback_transform.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "resynthesize_query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "resynthesis_prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_construct_feedback",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Construct feedback from response."
            },
            {
                "name": "_resynthesize_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "feedback",
                        "default": null
                    }
                ],
                "docstring": "Resynthesize query given feedback."
            }
        ],
        "classes": [
            {
                "name": "FeedbackQueryTransformation",
                "docstring": "Transform the query given the evaluation feedback.\n\nArgs:\n    eval(Evaluation): An evaluation object.\n    llm(LLM): An LLM.\n    resynthesize_query(bool): Whether to resynthesize the query.\n    resynthesis_prompt(BasePromptTemplate): A prompt for resynthesizing the query."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Dict",
            "Optional",
            "Evaluation",
            "BaseQueryTransform",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "QueryBundle",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/query_transform/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DecomposeQueryTransform",
            "HyDEQueryTransform",
            "StepDecomposeQueryTransform"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/query_transform/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PromptTemplate",
            "PromptType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/indices/query/query_transform/base.py": {
        "functions": [
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle_or_str",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_bundle_or_str",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query processor."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "As query component."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "hyde_prompt",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_original",
                        "default": null
                    }
                ],
                "docstring": "Initialize HyDEQueryTransform.\n\nArgs:\n    llm_predictor (Optional[LLM]): LLM for generating\n        hypothetical documents\n    hyde_prompt (Optional[BasePromptTemplate]): Custom prompt for HyDE\n    include_original (bool): Whether to include original query\n        string as one of the embedding strings"
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "decompose_query_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=400)"
                    },
                    {
                        "name": "width",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_prompt",
                        "default": null
                    }
                ],
                "docstring": "Init ImageOutputQueryTransform.\n\nArgs:\n    width (int): desired image display width in pixels\n    query_prompt (ImageOutputQueryTransformPrompt): custom prompt for\n        augmenting query with image output instructions."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "step_decompose_query_prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Run query transform."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "BaseQueryTransform",
                "docstring": "Base class for query transform.\n\nA query transform augments a raw query string with associated transformations\nto improve index querying.\n\nThe query transformation is performed before the query is sent to the index."
            },
            {
                "name": "IdentityQueryTransform",
                "docstring": "Identity query transform.\n\nDo nothing to the query."
            },
            {
                "name": "HyDEQueryTransform",
                "docstring": "Hypothetical Document Embeddings (HyDE) query transform.\n\nIt uses an LLM to generate hypothetical answer(s) to a given query,\nand use the resulting documents as embedding strings.\n\nAs described in `[Precise Zero-Shot Dense Retrieval without Relevance Labels]\n(https://arxiv.org/abs/2212.10496)`"
            },
            {
                "name": "DecomposeQueryTransform",
                "docstring": "Decompose query transform.\n\nDecomposes query into a subquery given the current index struct.\nPerforms a single step transformation.\n\nArgs:\n    llm_predictor (Optional[LLM]): LLM for generating\n        hypothetical documents"
            },
            {
                "name": "ImageOutputQueryTransform",
                "docstring": "Image output query transform.\n\nAdds instructions for formatting image output.\nBy default, this prompts the LLM to format image output as an HTML <img> tag,\nwhich can be displayed nicely in jupyter notebook."
            },
            {
                "name": "StepDecomposeQueryTransform",
                "docstring": "Step decompose query transform.\n\nDecomposes query into a subquery given the current index struct\nand previous reasoning.\n\nNOTE: doesn't work yet.\n\nArgs:\n    llm_predictor (Optional[LLM]): LLM for generating\n        hypothetical documents"
            },
            {
                "name": "QueryTransformComponent",
                "docstring": "Query transform component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclasses",
            "abstractmethod",
            "Any",
            "Dict",
            "Optional",
            "cast",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Response",
            "Field",
            "ConfigDict",
            "DEFAULT_DECOMPOSE_QUERY_TRANSFORM_PROMPT",
            "DEFAULT_IMAGE_OUTPUT_PROMPT",
            "DEFAULT_STEP_DECOMPOSE_QUERY_TRANSFORM_PROMPT",
            "DecomposeQueryTransformPrompt",
            "ImageOutputQueryTransformPrompt",
            "StepDecomposeQueryTransformPrompt",
            "DispatcherSpanMixin",
            "LLM",
            "BasePromptTemplate",
            "DEFAULT_HYDE_PROMPT",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "QueryBundle",
            "QueryType",
            "Settings",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/tool_spec/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/tool_spec/base.py": {
        "functions": [
            {
                "name": "patch_sync",
                "parameters": [
                    {
                        "name": "func_async",
                        "default": null
                    }
                ],
                "docstring": "Patch sync function from async function."
            },
            {
                "name": "get_fn_schema_from_fn_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn_name",
                        "default": null
                    },
                    {
                        "name": "spec_functions",
                        "default": null
                    }
                ],
                "docstring": "Return map from function name.\n\nReturn type is Optional, meaning that the schema can be None.\nIn this case, it's up to the downstream tool implementation to infer the schema."
            },
            {
                "name": "get_metadata_from_fn_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn_name",
                        "default": null
                    },
                    {
                        "name": "spec_functions",
                        "default": null
                    }
                ],
                "docstring": "Return map from function name.\n\nReturn type is Optional, meaning that the schema can be None.\nIn this case, it's up to the downstream tool implementation to infer the schema."
            },
            {
                "name": "to_tool_list",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "spec_functions",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "func_to_metadata_mapping",
                        "default": null
                    }
                ],
                "docstring": "Convert tool spec to list of tools."
            },
            {
                "name": "patched_sync",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "BaseToolSpec",
                "docstring": "Base tool spec class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "signature",
            "Any",
            "Awaitable",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Type",
            "Union",
            "BaseModel",
            "FunctionTool",
            "ToolMetadata",
            "create_schema_from_function"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/tool_spec/load_and_search/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LoadAndSearchToolSpec"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/tools/tool_spec/load_and_search/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool",
                        "default": null
                    },
                    {
                        "name": "index_cls",
                        "default": null
                    },
                    {
                        "name": "index_kwargs",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    },
                    {
                        "name": "index",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "index_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "description",
                        "default": null
                    },
                    {
                        "name": "fn_schema",
                        "default": null
                    }
                ],
                "docstring": "From defaults."
            },
            {
                "name": "to_tool_list",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "spec_functions",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "func_to_metadata_mapping",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "read",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LoadAndSearchToolSpec",
                "docstring": "Load and Search Tool.\n\nThis tool can be used with other tools that load large amounts of\ninformation. Compared to OndemandLoaderTool this returns two tools,\none to retrieve data to an index and another to allow the Agent to search\nthe retrieved data with a natural language query string."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Type",
            "BaseModel",
            "BaseIndex",
            "VectorStoreIndex",
            "Document",
            "FunctionTool",
            "SPEC_FUNCTION_TYPE",
            "BaseToolSpec",
            "ToolMetadata",
            "create_schema_from_function"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/markdown_element.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from node."
            },
            {
                "name": "extract_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_id",
                        "default": null
                    },
                    {
                        "name": "table_filters",
                        "default": null
                    }
                ],
                "docstring": "Extract elements from text."
            },
            {
                "name": "filter_table",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "table_element",
                        "default": null
                    }
                ],
                "docstring": "Filter tables."
            }
        ],
        "classes": [
            {
                "name": "MarkdownElementNodeParser",
                "docstring": "Markdown element node parser.\n\nSplits a markdown document into Text Nodes and Index Nodes corresponding to embedded objects\n(e.g. tables)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "BaseElementNodeParser",
            "Element",
            "BaseNode",
            "TextNode",
            "NodeRelationship",
            "md_to_df"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/unstructured_element.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_SUMMARY_QUERY_STR', ctx=Load())"
                    },
                    {
                        "name": "summary_query_str",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "partitioning_parameters",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from node."
            },
            {
                "name": "extract_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "table_filters",
                        "default": null
                    }
                ],
                "docstring": "Extract elements from text."
            },
            {
                "name": "filter_table",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "table_element",
                        "default": null
                    }
                ],
                "docstring": "Filter tables."
            }
        ],
        "classes": [
            {
                "name": "UnstructuredElementNodeParser",
                "docstring": "Unstructured element node parser.\n\nSplits a document into Text Nodes and Index Nodes corresponding to embedded objects\n(e.g. tables)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Dict",
            "Field",
            "CallbackManager",
            "DEFAULT_SUMMARY_QUERY_STR",
            "BaseElementNodeParser",
            "Element",
            "BaseNode",
            "NodeRelationship",
            "TextNode",
            "html_to_df",
            "partition_html",
            "lxml",
            "unstructured",
            "Text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/hierarchical.py": {
        "functions": [
            {
                "name": "_add_parent_child_relationship",
                "parameters": [
                    {
                        "name": "parent_node",
                        "default": null
                    },
                    {
                        "name": "child_node",
                        "default": null
                    }
                ],
                "docstring": "Add parent/child relationship between nodes."
            },
            {
                "name": "get_leaf_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get leaf nodes."
            },
            {
                "name": "get_root_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get root nodes."
            },
            {
                "name": "get_child_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "all_nodes",
                        "default": null
                    }
                ],
                "docstring": "Get child nodes of nodes from given all_nodes."
            },
            {
                "name": "get_deeper_nodes",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "depth",
                        "default": null
                    }
                ],
                "docstring": "Get children of root nodes in given nodes that have given depth."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chunk_sizes",
                        "default": "Constant(value=20)"
                    },
                    {
                        "name": "chunk_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_parser_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_parser_map",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_recursively_get_nodes_from_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Recursively get nodes from nodes."
            },
            {
                "name": "get_nodes_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "documents",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse document into nodes."
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "HierarchicalNodeParser",
                "docstring": "Hierarchical node parser.\n\nSplits a document into a recursive hierarchy Nodes using a NodeParser.\n\nNOTE: this will return a hierarchy of nodes in a flat list, where there will be\noverlap between parent nodes (e.g. with a bigger chunk size), and child nodes\nper parent (e.g. with a smaller chunk size).\n\nFor instance, this may return a list of nodes like:\n\n- list of top-level nodes with chunk size 2048\n- list of second-level nodes, where each node is a child of a top-level node,\n  chunk size 512\n- list of third-level nodes, where each node is a child of a second-level node,\n  chunk size 128"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Field",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "NodeParser",
            "SentenceSplitter",
            "BaseNode",
            "Document",
            "NodeRelationship",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "HierarchicalNodeParser",
            "MarkdownElementNodeParser",
            "UnstructuredElementNodeParser",
            "LlamaParseJsonNodeParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/llama_parse_json_element.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from node."
            },
            {
                "name": "extract_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='json')"
                    },
                    {
                        "name": "text",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_metadata",
                        "default": null
                    },
                    {
                        "name": "table_filters",
                        "default": null
                    }
                ],
                "docstring": "Extract elements from json based nodes.\n\nArgs:\n    text: node's text content\n    mode: different modes for returning different types of elements based on the selected mode\n    node_id: unique id for the node\n    node_metadata: metadata for the node. the json output for the nodes contains a lot of fields for elements"
            },
            {
                "name": "filter_table",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "table_element",
                        "default": null
                    }
                ],
                "docstring": "Filter tables."
            }
        ],
        "classes": [
            {
                "name": "LlamaParseJsonNodeParser",
                "docstring": "Llama Parse Json format element node parser.\n\nSplits a json format document from LlamaParse into Text Nodes and Index Nodes\ncorresponding to embedded objects (e.g. tables)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Dict",
            "BaseElementNodeParser",
            "Element",
            "BaseNode",
            "TextNode",
            "md_to_df"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/utils.py": {
        "functions": [
            {
                "name": "md_to_df",
                "parameters": [
                    {
                        "name": "md_str",
                        "default": null
                    }
                ],
                "docstring": "Convert Markdown to dataframe."
            },
            {
                "name": "html_to_df",
                "parameters": [
                    {
                        "name": "html_str",
                        "default": null
                    }
                ],
                "docstring": "Convert HTML to dataframe."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "StringIO",
            "pandas",
            "html",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/relational/base_element.py": {
        "functions": [
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to string representation."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from node."
            },
            {
                "name": "extract_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Extract elements from text."
            },
            {
                "name": "get_table_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "elements",
                        "default": null
                    }
                ],
                "docstring": "Get table elements."
            },
            {
                "name": "get_text_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "elements",
                        "default": null
                    }
                ],
                "docstring": "Get text elements."
            },
            {
                "name": "extract_table_summaries",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "elements",
                        "default": null
                    }
                ],
                "docstring": "Go through elements, extract out summaries that are tables."
            },
            {
                "name": "get_base_nodes_and_mappings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": "Get base nodes and mappings.\n\nGiven a list of nodes and IndexNode objects, return the base nodes and a mapping\nfrom index id to child nodes (which are excluded from the base nodes)."
            },
            {
                "name": "get_nodes_and_objects",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_nodes_from_buffer",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "buffer",
                        "default": null
                    },
                    {
                        "name": "node_parser",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from buffer."
            },
            {
                "name": "get_nodes_from_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "elements",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_inherited",
                        "default": null
                    },
                    {
                        "name": "ref_doc_text",
                        "default": null
                    }
                ],
                "docstring": "Get nodes and mappings."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "TableColumnOutput",
                "docstring": "Output from analyzing a table column."
            },
            {
                "name": "TableOutput",
                "docstring": "Output from analyzing a table."
            },
            {
                "name": "Element",
                "docstring": "Element object."
            },
            {
                "name": "BaseElementNodeParser",
                "docstring": "Splits a document into Text Nodes and Index Nodes corresponding to embedded objects.\n\nSupports text and tables currently."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "cast",
            "tqdm",
            "DEFAULT_NUM_WORKERS",
            "run_jobs",
            "asyncio_run",
            "PydanticResponse",
            "BaseModel",
            "Field",
            "ValidationError",
            "ConfigDict",
            "CallbackManager",
            "LLM",
            "NodeParser",
            "BaseNode",
            "Document",
            "IndexNode",
            "MetadataMode",
            "TextNode",
            "get_tqdm_iterable",
            "SummaryIndex",
            "Settings",
            "SummaryIndex",
            "Settings",
            "SentenceSplitter",
            "pandas"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/file/simple_file.py": {
        "functions": [
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse document into nodes.\n\nArgs:\n    nodes (Sequence[BaseNode]): nodes to parse"
            }
        ],
        "classes": [
            {
                "name": "SimpleFileNodeParser",
                "docstring": "Simple file node parser.\n\nSplits a document loaded from a file into Nodes using logic based on the file type\nautomatically detects the NodeParser to use based on file type\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "CallbackManager",
            "build_nodes_from_splits",
            "HTMLNodeParser",
            "JSONNodeParser",
            "MarkdownNodeParser",
            "NodeParser",
            "BaseNode",
            "MetadataMode",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/file/html.py": {
        "functions": [
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Name(id='DEFAULT_TAGS', ctx=Load())"
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from document."
            },
            {
                "name": "_extract_text_from_tag",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tag",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_node_from_split",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text_split",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "metadata",
                        "default": null
                    }
                ],
                "docstring": "Build node from single text split."
            }
        ],
        "classes": [
            {
                "name": "HTMLNodeParser",
                "docstring": "HTML node parser.\n\nSplits a document into Nodes using custom HTML splitting logic.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "Field",
            "CallbackManager",
            "NodeParser",
            "build_nodes_from_splits",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "get_tqdm_iterable",
            "Tag",
            "NavigableString",
            "BeautifulSoup"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/file/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "HTMLNodeParser",
            "JSONNodeParser",
            "MarkdownNodeParser",
            "SimpleFileNodeParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/file/markdown.py": {
        "functions": [
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from document by splitting on headers."
            },
            {
                "name": "_build_node_from_split",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text_split",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "header_path",
                        "default": null
                    }
                ],
                "docstring": "Build node from single text split."
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse nodes."
            }
        ],
        "classes": [
            {
                "name": "MarkdownNodeParser",
                "docstring": "Markdown node parser.\n\nSplits a document into Nodes using Markdown header-based splitting logic.\nEach node contains its text content and the path of headers leading to it.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "CallbackManager",
            "NodeParser",
            "build_nodes_from_splits",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/file/json.py": {
        "functions": [
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_nodes_from_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from document."
            },
            {
                "name": "_depth_first_yield",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "json_data",
                        "default": null
                    },
                    {
                        "name": "levels_back",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Do depth first yield of all of the leaf nodes of a JSON.\n\nCombines keys in the JSON tree using spaces.\n\nIf levels_back is set to 0, prints all levels."
            }
        ],
        "classes": [
            {
                "name": "JSONNodeParser",
                "docstring": "JSON node parser.\n\nSplits a document into Nodes using custom JSON splitting logic.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Any",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Sequence",
            "CallbackManager",
            "NodeParser",
            "build_nodes_from_splits",
            "BaseNode",
            "MetadataMode",
            "TextNode",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/sentence_window.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sentence_splitter",
                        "default": "Name(id='DEFAULT_WINDOW_SIZE', ctx=Load())"
                    },
                    {
                        "name": "window_size",
                        "default": "Name(id='DEFAULT_WINDOW_METADATA_KEY', ctx=Load())"
                    },
                    {
                        "name": "window_metadata_key",
                        "default": "Name(id='DEFAULT_OG_TEXT_METADATA_KEY', ctx=Load())"
                    },
                    {
                        "name": "original_text_metadata_key",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse document into nodes."
            },
            {
                "name": "build_window_nodes_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Build window nodes from documents."
            }
        ],
        "classes": [
            {
                "name": "SentenceWindowNodeParser",
                "docstring": "Sentence window node parser.\n\nSplits a document into Nodes, with each node being a sentence.\nEach node contains a window from the surrounding sentences in the metadata.\n\nArgs:\n    sentence_splitter (Optional[Callable]): splits text into sentences\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Sequence",
            "Field",
            "CallbackManager",
            "NodeParser",
            "build_nodes_from_splits",
            "default_id_func",
            "split_by_sentence_tokenizer",
            "BaseNode",
            "Document",
            "get_tqdm_iterable"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/semantic_splitter.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "embed_model",
                        "default": "Constant(value=95)"
                    },
                    {
                        "name": "breakpoint_percentile_threshold",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "buffer_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sentence_splitter",
                        "default": "Name(id='DEFAULT_OG_TEXT_METADATA_KEY', ctx=Load())"
                    },
                    {
                        "name": "original_text_metadata_key",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse document into nodes."
            },
            {
                "name": "build_semantic_nodes_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "documents",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Build window nodes from documents."
            },
            {
                "name": "_build_sentence_groups",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text_splits",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_calculate_distances_between_sentence_groups",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sentences",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_build_node_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sentences",
                        "default": null
                    },
                    {
                        "name": "distances",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SentenceCombination",
                "docstring": null
            },
            {
                "name": "SemanticSplitterNodeParser",
                "docstring": "Semantic node parser.\n\nSplits a document into Nodes, with each node being a group of semantically related sentences.\n\nArgs:\n    buffer_size (int): number of sentences to group together when evaluating semantic similarity\n    embed_model: (BaseEmbedding): embedding model to use\n    sentence_splitter (Optional[Callable]): splits text into sentences\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Sequence",
            "TypedDict",
            "Annotated",
            "numpy",
            "BaseEmbedding",
            "Field",
            "SerializeAsAny",
            "WithJsonSchema",
            "CallbackManager",
            "NodeParser",
            "NodeParser",
            "build_nodes_from_splits",
            "default_id_func",
            "split_by_sentence_tokenizer",
            "BaseNode",
            "Document",
            "get_tqdm_iterable",
            "OpenAIEmbedding"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/token.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_CHUNK_SIZE', ctx=Load())"
                    },
                    {
                        "name": "chunk_size",
                        "default": "Name(id='DEFAULT_CHUNK_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "chunk_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=' ')"
                    },
                    {
                        "name": "separator",
                        "default": "List(elts=[Constant(value='\\n')], ctx=Load())"
                    },
                    {
                        "name": "backup_separators",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": "Initialize with parameters."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_CHUNK_SIZE', ctx=Load())"
                    },
                    {
                        "name": "chunk_size",
                        "default": "Name(id='DEFAULT_CHUNK_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "chunk_overlap",
                        "default": "Constant(value=' ')"
                    },
                    {
                        "name": "separator",
                        "default": "List(elts=[Constant(value='\\n')], ctx=Load())"
                    },
                    {
                        "name": "backup_separators",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": "Initialize with default parameters."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_text_metadata_aware",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "metadata_str",
                        "default": null
                    }
                ],
                "docstring": "Split text into chunks, reserving space required for metadata str."
            },
            {
                "name": "split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Split text into chunks."
            },
            {
                "name": "_split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Split text into chunks up to chunk_size."
            },
            {
                "name": "_split",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Break text into splits that are smaller than chunk size.\n\nThe order of splitting is:\n1. split by separator\n2. split by backup separators (if any)\n3. split by characters\n\nNOTE: the splits contain the separators."
            },
            {
                "name": "_merge",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "splits",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Merge splits into chunks.\n\nThe high-level idea is to keep adding splits to a chunk until we\nexceed the chunk size, then we start a new chunk with overlap.\n\nWhen we start a new chunk, we pop off the first element of the previous\nchunk until the total length is less than the chunk size."
            }
        ],
        "classes": [
            {
                "name": "TokenTextSplitter",
                "docstring": "Implementation of splitting text that looks at word tokens."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Callable",
            "List",
            "Optional",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "DEFAULT_CHUNK_OVERLAP",
            "DEFAULT_CHUNK_SIZE",
            "MetadataAwareTextSplitter",
            "default_id_func",
            "split_by_char",
            "split_by_sep",
            "Document",
            "get_tokenizer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/code.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_CHUNK_LINES', ctx=Load())"
                    },
                    {
                        "name": "language",
                        "default": "Name(id='DEFAULT_LINES_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "chunk_lines",
                        "default": "Name(id='DEFAULT_MAX_CHARS', ctx=Load())"
                    },
                    {
                        "name": "chunk_lines_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_chars",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parser",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": null
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": "Initialize a CodeSplitter."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_CHUNK_LINES', ctx=Load())"
                    },
                    {
                        "name": "language",
                        "default": "Name(id='DEFAULT_LINES_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "chunk_lines",
                        "default": "Name(id='DEFAULT_MAX_CHARS', ctx=Load())"
                    },
                    {
                        "name": "chunk_lines_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_chars",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "parser",
                        "default": null
                    }
                ],
                "docstring": "Create a CodeSplitter with default values."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_chunk_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "last_end",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Split incoming code and return chunks using the AST."
            }
        ],
        "classes": [
            {
                "name": "CodeSplitter",
                "docstring": "Split code using a AST parser.\n\nThank you to Kevin Lu / SweepAI for suggesting this elegant code splitting solution.\nhttps://docs.sweep.dev/blogs/chunking-2m-files"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "List",
            "Optional",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "TextSplitter",
            "default_id_func",
            "Document",
            "Parser",
            "tree_sitter_languages"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "CodeSplitter",
            "LangchainNodeParser",
            "SemanticSplitterNodeParser",
            "SentenceSplitter",
            "SentenceWindowNodeParser",
            "SemanticDoubleMergingSplitterNodeParser",
            "LanguageConfig",
            "TokenTextSplitter"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/sentence.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=' ')"
                    },
                    {
                        "name": "separator",
                        "default": "Name(id='DEFAULT_CHUNK_SIZE', ctx=Load())"
                    },
                    {
                        "name": "chunk_size",
                        "default": "Name(id='SENTENCE_CHUNK_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "chunk_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer",
                        "default": "Name(id='DEFAULT_PARAGRAPH_SEP', ctx=Load())"
                    },
                    {
                        "name": "paragraph_separator",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chunking_tokenizer_fn",
                        "default": "Name(id='CHUNKING_REGEX', ctx=Load())"
                    },
                    {
                        "name": "secondary_chunking_regex",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": "Initialize with parameters."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=' ')"
                    },
                    {
                        "name": "separator",
                        "default": "Name(id='DEFAULT_CHUNK_SIZE', ctx=Load())"
                    },
                    {
                        "name": "chunk_size",
                        "default": "Name(id='SENTENCE_CHUNK_OVERLAP', ctx=Load())"
                    },
                    {
                        "name": "chunk_overlap",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tokenizer",
                        "default": "Name(id='DEFAULT_PARAGRAPH_SEP', ctx=Load())"
                    },
                    {
                        "name": "paragraph_separator",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chunking_tokenizer_fn",
                        "default": "Name(id='CHUNKING_REGEX', ctx=Load())"
                    },
                    {
                        "name": "secondary_chunking_regex",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": null
                    }
                ],
                "docstring": "Initialize with parameters."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_text_metadata_aware",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "metadata_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "_Split incoming text and return chunks with overlap size.\n\nHas a preference for complete sentences, phrases, and minimal overlap."
            },
            {
                "name": "_split",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Break text into splits that are smaller than chunk size.\n\nThe order of splitting is:\n1. split by paragraph separator\n2. split by chunking tokenizer (default is nltk sentence tokenizer)\n3. split by second chunking regex (default is \"[^,\\.;]+[,\\.;]?\")\n4. split by default separator (\" \")"
            },
            {
                "name": "_merge",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "splits",
                        "default": null
                    },
                    {
                        "name": "chunk_size",
                        "default": null
                    }
                ],
                "docstring": "Merge splits into chunks."
            },
            {
                "name": "_postprocess_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunks",
                        "default": null
                    }
                ],
                "docstring": "Post-process chunks.\nRemove whitespace only chunks and remove leading and trailing whitespace."
            },
            {
                "name": "_token_size",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_splits_by_fns",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "close_chunk",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "_Split",
                "docstring": null
            },
            {
                "name": "SentenceSplitter",
                "docstring": "Parse text with a preference for complete sentences.\n\nIn general, this class tries to keep sentences and paragraphs together. Therefore\ncompared to the original TokenTextSplitter, there are less likely to be\nhanging sentences or parts of sentences at the end of the node chunk."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass",
            "Callable",
            "List",
            "Optional",
            "Tuple",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "DEFAULT_CHUNK_SIZE",
            "MetadataAwareTextSplitter",
            "default_id_func",
            "split_by_char",
            "split_by_regex",
            "split_by_sentence_tokenizer",
            "split_by_sep",
            "get_tokenizer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/utils.py": {
        "functions": [
            {
                "name": "truncate_text",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "text_splitter",
                        "default": null
                    }
                ],
                "docstring": "Truncate text to fit within the chunk size."
            },
            {
                "name": "split_text_keep_separator",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "separator",
                        "default": null
                    }
                ],
                "docstring": "Split text with separator and keep the separator at the end of each split."
            },
            {
                "name": "split_by_sep",
                "parameters": [
                    {
                        "name": "sep",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "keep_sep",
                        "default": null
                    }
                ],
                "docstring": "Split text by separator."
            },
            {
                "name": "split_by_char",
                "parameters": [],
                "docstring": "Split text by character."
            },
            {
                "name": "split_by_sentence_tokenizer_internal",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "tokenizer",
                        "default": null
                    }
                ],
                "docstring": "Get the spans and then return the sentences.\n\nUsing the start index of each span\nInstead of using end, use the start of the next span if available"
            },
            {
                "name": "split_by_sentence_tokenizer",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "split_by_regex",
                "parameters": [
                    {
                        "name": "regex",
                        "default": null
                    }
                ],
                "docstring": "Split text by regex."
            },
            {
                "name": "split_by_phrase_regex",
                "parameters": [],
                "docstring": "Split text by phrase regex.\n\nThis regular expression will split the sentences into phrases,\nwhere each phrase is a sequence of one or more non-comma,\nnon-period, and non-semicolon characters, followed by an optional comma,\nperiod, or semicolon. The regular expression will also capture the\ndelimiters themselves as separate items in the list of phrases."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Callable",
            "List",
            "TextSplitter",
            "nltk",
            "re"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/langchain.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "lc_splitter",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": null
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": "Initialize with parameters."
            },
            {
                "name": "split_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Split text into sentences."
            }
        ],
        "classes": [
            {
                "name": "LangchainNodeParser",
                "docstring": "Basic wrapper around langchain's text splitter.\n\nTODO: Figure out how to make this metadata aware."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "TYPE_CHECKING",
            "Callable",
            "List",
            "Optional",
            "PrivateAttr",
            "CallbackManager",
            "TextSplitter",
            "default_id_func",
            "Document",
            "TextSplitter"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/node_parser/text/semantic_double_merging_splitter.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='english')"
                    },
                    {
                        "name": "language",
                        "default": "Constant(value='en_core_web_md')"
                    },
                    {
                        "name": "spacy_model",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "model_validation",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_model",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Call(func=Name(id='LanguageConfig', ctx=Load()), args=[], keywords=[])"
                    },
                    {
                        "name": "language_config",
                        "default": "Constant(value=0.6)"
                    },
                    {
                        "name": "initial_threshold",
                        "default": "Constant(value=0.8)"
                    },
                    {
                        "name": "appending_threshold",
                        "default": "Constant(value=0.8)"
                    },
                    {
                        "name": "merging_threshold",
                        "default": "Constant(value=1000)"
                    },
                    {
                        "name": "max_chunk_size",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "merging_range",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sentence_splitter",
                        "default": "Name(id='DEFAULT_OG_TEXT_METADATA_KEY', ctx=Load())"
                    },
                    {
                        "name": "original_text_metadata_key",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_metadata",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "include_prev_next_rel",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_func",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Parse document into nodes."
            },
            {
                "name": "build_semantic_nodes_from_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Build window nodes from documents."
            },
            {
                "name": "_create_initial_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "sentences",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_merge_initial_chunks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "initial_chunks",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_clean_text_advanced",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "LanguageConfig",
                "docstring": null
            },
            {
                "name": "SemanticDoubleMergingSplitterNodeParser",
                "docstring": "Semantic double merging text splitter.\n\nSplits a document into Nodes, with each node being a group of semantically related sentences.\n\nArgs:\n    language_config (LanguageConfig): chooses language and spacy language model to be used\n    initial_threshold (float): sets threshold for initializing new chunk\n    appending_threshold (float): sets threshold for appending new sentences to chunk\n    merging_threshold (float): sets threshold for merging whole chunks\n    max_chunk_size (int): maximum size of chunk (in characters)\n    merging_range (int): How many chunks 'ahead' beyond the nearest neighbor to be merged if similar (1 or 2 available)\n    sentence_splitter (Optional[Callable]): splits text into sentences"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "string",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "stopwords",
            "word_tokenize",
            "NodeParser",
            "Field",
            "CallbackManager",
            "NodeParser",
            "NodeParser",
            "build_nodes_from_splits",
            "default_id_func",
            "split_by_sentence_tokenizer",
            "BaseNode",
            "Document",
            "get_tqdm_iterable",
            "spacy"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/runner/planner.py": {
        "functions": [
            {
                "name": "get_completed_sub_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add_completed_sub_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    },
                    {
                        "name": "sub_task",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_next_sub_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_remaining_subtasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "agent_worker",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Name(id='DEFAULT_INITIAL_PLAN_PROMPT', ctx=Load())"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_PLAN_REFINE_PROMPT', ctx=Load())"
                    },
                    {
                        "name": "initial_plan_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "plan_refine_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "init_task_state_kwargs",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "delete_task_on_finish",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "default_tool_choice",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "get_next_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": "Get next task ids for a given plan."
            },
            {
                "name": "mark_task_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Mark task complete for a given plan."
            },
            {
                "name": "create_plan",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Create plan. Returns the plan_id."
            },
            {
                "name": "get_refine_plan_prompt_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "completed_sub_task_pairs",
                        "default": null
                    }
                ],
                "docstring": "Get the refine plan prompt."
            },
            {
                "name": "_update_plan",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    },
                    {
                        "name": "new_plan",
                        "default": null
                    }
                ],
                "docstring": "Update the plan."
            },
            {
                "name": "refine_plan",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": "Refine a plan."
            },
            {
                "name": "run_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "mode",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": "Run a task."
            }
        ],
        "classes": [
            {
                "name": "SubTask",
                "docstring": "A single sub-task in a plan."
            },
            {
                "name": "Plan",
                "docstring": "A series of sub-tasks to accomplish an overall task."
            },
            {
                "name": "PlannerAgentState",
                "docstring": "Agent state."
            },
            {
                "name": "StructuredPlannerAgent",
                "docstring": "Structured Planner Agent runner.\n\nTop-level agent orchestrator that can create tasks, run each step in a task,\nor run a task e2e. Stores state and keeps track of tasks.\n\nArgs:\n    agent_worker (BaseAgentWorker): step executor\n    chat_history (Optional[List[ChatMessage]], optional): chat history. Defaults to None.\n    state (Optional[PlannerAgentState], optional): agent state. Defaults to None.\n    memory (Optional[BaseMemory], optional): memory. Defaults to None.\n    llm (Optional[LLM], optional): LLM. Defaults to None.\n    callback_manager (Optional[CallbackManager], optional): callback manager. Defaults to None.\n    init_task_state_kwargs (Optional[dict], optional): init task state kwargs. Defaults to None."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "BasePlanningAgentRunner",
            "AgentState",
            "BaseAgentWorker",
            "TaskStepOutput",
            "BaseModel",
            "Field",
            "ValidationError",
            "CallbackManager",
            "ChatResponseMode",
            "AGENT_CHAT_RESPONSE_TYPE",
            "ChatMessage",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "BaseMemory",
            "ObjectRetriever",
            "PromptTemplate",
            "Settings",
            "BaseTool",
            "llama_index.core.instrumentation"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/runner/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/runner/parallel.py": {
        "functions": [
            {
                "name": "task_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Task id."
            },
            {
                "name": "get_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task state."
            },
            {
                "name": "get_completed_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get completed steps."
            },
            {
                "name": "get_step_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get step queue."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "agent_worker",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "init_task_state_kwargs",
                        "default": null
                    },
                    {
                        "name": "delete_task_on_finish",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "create_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Create task."
            },
            {
                "name": "delete_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Delete task.\n\nNOTE: this will not delete any previous executions from memory."
            },
            {
                "name": "get_completed_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get completed tasks."
            },
            {
                "name": "get_task_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task output."
            },
            {
                "name": "list_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "List tasks."
            },
            {
                "name": "get_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task."
            },
            {
                "name": "get_upcoming_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get upcoming steps."
            },
            {
                "name": "get_completed_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get completed steps."
            },
            {
                "name": "run_steps_in_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "task_id",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Execute steps in queue.\n\nRun all steps in queue, clearing it out.\n\nAssume that all steps can be run in parallel."
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Execute step."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": null
                    },
                    {
                        "name": "step_output",
                        "default": null
                    }
                ],
                "docstring": "Finalize response."
            },
            {
                "name": "_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Chat with step executor."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "undo_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Undo previous step."
            }
        ],
        "classes": [
            {
                "name": "DAGTaskState",
                "docstring": "DAG Task state."
            },
            {
                "name": "DAGAgentState",
                "docstring": "Agent state."
            },
            {
                "name": "ParallelAgentRunner",
                "docstring": "Parallel agent runner.\n\nExecutes steps in queue in parallel. Requires async support."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "deque",
            "Any",
            "Deque",
            "Dict",
            "List",
            "Optional",
            "Union",
            "cast",
            "BaseAgentRunner",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "asyncio_run",
            "BaseModel",
            "Field",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "ChatResponseMode",
            "StreamingAgentChatResponse",
            "ChatMessage",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "BaseMemory"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/runner/base.py": {
        "functions": [
            {
                "name": "validate_step_from_args",
                "parameters": [
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Validate step from args."
            },
            {
                "name": "create_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Create task."
            },
            {
                "name": "delete_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Delete task.\n\nNOTE: this will not delete any previous executions from memory."
            },
            {
                "name": "list_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "List tasks."
            },
            {
                "name": "get_completed_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get completed tasks."
            },
            {
                "name": "get_task_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task output."
            },
            {
                "name": "get_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task."
            },
            {
                "name": "get_upcoming_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get upcoming steps."
            },
            {
                "name": "get_completed_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get completed steps."
            },
            {
                "name": "get_completed_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    },
                    {
                        "name": "step_id",
                        "default": null
                    }
                ],
                "docstring": "Get completed step."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": null
                    },
                    {
                        "name": "step_output",
                        "default": null
                    }
                ],
                "docstring": "Finalize response."
            },
            {
                "name": "undo_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Undo previous step."
            },
            {
                "name": "get_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task state."
            },
            {
                "name": "get_completed_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get completed steps."
            },
            {
                "name": "get_step_queue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get step queue."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "agent_worker",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "init_task_state_kwargs",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "delete_task_on_finish",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "default_tool_choice",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "from_llm",
                "parameters": [
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "create_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Create task."
            },
            {
                "name": "delete_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Delete task.\n\nNOTE: this will not delete any previous executions from memory."
            },
            {
                "name": "list_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "List tasks."
            },
            {
                "name": "get_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task."
            },
            {
                "name": "get_upcoming_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get upcoming steps."
            },
            {
                "name": "get_completed_steps",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get completed steps."
            },
            {
                "name": "get_task_output",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Get task output."
            },
            {
                "name": "get_completed_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get completed tasks."
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "step",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Execute step."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "task_id",
                        "default": null
                    },
                    {
                        "name": "step_output",
                        "default": null
                    }
                ],
                "docstring": "Finalize response."
            },
            {
                "name": "_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Chat with step executor."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "undo_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Undo previous step."
            },
            {
                "name": "create_plan",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Create plan. Returns the plan_id."
            },
            {
                "name": "get_next_tasks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": "Get next task ids for a given plan."
            },
            {
                "name": "mark_task_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Mark task complete for a given plan."
            },
            {
                "name": "refine_plan",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "plan_id",
                        "default": null
                    }
                ],
                "docstring": "Refine plan."
            },
            {
                "name": "run_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task_id",
                        "default": null
                    }
                ],
                "docstring": "Run task."
            },
            {
                "name": "_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Chat with step executor."
            }
        ],
        "classes": [
            {
                "name": "BaseAgentRunner",
                "docstring": "Base agent runner."
            },
            {
                "name": "TaskState",
                "docstring": "Task state."
            },
            {
                "name": "AgentState",
                "docstring": "Agent state."
            },
            {
                "name": "AgentRunner",
                "docstring": "Agent runner.\n\nTop-level agent orchestrator that can create tasks, run each step in a task,\nor run a task e2e. Stores state and keeps track of tasks.\n\nArgs:\n    agent_worker (BaseAgentWorker): step executor\n    chat_history (Optional[List[ChatMessage]], optional): chat history. Defaults to None.\n    state (Optional[AgentState], optional): agent state. Defaults to None.\n    memory (Optional[BaseMemory], optional): memory. Defaults to None.\n    llm (Optional[LLM], optional): LLM. Defaults to None.\n    callback_manager (Optional[CallbackManager], optional): callback manager. Defaults to None.\n    init_task_state_kwargs (Optional[dict], optional): init task state kwargs. Defaults to None."
            },
            {
                "name": "BasePlanningAgentRunner",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "abstractmethod",
            "deque",
            "Any",
            "Deque",
            "Dict",
            "List",
            "Optional",
            "Union",
            "cast",
            "BaseAgent",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "asyncio_run",
            "run_jobs",
            "BaseModel",
            "Field",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "ChatResponseMode",
            "StreamingAgentChatResponse",
            "ChatMessage",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "BaseMemory",
            "BaseTool",
            "AgentRunStepEndEvent",
            "AgentRunStepStartEvent",
            "AgentChatWithStepStartEvent",
            "AgentChatWithStepEndEvent",
            "llama_index.core.instrumentation",
            "ReActAgent",
            "OpenAI",
            "is_function_calling_model",
            "OpenAIAgent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/legacy/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/function_calling/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/function_calling/step.py": {
        "functions": [
            {
                "name": "get_function_by_name",
                "parameters": [
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": "Get function by name. If the function is not found, None is returned."
            },
            {
                "name": "build_missing_tool_message",
                "parameters": [
                    {
                        "name": "missing_tool_name",
                        "default": null
                    }
                ],
                "docstring": "Build an error message for the case where a tool is not found. This message\ninstructs the LLM to double check the tool name, since it was hallucinated."
            },
            {
                "name": "build_error_tool_output",
                "parameters": [
                    {
                        "name": "tool_name",
                        "default": null
                    },
                    {
                        "name": "tool_args",
                        "default": null
                    },
                    {
                        "name": "err_msg",
                        "default": null
                    }
                ],
                "docstring": "Build a ToolOutput for an error that has occurred."
            },
            {
                "name": "build_missing_tool_output",
                "parameters": [
                    {
                        "name": "bad_tool_call",
                        "default": null
                    }
                ],
                "docstring": "Build a ToolOutput for the case where a tool is not found. This output contains\ninstructions that ask the LLM to double check the tool name, along with the\nhallucinated tool name itself."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "max_function_calls",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Name(id='DEFAULT_MAX_FUNCTION_CALLS', ctx=Load())"
                    },
                    {
                        "name": "max_function_calls",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": null
                    }
                ],
                "docstring": "Create an FunctionCallingAgentWorker from a list of tools.\n\nSimilar to `from_defaults` in other classes, this method will\ninfer defaults for a variety of parameters, including the LLM,\nif they are not specified."
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "get_all_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_call_function",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "tool_call",
                        "default": null
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "sources",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            }
        ],
        "classes": [
            {
                "name": "FunctionCallingAgentWorker",
                "docstring": "Function calling agent worker."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "uuid",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "asyncio",
            "llama_index.core.instrumentation",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "add_user_step_to_memory",
            "MessageRole",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AgentChatResponse",
            "ChatMessage",
            "AgentToolCallEvent",
            "FunctionCallingLLM",
            "ToolSelection",
            "BaseMemory",
            "ChatMemoryBuffer",
            "ObjectRetriever",
            "Settings",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "call_tool_with_selection",
            "acall_tool_with_selection",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "AsyncBaseTool",
            "ToolMetadata"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/function_calling/base.py": {
        "functions": [
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Name(id='DEFAULT_MAX_FUNCTION_CALLS', ctx=Load())"
                    },
                    {
                        "name": "max_function_calls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Create a FunctionCallingAgent from a list of tools."
            }
        ],
        "classes": [
            {
                "name": "FunctionCallingAgent",
                "docstring": "Function calling agent.\n\nLight wrapper around AgentRunner."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "AgentRunner",
            "AgentState",
            "FunctionCallingAgentWorker",
            "DEFAULT_MAX_FUNCTION_CALLS",
            "ChatMessage",
            "CallbackManager",
            "FunctionCallingLLM",
            "BaseMemory",
            "ObjectRetriever",
            "Settings",
            "BaseTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react_multimodal/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react_multimodal/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react_multimodal/step.py": {
        "functions": [
            {
                "name": "add_user_step_to_reasoning",
                "parameters": [
                    {
                        "name": "generate_chat_message_fn",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Add user step to reasoning.\n\nAdds both text input and image input to reasoning."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "role",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    },
                    {
                        "name": "generate_chat_message_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Convenience constructor method from set of BaseTools (Optional).\n\nNOTE: kwargs should have been exhausted by this point. In other words\nthe various upstream components such as BaseSynthesizer (response synthesizer)\nor BaseRetriever should have picked up off their respective kwargs in their\nconstructions.\n\nReturns:\n    ReActAgent"
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "_extract_reasoning_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": "Extracts the reasoning step from the given output.\n\nThis method parses the message content from the output,\nextracts the reasoning step, and determines whether the processing is\ncomplete. It also performs validation checks on the output and\nhandles possible errors."
            },
            {
                "name": "_process_actions",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    },
                    {
                        "name": "sources",
                        "default": null
                    }
                ],
                "docstring": "Get response from reasoning steps."
            },
            {
                "name": "_get_task_step_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "agent_response",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "is_done",
                        "default": null
                    }
                ],
                "docstring": "Get task step response."
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "_run_step_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            }
        ],
        "classes": [
            {
                "name": "ChatMessageCallable",
                "docstring": "ChatMessage Callable Protocol."
            },
            {
                "name": "MultimodalReActAgentWorker",
                "docstring": "Multimodal ReAct Agent worker.\n\n**NOTE**: This is a BETA feature."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "partial",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Protocol",
            "Sequence",
            "Tuple",
            "cast",
            "ReActChatFormatter",
            "ReActOutputParser",
            "ActionReasoningStep",
            "BaseReasoningStep",
            "ObservationReasoningStep",
            "ResponseReasoningStep",
            "REACT_MM_CHAT_SYSTEM_HEADER",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "MessageRole",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "ChatMessage",
            "ChatResponse",
            "ChatMemoryBuffer",
            "BaseMemory",
            "MultiModalLLM",
            "ObjectRetriever",
            "ImageDocument",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "AsyncBaseTool",
            "print_text",
            "generate_openai_multi_modal_chat_message",
            "OpenAIMultiModal"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/custom/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/custom/pipeline_worker.py": {
        "functions": [
            {
                "name": "_get_agent_components",
                "parameters": [
                    {
                        "name": "query_component",
                        "default": null
                    }
                ],
                "docstring": "Get agent components."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "pipeline",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "agent_input_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get agent input component.\n\nNOTE: This is deprecated and will be removed in the future."
            },
            {
                "name": "agent_components",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get agent output component."
            },
            {
                "name": "preprocess",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    }
                ],
                "docstring": "Preprocessing flow.\n\nThis runs preprocessing to propagate the task and step as variables\nto relevant components in the query pipeline.\n\nContains deprecated flow of updating agent components.\nBut also contains main flow of updating StatefulFnComponent components."
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "_get_task_step_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "agent_response",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "is_done",
                        "default": null
                    }
                ],
                "docstring": "Get task step response."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            }
        ],
        "classes": [
            {
                "name": "QueryPipelineAgentWorker",
                "docstring": "Query Pipeline agent worker.\n\nNOTE: This is now deprecated. Use `FnAgentWorker` instead to build a stateful agent.\n\nBarebones agent worker that takes in a query pipeline.\n\n**Default Workflow**: The default workflow assumes that you compose\na query pipeline with `StatefulFnComponent` objects. This allows you to store, update\nand retrieve state throughout the executions of the query pipeline by the agent.\n\nThe task and step state of the agent are stored in this `state` variable via a special key.\nOf course you can choose to store other variables in this state as well.\n\n**Deprecated Workflow**: The deprecated workflow assumes that the first component in the\nquery pipeline is an `AgentInputComponent` and last is `AgentFnComponent`.\n\nArgs:\n    pipeline (QueryPipeline): Query pipeline"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "cast",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "QueryComponent",
            "BaseModel",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "ChatMemoryBuffer",
            "AgentInputComponent",
            "BaseAgentComponent",
            "QueryPipeline",
            "ToolOutput",
            "deprecated"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/custom/simple.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Convenience constructor method from set of BaseTools (Optional)."
            },
            {
                "name": "_initialize_state",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize state."
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "_get_task_step_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "agent_response",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "is_done",
                        "default": null
                    }
                ],
                "docstring": "Get task step response."
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Run step.\n\nReturns:\n    Tuple of (agent_response, is_done)"
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "_finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed.\n\nState is all the step states."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            }
        ],
        "classes": [
            {
                "name": "CustomSimpleAgentWorker",
                "docstring": "Custom simple agent worker.\n\nThis is \"simple\" in the sense that some of the scaffolding is setup already.\nAssumptions:\n- assumes that the agent has tools, llm, callback manager, and tool retriever\n- has a `from_tools` convenience function\n- assumes that the agent is sequential, and doesn't take in any additional\nintermediate inputs.\n\nArgs:\n    tools (Sequence[BaseTool]): Tools to use for reasoning\n    llm (LLM): LLM to use\n    callback_manager (CallbackManager): Callback manager\n    tool_retriever (Optional[ObjectRetriever[BaseTool]]): Tool retriever\n    verbose (bool): Whether to print out reasoning steps"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "abstractmethod",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "cast",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "BaseModel",
            "Field",
            "PrivateAttr",
            "ConfigDict",
            "CallbackManager",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "LLM",
            "ChatMemoryBuffer",
            "ObjectRetriever",
            "Settings",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "AsyncBaseTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/custom/simple_function.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_fn",
                        "default": null
                    },
                    {
                        "name": "initial_state",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "_get_task_step_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "agent_response",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "is_done",
                        "default": null
                    }
                ],
                "docstring": "Get task step response."
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "state",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Run step.\n\nReturns:\n    Tuple of (agent_response, is_done)"
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            }
        ],
        "classes": [
            {
                "name": "FnAgentWorker",
                "docstring": "Function Agent Worker.\n\nDefine an agent worker over a stateful function (takes in a `state` variable).\nThe stateful function expects a tuple of (`AgentChatResponse`, bool) as the response.\n\nSubclass this to define your own agent worker.\n\nArgs:\n    fn (Callable): The function to use. Must contain a `state` dictionary.\n    initial_state (Dict[str, Any]): The initial state"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "Tuple",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "BaseModel",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "get_parameters"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/formatter.py": {
        "functions": [
            {
                "name": "get_react_tool_descriptions",
                "parameters": [
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Tool."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    }
                ],
                "docstring": "Format chat history into list of ChatMessage."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    }
                ],
                "docstring": "Format chat history into list of ChatMessage."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_header",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context",
                        "default": null
                    }
                ],
                "docstring": "Create ReActChatFormatter from defaults."
            },
            {
                "name": "from_context",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "context",
                        "default": null
                    }
                ],
                "docstring": "Create ReActChatFormatter from context.\n\nNOTE: deprecated"
            }
        ],
        "classes": [
            {
                "name": "BaseAgentChatFormatter",
                "docstring": "Base chat formatter."
            },
            {
                "name": "ReActChatFormatter",
                "docstring": "ReAct chat formatter."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "abstractmethod",
            "List",
            "Optional",
            "Sequence",
            "CONTEXT_REACT_CHAT_SYSTEM_HEADER",
            "REACT_CHAT_SYSTEM_HEADER",
            "BaseReasoningStep",
            "ObservationReasoningStep",
            "ChatMessage",
            "MessageRole",
            "BaseModel",
            "ConfigDict",
            "BaseTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ReActAgent",
            "ReActChatFormatter",
            "ReActAgentWorker",
            "ReActOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/output_parser.py": {
        "functions": [
            {
                "name": "extract_tool_use",
                "parameters": [
                    {
                        "name": "input_text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "action_input_parser",
                "parameters": [
                    {
                        "name": "json_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "extract_final_response",
                "parameters": [
                    {
                        "name": "input_text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse_action_reasoning_step",
                "parameters": [
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Parse an action reasoning step from the LLM output."
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": "Parse output from ReAct agent.\n\nWe expect the output to be in one of the following formats:\n1. If the agent need to use a tool to answer the question:\n    ```\n    Thought: <thought>\n    Action: <action>\n    Action Input: <action_input>\n    ```\n2. If the agent can answer the question without any tools:\n    ```\n    Thought: <thought>\n    Answer: <answer>\n    ```"
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Format a query with structured output formatting instructions."
            }
        ],
        "classes": [
            {
                "name": "ReActOutputParser",
                "docstring": "ReAct Output parser."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Tuple",
            "ActionReasoningStep",
            "BaseReasoningStep",
            "ResponseReasoningStep",
            "extract_json_str",
            "BaseOutputParser",
            "dirtyjson"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/types.py": {
        "functions": [
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get content."
            },
            {
                "name": "is_done",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Is the reasoning step the last one."
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get content."
            },
            {
                "name": "is_done",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Is the reasoning step the last one."
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get content."
            },
            {
                "name": "is_done",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Is the reasoning step the last one."
            },
            {
                "name": "get_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get content."
            },
            {
                "name": "is_done",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Is the reasoning step the last one."
            }
        ],
        "classes": [
            {
                "name": "BaseReasoningStep",
                "docstring": "Reasoning step."
            },
            {
                "name": "ActionReasoningStep",
                "docstring": "Action Reasoning step."
            },
            {
                "name": "ObservationReasoningStep",
                "docstring": "Observation reasoning step."
            },
            {
                "name": "ResponseReasoningStep",
                "docstring": "Response reasoning step."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Dict",
            "BaseModel"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/prompts.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/step.py": {
        "functions": [
            {
                "name": "add_user_step_to_reasoning",
                "parameters": [
                    {
                        "name": "step",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Add user step to memory."
            },
            {
                "name": "tell_llm_about_failure_in_extract_reasoning_step",
                "parameters": [
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "_",
                        "default": null
                    }
                ],
                "docstring": "If the developer has instructed to tell the Agent a complaint about its non-cooperation,\nwe will emit a Tool Output that we prepared (at initialization time) to the LLM, so that\nthe LLM can be more cooperative in its next generation."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    },
                    {
                        "name": "handle_reasoning_failure_fn",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "handle_reasoning_failure_fn",
                        "default": null
                    }
                ],
                "docstring": "Convenience constructor method from set of BaseTools (Optional).\n\nNOTE: kwargs should have been exhausted by this point. In other words\nthe various upstream components such as BaseSynthesizer (response synthesizer)\nor BaseRetriever should have picked up off their respective kwargs in their\nconstructions.\n\nReturns:\n    ReActAgentWorker"
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "_extract_reasoning_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": "Extracts the reasoning step from the given output.\n\nThis method parses the message content from the output,\nextracts the reasoning step, and determines whether the processing is\ncomplete. It also performs validation checks on the output and\nhandles possible errors."
            },
            {
                "name": "_process_actions",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_handle_nonexistent_tool_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "reasoning_step",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    },
                    {
                        "name": "sources",
                        "default": null
                    }
                ],
                "docstring": "Get response from reasoning steps."
            },
            {
                "name": "_get_task_step_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "agent_response",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "is_done",
                        "default": null
                    }
                ],
                "docstring": "Get task step response."
            },
            {
                "name": "_infer_stream_chunk_is_final",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunk",
                        "default": null
                    },
                    {
                        "name": "missed_chunks_storage",
                        "default": null
                    }
                ],
                "docstring": "Infers if a chunk from a live stream is the start of the final\nreasoning step. (i.e., and should eventually become\nResponseReasoningStep \u2014 not part of this function's logic tho.).\n\nArgs:\n    chunk (ChatResponse): the current chunk stream to check\n    missed_chunks_storage (list): list to store missed chunks\n\nReturns:\n    bool: Boolean on whether the chunk is the start of the final response"
            },
            {
                "name": "_add_back_chunk_to_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunks",
                        "default": null
                    },
                    {
                        "name": "chat_stream",
                        "default": null
                    }
                ],
                "docstring": "Helper method for adding back initial chunk stream of final response\nback to the rest of the chat_stream.\n\nArgs:\n    chunks List[ChatResponse]: the chunks to add back to the beginning of the\n                            chat_stream.\n\nReturn:\n    Generator[ChatResponse, None, None]: the updated chat_stream"
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "_run_step_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "ReActAgentWorker",
                "docstring": "OpenAI Agent worker."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "json",
            "uuid",
            "partial",
            "Any",
            "AsyncGenerator",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "cast",
            "Callable",
            "ReActChatFormatter",
            "ReActOutputParser",
            "ActionReasoningStep",
            "BaseReasoningStep",
            "ObservationReasoningStep",
            "ResponseReasoningStep",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "MessageRole",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "StreamingAgentChatResponse",
            "ChatMessage",
            "ChatResponse",
            "get_dispatcher",
            "AgentToolCallEvent",
            "LLM",
            "ChatMemoryBuffer",
            "BaseMemory",
            "ObjectRetriever",
            "PromptTemplate",
            "PromptDictType",
            "Settings",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "AsyncBaseTool",
            "Thread",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/agent.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/react/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    },
                    {
                        "name": "context",
                        "default": null
                    },
                    {
                        "name": "handle_reasoning_failure_fn",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Name(id='ChatMemoryBuffer', ctx=Load())"
                    },
                    {
                        "name": "memory_cls",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "context",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "handle_reasoning_failure_fn",
                        "default": null
                    }
                ],
                "docstring": "Convenience constructor method from set of BaseTools (Optional).\n\nNOTE: kwargs should have been exhausted by this point. In other words\nthe various upstream components such as BaseSynthesizer (response synthesizer)\nor BaseRetriever should have picked up off their respective kwargs in their\nconstructions.\n\nIf `handle_reasoning_failure_fn` is provided, when LLM fails to follow the response templates specified in\nthe System Prompt, this function will be called. This function should provide to the Agent, so that the Agent\ncan have a second chance to fix its mistakes.\nTo handle the exception yourself, you can provide a function that raises the `Exception`.\n\nNote: If you modified any response template in the System Prompt, you should override the method\n`_extract_reasoning_step` in `ReActAgentWorker`.\n\nReturns:\n    ReActAgent"
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            }
        ],
        "classes": [
            {
                "name": "ReActAgent",
                "docstring": "ReAct agent.\n\nSubclasses AgentRunner with a ReActAgentWorker.\n\nFor the legacy implementation see:\n```python\nfrom llama_index.core.agent.legacy.react.base import ReActAgent\n```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "Sequence",
            "Type",
            "Callable",
            "ReActChatFormatter",
            "ReActOutputParser",
            "ReActAgentWorker",
            "AgentRunner",
            "ChatMessage",
            "CallbackManager",
            "LLM",
            "ChatMemoryBuffer",
            "BaseMemory",
            "ObjectRetriever",
            "Settings",
            "BaseTool",
            "ToolOutput",
            "PromptMixinType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/legacy/react/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/agent/legacy/react/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Name(id='ChatMemoryBuffer', ctx=Load())"
                    },
                    {
                        "name": "memory_cls",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "react_chat_formatter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Convenience constructor method from set of BaseTools (Optional).\n\nNOTE: kwargs should have been exhausted by this point. In other words\nthe various upstream components such as BaseSynthesizer (response synthesizer)\nor BaseRetriever should have picked up off their respective kwargs in their\nconstructions.\n\nReturns:\n    ReActAgent"
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Chat history."
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_extract_reasoning_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": "Extracts the reasoning step from the given output.\n\nThis method parses the message content from the output,\nextracts the reasoning step, and determines whether the processing is\ncomplete. It also performs validation checks on the output and\nhandles possible errors."
            },
            {
                "name": "_process_actions",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    },
                    {
                        "name": "is_streaming",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "current_reasoning",
                        "default": null
                    }
                ],
                "docstring": "Get response from reasoning steps."
            },
            {
                "name": "_infer_stream_chunk_is_final",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunk",
                        "default": null
                    }
                ],
                "docstring": "Infers if a chunk from a live stream is the start of the final\nreasoning step. (i.e., and should eventually become\nResponseReasoningStep \u2014 not part of this function's logic tho.).\n\nArgs:\n    chunk (ChatResponse): the current chunk stream to check\n\nReturns:\n    bool: Boolean on whether the chunk is the start of the final response"
            },
            {
                "name": "_add_back_chunk_to_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "chunk",
                        "default": null
                    },
                    {
                        "name": "chat_stream",
                        "default": null
                    }
                ],
                "docstring": "Helper method for adding back initial chunk stream of final response\nback to the rest of the chat_stream.\n\nArgs:\n    chunk (ChatResponse): the chunk to add back to the beginning of the\n                            chat_stream.\n\nReturn:\n    Generator[ChatResponse, None, None]: the updated chat_stream"
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": "Chat."
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            }
        ],
        "classes": [
            {
                "name": "ReActAgent",
                "docstring": "ReAct agent.\n\nUses a ReAct prompt that can be used in both chat and text\ncompletion endpoints.\n\nCan take in a set of tools that require structured inputs."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "chain",
            "Any",
            "AsyncGenerator",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "Type",
            "cast",
            "ReActChatFormatter",
            "ReActOutputParser",
            "ActionReasoningStep",
            "BaseReasoningStep",
            "ObservationReasoningStep",
            "ResponseReasoningStep",
            "BaseAgent",
            "MessageRole",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AgentChatResponse",
            "StreamingAgentChatResponse",
            "ChatMessage",
            "ChatResponse",
            "LLM",
            "ChatMemoryBuffer",
            "BaseMemory",
            "ObjectRetriever",
            "Settings",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "AsyncBaseTool",
            "Thread",
            "print_text",
            "unit_generator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/agents/toolkits.py": {
        "functions": [
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the tools in the toolkit."
            }
        ],
        "classes": [
            {
                "name": "LlamaToolkit",
                "docstring": "Toolkit for interacting with Llama indices."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "BaseTool",
            "BaseToolkit",
            "ConfigDict",
            "Field",
            "IndexToolConfig",
            "LlamaIndexTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/agents/tools.py": {
        "functions": [
            {
                "name": "_get_response_with_sources",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Return a response with source node info."
            },
            {
                "name": "from_tool_config",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "tool_config",
                        "default": null
                    }
                ],
                "docstring": "Create a tool from a tool config."
            },
            {
                "name": "_run",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "IndexToolConfig",
                "docstring": "Configuration for LlamaIndex index tool."
            },
            {
                "name": "LlamaIndexTool",
                "docstring": "Tool for querying a LlamaIndex."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "BaseTool",
            "BaseModel",
            "ConfigDict",
            "Field",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/agents/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "create_llama_agent",
            "create_llama_chat_agent",
            "LlamaToolkit",
            "IndexToolConfig",
            "LlamaIndexTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/langchain_helpers/agents/agents.py": {
        "functions": [
            {
                "name": "create_llama_agent",
                "parameters": [
                    {
                        "name": "toolkit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "agent",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "agent_path",
                        "default": null
                    },
                    {
                        "name": "agent_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Load an agent executor given a Llama Toolkit and LLM.\n\nNOTE: this is a light wrapper around initialize_agent in langchain.\n\nArgs:\n    toolkit: LlamaToolkit to use.\n    llm: Language model to use as the agent.\n    agent: A string that specified the agent type to use. Valid options are:\n        `zero-shot-react-description`\n        `react-docstore`\n        `self-ask-with-search`\n        `conversational-react-description`\n        `chat-zero-shot-react-description`,\n        `chat-conversational-react-description`,\n       If None and agent_path is also None, will default to\n        `zero-shot-react-description`.\n    callback_manager: CallbackManager to use. Global callback manager is used if\n        not provided. Defaults to None.\n    agent_path: Path to serialized agent to use.\n    agent_kwargs: Additional key word arguments to pass to the underlying agent\n    **kwargs: Additional key word arguments passed to the agent executor\n\nReturns:\n    An agent executor"
            },
            {
                "name": "create_llama_chat_agent",
                "parameters": [
                    {
                        "name": "toolkit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "agent_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Load a chat llama agent given a Llama Toolkit and LLM.\n\nArgs:\n    toolkit: LlamaToolkit to use.\n    llm: Language model to use as the agent.\n    callback_manager: CallbackManager to use. Global callback manager is used if\n        not provided. Defaults to None.\n    agent_kwargs: Additional key word arguments to pass to the underlying agent\n    **kwargs: Additional key word arguments passed to the agent executor\n\nReturns:\n    An agent executor"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "AgentExecutor",
            "AgentType",
            "BaseCallbackManager",
            "BaseLLM",
            "initialize_agent",
            "LlamaToolkit"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AgentFnComponent",
            "AgentInputComponent",
            "BaseAgentComponent",
            "CustomAgentComponent",
            "ArgPackComponent",
            "FnComponent",
            "FunctionComponent",
            "InputComponent",
            "RouterComponent",
            "SelectorComponent",
            "ToolRunnerComponent",
            "StatefulFnComponent",
            "LoopComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/argpacks.py": {
        "functions": [
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "ArgPackComponent",
                "docstring": "Arg pack component.\n\nPacks arbitrary number of args into a list."
            },
            {
                "name": "KwargPackComponent",
                "docstring": "Kwarg pack component.\n\nPacks arbitrary number of kwargs into a dict."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "Field"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/input.py": {
        "functions": [
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs."
            },
            {
                "name": "validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "InputComponent",
                "docstring": "Input component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "InputKeys",
            "OutputKeys",
            "QueryComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/agent.py": {
        "functions": [
            {
                "name": "get_parameters",
                "parameters": [
                    {
                        "name": "fn",
                        "default": null
                    }
                ],
                "docstring": "Get parameters from function.\n\nReturns:\n    Tuple[Set[str], Set[str]]: required and optional parameters"
            },
            {
                "name": "default_agent_input_fn",
                "parameters": [
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Default agent input function."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "req_params",
                        "default": null
                    },
                    {
                        "name": "opt_params",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "req_params",
                        "default": null
                    },
                    {
                        "name": "opt_params",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys dict."
            },
            {
                "name": "_optional_input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Optional input keys dict."
            },
            {
                "name": "_output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys dict."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "AgentInputComponent",
                "docstring": "Takes in agent inputs and transforms it into desired outputs.\n\nNOTE: this is now deprecated in favor of using `StatefulFnComponent`."
            },
            {
                "name": "BaseAgentComponent",
                "docstring": "Agent component.\n\nAbstract class used for type checking."
            },
            {
                "name": "AgentFnComponent",
                "docstring": "Function component for agents.\n\nDesigned to let users easily modify state.\n\nNOTE: this is now deprecated in favor of using `StatefulFnComponent`."
            },
            {
                "name": "CustomAgentComponent",
                "docstring": "Custom component for agents.\n\nDesigned to let users easily modify state.\n\nNOTE: this is now deprecated in favor of using `StatefulFnComponent`."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "signature",
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "Set",
            "Tuple",
            "cast",
            "Annotated",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "Field",
            "PrivateAttr",
            "ConfigDict",
            "WithJsonSchema",
            "CallbackManager",
            "Task",
            "Task",
            "Task"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/tool_runner.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "ToolRunnerComponent",
                "docstring": "Tool runner component that takes in a set of tools."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "Sequence",
            "cast",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "CallbackManager",
            "AsyncBaseTool",
            "adapt_to_async_tool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/loop.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "pipeline",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "should_exit_fn",
                        "default": "Constant(value=5)"
                    },
                    {
                        "name": "add_output_to_input_fn",
                        "default": null
                    },
                    {
                        "name": "max_iterations",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "LoopComponent",
                "docstring": "Loop component."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "QueryPipeline",
            "Field",
            "ConfigDict",
            "WithJsonSchema",
            "CallbackManager",
            "Any",
            "Dict",
            "Optional",
            "Callable",
            "Annotated"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/router.py": {
        "functions": [
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "selector",
                        "default": null
                    },
                    {
                        "name": "choices",
                        "default": null
                    },
                    {
                        "name": "components",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "sub_query_components",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get sub query components.\n\nCertain query components may have sub query components, e.g. a\nquery pipeline will have sub query components, and so will\nan IfElseComponent."
            }
        ],
        "classes": [
            {
                "name": "SelectorComponent",
                "docstring": "Selector component."
            },
            {
                "name": "RouterComponent",
                "docstring": "Router Component.\n\nRoutes queries to different query components based on a selector.\n\nAssumes a single query component is selected."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "BaseSelector",
            "QUERY_COMPONENT_TYPE",
            "ChainableMixin",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "validate_and_convert_stringable",
            "Field",
            "PrivateAttr",
            "SerializeAsAny",
            "ConfigDict",
            "CallbackManager",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/function.py": {
        "functions": [
            {
                "name": "get_parameters",
                "parameters": [
                    {
                        "name": "fn",
                        "default": null
                    }
                ],
                "docstring": "Get parameters from function.\n\nReturns:\n    Tuple[Set[str], Set[str]]: required and optional parameters"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "req_params",
                        "default": "Constant(value='output')"
                    },
                    {
                        "name": "opt_params",
                        "default": null
                    },
                    {
                        "name": "output_key",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            }
        ],
        "classes": [
            {
                "name": "FnComponent",
                "docstring": "Query component that takes in an arbitrary function."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "signature",
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "Set",
            "Tuple",
            "Annotated",
            "InputKeys",
            "OutputKeys",
            "QueryComponent",
            "Field",
            "PrivateAttr",
            "ConfigDict",
            "WithJsonSchema",
            "CallbackManager"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_pipeline/components/stateful.py": {
        "functions": [
            {
                "name": "reset_state",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Reset state."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "req_params",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "opt_params",
                        "default": null
                    },
                    {
                        "name": "state",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            }
        ],
        "classes": [
            {
                "name": "BaseStatefulComponent",
                "docstring": "Takes in agent inputs and transforms it into desired outputs."
            },
            {
                "name": "StatefulFnComponent",
                "docstring": "Query component that takes in an arbitrary function.\n\nStateful version of `FnComponent`. Expects functions to have `state` as the first argument."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "Set",
            "QueryComponent",
            "Field",
            "FnComponent",
            "get_parameters"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/kvstore/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "SimpleKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/kvstore/types.py": {
        "functions": [
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "val",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "put_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "kv_pairs",
                        "default": "Name(id='DEFAULT_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "collection",
                        "default": null
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    }
                ],
                "docstring": "Create a BaseInMemoryKVStore from a persist directory."
            }
        ],
        "classes": [
            {
                "name": "BaseKVStore",
                "docstring": "Base key-value store."
            },
            {
                "name": "BaseInMemoryKVStore",
                "docstring": "Base in-memory key-value store."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "fsspec"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/kvstore/simple_kvstore.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Init a SimpleKVStore."
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "val",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Put a key-value pair into the store."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Get a value from the store."
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Get all values from the store."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Delete a value from the store."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the store."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load a SimpleKVStore from a persist path and filesystem."
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Save the store as dict."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "save_dict",
                        "default": null
                    }
                ],
                "docstring": "Load a SimpleKVStore from dict."
            }
        ],
        "classes": [
            {
                "name": "SimpleKVStore",
                "docstring": "Simple in-memory Key-Value store.\n\nArgs:\n    data (Optional[DATA_TYPE]): data to initialize the store with"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "logging",
            "os",
            "Dict",
            "Optional",
            "fsspec",
            "DEFAULT_COLLECTION",
            "BaseInMemoryKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/docstore/registry.py": {
        "functions": [
            {
                "name": "get_default_docstore",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "DocumentStoreType",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Enum",
            "Dict",
            "Type",
            "SimpleDocumentStore",
            "BaseDocumentStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/docstore/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DocumentStore",
            "SimpleDocumentStore",
            "BaseDocumentStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/docstore/types.py": {
        "functions": [
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_PATH', ctx=Load())"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the docstore to a file."
            },
            {
                "name": "docs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "docs",
                        "default": "Name(id='DEFAULT_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "allow_update",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    },
                    {
                        "name": "store_text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Delete a document from the store."
            },
            {
                "name": "document_exists",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_document_hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    },
                    {
                        "name": "doc_hash",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "set_document_hashes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_hashes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_document_hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_all_document_hashes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_all_ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a mapping of ref_doc_id -> RefDocInfo for all ingested documents."
            },
            {
                "name": "get_ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Get the RefDocInfo for a given ref_doc_id."
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Delete a ref_doc and all it's associated nodes."
            },
            {
                "name": "get_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "node_ids",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Get nodes from docstore.\n\nArgs:\n    node_ids (List[str]): node ids\n    raise_error (bool): raise error if node_id not found"
            },
            {
                "name": "get_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "node_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Get node from docstore.\n\nArgs:\n    node_id (str): node id\n    raise_error (bool): raise error if node_id not found"
            },
            {
                "name": "get_node_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node_id_dict",
                        "default": null
                    }
                ],
                "docstring": "Get node dict from docstore given a mapping of index to node ids.\n\nArgs:\n    node_id_dict (Dict[int, str]): mapping of index to node ids"
            }
        ],
        "classes": [
            {
                "name": "RefDocInfo",
                "docstring": "Dataclass to represent ingested documents."
            },
            {
                "name": "BaseDocumentStore",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "ABC",
            "abstractmethod",
            "dataclass",
            "field",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "fsspec",
            "DataClassJsonMixin",
            "BaseNode",
            "DEFAULT_BATCH_SIZE"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/docstore/utils.py": {
        "functions": [
            {
                "name": "doc_to_json",
                "parameters": [
                    {
                        "name": "doc",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "json_to_doc",
                "parameters": [
                    {
                        "name": "doc_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "legacy_json_to_doc",
                "parameters": [
                    {
                        "name": "doc_dict",
                        "default": null
                    }
                ],
                "docstring": "Todo: Deprecated legacy support for old node versions."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [
            "Todo: Deprecated legacy support for old node versions."
        ],
        "imports": [
            "DATA_KEY",
            "TYPE_KEY",
            "BaseNode",
            "Document",
            "ImageDocument",
            "ImageNode",
            "IndexNode",
            "NodeRelationship",
            "RelatedNodeInfo",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/docstore/simple_docstore.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "simple_kvstore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "namespace",
                        "default": "Name(id='DEFAULT_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    }
                ],
                "docstring": "Init a SimpleDocumentStore."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "namespace",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleDocumentStore from a persist directory.\n\nArgs:\n    persist_dir (str): directory to persist the store\n    namespace (Optional[str]): namespace for the docstore\n    fs (Optional[fsspec.AbstractFileSystem]): filesystem to use"
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "namespace",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleDocumentStore from a persist path.\n\nArgs:\n    persist_path (str): Path to persist the store\n    namespace (Optional[str]): namespace for the docstore\n    fs (Optional[fsspec.AbstractFileSystem]): filesystem to use"
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_PATH', ctx=Load())"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the store."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "save_dict",
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimpleDocumentStore",
                "docstring": "Simple Document (Node) store.\n\nAn in-memory store for Document and Node objects.\n\nArgs:\n    simple_kvstore (SimpleKVStore): simple key-value store\n    namespace (str): namespace for the docstore"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "Optional",
            "fsspec",
            "KVDocumentStore",
            "DEFAULT_BATCH_SIZE",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "DEFAULT_PERSIST_PATH",
            "SimpleKVStore",
            "BaseInMemoryKVStore",
            "concat_dirs"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/docstore/keyval_docstore.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kvstore",
                        "default": "Name(id='DEFAULT_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "namespace",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "batch_size",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "node_collection_suffix",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ref_doc_collection_suffix",
                        "default": null
                    },
                    {
                        "name": "metadata_collection_suffix",
                        "default": null
                    }
                ],
                "docstring": "Init a KVDocumentStore."
            },
            {
                "name": "docs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all documents.\n\nReturns:\n    Dict[str, BaseDocument]: documents"
            },
            {
                "name": "_get_kv_pairs_for_insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    },
                    {
                        "name": "ref_doc_info",
                        "default": null
                    },
                    {
                        "name": "store_text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_merge_ref_doc_kv_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_kv_pairs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_prepare_kv_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    },
                    {
                        "name": "allow_update",
                        "default": null
                    },
                    {
                        "name": "store_text",
                        "default": null
                    }
                ],
                "docstring": "This method processes a sequence of document nodes and prepares key-value pairs for\nnodes, their metadata, and reference documents. The key-value pairs are structured\nfor subsequent insertion into the key-value store. This method does not insert the\nkey-value pairs into the store; it only prepares them. The reference document key-value\npairs are merged to ensure each `ref_doc_id` has a consolidated entry.\n\nArgs:\n    nodes (Sequence[BaseNode]): A sequence of document nodes to be processed.\n    allow_update (bool): A flag indicating whether existing nodes should be updated.\n    store_text (bool): A flag indicating whether the text content of the nodes should be stored.\n\nReturns:\n    Tuple[\n        list,          # List of key-value pairs for nodes\n        list,          # List of key-value pairs for metadata\n        List[Tuple[str, dict]]  # Dictionary of key-value pairs for reference documents, keyed by ref_doc_id\n    ]\n\nRaises:\n    ValueError: If a node already exists in the store and `allow_update` is False."
            },
            {
                "name": "add_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "docs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allow_update",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    },
                    {
                        "name": "store_text",
                        "default": null
                    }
                ],
                "docstring": "Add a document to the store.\n\nArgs:\n    docs (List[BaseDocument]): documents\n    allow_update (bool): allow update of docstore from document"
            },
            {
                "name": "get_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Get a document from the store.\n\nArgs:\n    doc_id (str): document id\n    raise_error (bool): raise error if doc_id not found"
            },
            {
                "name": "_remove_legacy_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_info_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Get the RefDocInfo for a given ref_doc_id."
            },
            {
                "name": "get_all_ref_doc_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a mapping of ref_doc_id -> RefDocInfo for all ingested documents."
            },
            {
                "name": "ref_doc_exists",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    }
                ],
                "docstring": "Check if a ref_doc_id has been ingested."
            },
            {
                "name": "document_exists",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Check if document exists."
            },
            {
                "name": "_get_ref_doc_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Helper function to get ref_doc_info for a given doc_id."
            },
            {
                "name": "_remove_from_ref_doc_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Helper function to remove node doc_id from ref_doc_collection.\nIf ref_doc has no more doc_ids, delete it from the collection."
            },
            {
                "name": "delete_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Delete a document from the store."
            },
            {
                "name": "delete_ref_doc",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "ref_doc_id",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Delete a ref_doc and all it's associated nodes."
            },
            {
                "name": "set_document_hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    },
                    {
                        "name": "doc_hash",
                        "default": null
                    }
                ],
                "docstring": "Set the hash for a given doc_id."
            },
            {
                "name": "set_document_hashes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_hashes",
                        "default": null
                    }
                ],
                "docstring": "Set the hash for a given doc_id."
            },
            {
                "name": "get_document_hash",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "doc_id",
                        "default": null
                    }
                ],
                "docstring": "Get the stored hash for a document, if it exists."
            },
            {
                "name": "get_all_document_hashes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get the stored hash for all documents."
            }
        ],
        "classes": [
            {
                "name": "KVDocumentStore",
                "docstring": "Document (Node) store.\n\nNOTE: at the moment, this store is primarily used to store Node objects.\nEach node will be assigned an ID.\n\nThe same docstore can be reused across index structures. This\nallows you to reuse the same storage for multiple index structures;\notherwise, each index would create a docstore under the hood.\n\n.. code-block:: python\n    nodes = SentenceSplitter().get_nodes_from_documents()\n    docstore = SimpleDocumentStore()\n    docstore.add_documents(nodes)\n    storage_context = StorageContext.from_defaults(docstore=docstore)\n\n    summary_index = SummaryIndex(nodes, storage_context=storage_context)\n    vector_index = VectorStoreIndex(nodes, storage_context=storage_context)\n    keyword_table_index = SimpleKeywordTableIndex(nodes, storage_context=storage_context)\n\nThis will use the same docstore for multiple index structures.\n\nArgs:\n    kvstore (BaseKVStore): key-value store\n    namespace (str): namespace for the docstore"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "BaseNode",
            "Document",
            "TextNode",
            "BaseDocumentStore",
            "RefDocInfo",
            "doc_to_json",
            "json_to_doc",
            "DEFAULT_BATCH_SIZE",
            "BaseKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/index_store/simple_index_store.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "simple_kvstore",
                        "default": null
                    }
                ],
                "docstring": "Init a SimpleIndexStore."
            },
            {
                "name": "from_persist_dir",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_PERSIST_DIR', ctx=Load())"
                    },
                    {
                        "name": "persist_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleIndexStore from a persist directory."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "persist_path",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleIndexStore from a persist path."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_PATH', ctx=Load())"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the store."
            },
            {
                "name": "from_dict",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "save_dict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimpleIndexStore",
                "docstring": "Simple in-memory Index store.\n\nArgs:\n    simple_kvstore (SimpleKVStore): simple key-value store"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "Optional",
            "fsspec",
            "KVIndexStore",
            "DEFAULT_PERSIST_DIR",
            "DEFAULT_PERSIST_FNAME",
            "DEFAULT_PERSIST_PATH",
            "SimpleKVStore",
            "BaseInMemoryKVStore",
            "concat_dirs"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/index_store/keyval_index_store.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "kvstore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "namespace",
                        "default": null
                    },
                    {
                        "name": "collection_suffix",
                        "default": null
                    }
                ],
                "docstring": "Init a KVIndexStore."
            },
            {
                "name": "add_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    }
                ],
                "docstring": "Add an index struct.\n\nArgs:\n    index_struct (IndexStruct): index struct"
            },
            {
                "name": "delete_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Delete an index struct.\n\nArgs:\n    key (str): index struct key"
            },
            {
                "name": "get_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "struct_id",
                        "default": null
                    }
                ],
                "docstring": "Get an index struct.\n\nArgs:\n    struct_id (Optional[str]): index struct id"
            },
            {
                "name": "index_structs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all index structs.\n\nReturns:\n    List[IndexStruct]: index structs"
            }
        ],
        "classes": [
            {
                "name": "KVIndexStore",
                "docstring": "Key-Value Index store.\n\nArgs:\n    kvstore (BaseKVStore): key-value store\n    namespace (str): namespace for the index store\n    collection_suffix (str): suffix for the collection name"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "IndexStruct",
            "BaseIndexStore",
            "index_struct_to_json",
            "json_to_index_struct",
            "BaseKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/index_store/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "SimpleIndexStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/index_store/types.py": {
        "functions": [
            {
                "name": "index_structs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "add_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "index_struct",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_index_struct",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "struct_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_PERSIST_PATH', ctx=Load())"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the index store to disk."
            }
        ],
        "classes": [
            {
                "name": "BaseIndexStore",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "ABC",
            "abstractmethod",
            "List",
            "Optional",
            "fsspec",
            "IndexStruct"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/index_store/utils.py": {
        "functions": [
            {
                "name": "index_struct_to_json",
                "parameters": [
                    {
                        "name": "index_struct",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "json_to_index_struct",
                "parameters": [
                    {
                        "name": "struct_dict",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DATA_KEY",
            "TYPE_KEY",
            "IndexStruct",
            "INDEX_STRUCT_TYPE_TO_INDEX_STRUCT_CLASS"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/chat_store/loading.py": {
        "functions": [
            {
                "name": "load_chat_store",
                "parameters": [
                    {
                        "name": "data",
                        "default": null
                    }
                ],
                "docstring": "Load a chat store from a dict."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseChatStore",
            "SimpleChatStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/chat_store/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseChatStore",
            "SimpleChatStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/chat_store/simple_chat_store.py": {
        "functions": [
            {
                "name": "chat_message_serialization",
                "parameters": [
                    {
                        "name": "chat_message",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    },
                    {
                        "name": "info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "set_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set messages for a key."
            },
            {
                "name": "get_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Get messages for a key."
            },
            {
                "name": "add_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "idx",
                        "default": null
                    }
                ],
                "docstring": "Add a message for a key."
            },
            {
                "name": "delete_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Delete messages for a key."
            },
            {
                "name": "delete_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "idx",
                        "default": null
                    }
                ],
                "docstring": "Delete specific message for a key."
            },
            {
                "name": "delete_last_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Delete last message for a key."
            },
            {
                "name": "get_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all keys."
            },
            {
                "name": "persist",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='chat_store.json')"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Persist the docstore to a file."
            },
            {
                "name": "from_persist_path",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value='chat_store.json')"
                    },
                    {
                        "name": "persist_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Create a SimpleChatStore from a persist path."
            }
        ],
        "classes": [
            {
                "name": "SimpleChatStore",
                "docstring": "Simple chat store. Async methods provide same functionality as sync methods in this class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Annotated",
            "fsspec",
            "Field",
            "WrapSerializer",
            "ChatMessage",
            "BaseChatStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/storage/chat_store/base.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Get class name."
            },
            {
                "name": "set_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Set messages for a key."
            },
            {
                "name": "get_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Get messages for a key."
            },
            {
                "name": "add_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Add a message for a key."
            },
            {
                "name": "delete_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Delete messages for a key."
            },
            {
                "name": "delete_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "idx",
                        "default": null
                    }
                ],
                "docstring": "Delete specific message for a key."
            },
            {
                "name": "delete_last_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "key",
                        "default": null
                    }
                ],
                "docstring": "Delete last message for a key."
            },
            {
                "name": "get_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all keys."
            }
        ],
        "classes": [
            {
                "name": "BaseChatStore",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "List",
            "Optional",
            "ChatMessage",
            "BaseComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/event_handlers/null.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "handle",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "event",
                        "default": null
                    }
                ],
                "docstring": "Handle logic - null handler does nothing."
            }
        ],
        "classes": [
            {
                "name": "NullEventHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "BaseEventHandler",
            "BaseEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/event_handlers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEventHandler",
            "NullEventHandler"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/event_handlers/base.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "handle",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "event",
                        "default": null
                    }
                ],
                "docstring": "Logic for handling event."
            }
        ],
        "classes": [
            {
                "name": "BaseEventHandler",
                "docstring": "Base callback handler that can be used to track event starts and ends."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "abstractmethod",
            "BaseModel",
            "ConfigDict",
            "BaseEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ContextVar",
            "Optional",
            "BaseSpan",
            "SimpleSpan"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span/simple.py": {
        "functions": [],
        "classes": [
            {
                "name": "SimpleSpan",
                "docstring": "Simple span class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "Optional",
            "Field",
            "BaseSpan",
            "datetime"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span/base.py": {
        "functions": [],
        "classes": [
            {
                "name": "BaseSpan",
                "docstring": "Base data class representing a span."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "uuid4",
            "BaseModel",
            "Field",
            "ConfigDict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/rerank.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "ReRankStartEvent",
                "docstring": "ReRankStartEvent.\n\nArgs:\n    query (QueryType): Query as a string or query bundle.\n    nodes (List[NodeWithScore]): List of nodes with scores.\n    top_n (int): Number of nodes to return after rerank.\n    model_name (str): Name of the model used for reranking."
            },
            {
                "name": "ReRankEndEvent",
                "docstring": "ReRankEndEvent.\n\nArgs:\n    nodes (List[NodeWithScore]): List of returned nodes after rerank."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "BaseEvent",
            "NodeWithScore",
            "QueryType",
            "ConfigDict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/exception.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "ExceptionEvent",
                "docstring": "ExceptionEvent.\n\nArgs:\n    exception (BaseException): exception."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/query.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "QueryStartEvent",
                "docstring": "QueryStartEvent.\n\nArgs:\n    query (QueryType): Query as a string or query bundle."
            },
            {
                "name": "QueryEndEvent",
                "docstring": "QueryEndEvent.\n\nArgs:\n    query (QueryType): Query as a string or query bundle.\n    response (RESPONSE_TYPE): Response."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEvent",
            "RESPONSE_TYPE",
            "QueryType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/embedding.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "EmbeddingStartEvent",
                "docstring": "EmbeddingStartEvent.\n\nArgs:\n    model_dict (dict): Model dictionary containing details about the embedding model."
            },
            {
                "name": "EmbeddingEndEvent",
                "docstring": "EmbeddingEndEvent.\n\nArgs:\n    chunks (List[str]): List of chunks.\n    embeddings (List[List[float]]): List of embeddings."
            },
            {
                "name": "SparseEmbeddingStartEvent",
                "docstring": "EmbeddingStartEvent.\n\nArgs:\n    model_dict (dict): Model dictionary containing details about the embedding model."
            },
            {
                "name": "SparseEmbeddingEndEvent",
                "docstring": "EmbeddingEndEvent.\n\nArgs:\n    chunks (List[str]): List of chunks.\n    embeddings (List[List[float]]): List of embeddings."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Dict",
            "List",
            "BaseEvent",
            "ConfigDict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/llm.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "LLMPredictStartEvent",
                "docstring": "LLMPredictStartEvent.\n\nArgs:\n    template (BasePromptTemplate): Prompt template.\n    template_args (Optional[dict]): Prompt template arguments."
            },
            {
                "name": "LLMPredictEndEvent",
                "docstring": "LLMPredictEndEvent.\n\nThe result of an llm.predict() call.\n\nArgs:\n    output (str): Output."
            },
            {
                "name": "LLMStructuredPredictStartEvent",
                "docstring": "LLMStructuredPredictStartEvent.\n\nArgs:\n    output_cls (Any): Output class to predict.\n    template (BasePromptTemplate): Prompt template.\n    template_args (Optional[dict]): Prompt template arguments."
            },
            {
                "name": "LLMStructuredPredictEndEvent",
                "docstring": "LLMStructuredPredictEndEvent.\n\nArgs:\n    output (BaseModel): Predicted output class."
            },
            {
                "name": "LLMStructuredPredictInProgressEvent",
                "docstring": "LLMStructuredPredictInProgressEvent.\n\nArgs:\n    output (BaseModel): Predicted output class."
            },
            {
                "name": "LLMCompletionStartEvent",
                "docstring": "LLMCompletionStartEvent.\n\nArgs:\n    prompt (str): The prompt to be completed.\n    additional_kwargs (dict): Additional keyword arguments.\n    model_dict (dict): Model dictionary."
            },
            {
                "name": "LLMCompletionInProgressEvent",
                "docstring": "LLMCompletionInProgressEvent.\n\nArgs:\n    prompt (str): The prompt to be completed.\n    response (CompletionResponse): Completion response."
            },
            {
                "name": "LLMCompletionEndEvent",
                "docstring": "LLMCompletionEndEvent.\n\nArgs:\n    prompt (str): The prompt to be completed.\n    response (CompletionResponse): Completion response."
            },
            {
                "name": "LLMChatStartEvent",
                "docstring": "LLMChatStartEvent.\n\nArgs:\n    messages (List[ChatMessage]): List of chat messages.\n    additional_kwargs (dict): Additional keyword arguments.\n    model_dict (dict): Model dictionary."
            },
            {
                "name": "LLMChatInProgressEvent",
                "docstring": "LLMChatInProgressEvent.\n\nArgs:\n    messages (List[ChatMessage]): List of chat messages.\n    response (ChatResponse): Chat response currently being streamed."
            },
            {
                "name": "LLMChatEndEvent",
                "docstring": "LLMChatEndEvent.\n\nArgs:\n    messages (List[ChatMessage]): List of chat messages.\n    response (Optional[ChatResponse]): Last chat response."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Optional",
            "SerializeAsAny",
            "ConfigDict",
            "ChatMessage",
            "ChatResponse",
            "CompletionResponse",
            "BaseEvent",
            "BasePromptTemplate"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/retrieval.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "RetrievalStartEvent",
                "docstring": "RetrievalStartEvent.\n\nArgs:\n    str_or_query_bundle (QueryType): Query bundle."
            },
            {
                "name": "RetrievalEndEvent",
                "docstring": "RetrievalEndEvent.\n\nArgs:\n    str_or_query_bundle (QueryType): Query bundle.\n    nodes (List[NodeWithScore]): List of nodes with scores."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "BaseEvent",
            "QueryType",
            "NodeWithScore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/agent.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "validate_response",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "values",
                        "default": null
                    }
                ],
                "docstring": "Validate response."
            },
            {
                "name": "validate_response_type",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Validate response type."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "AgentRunStepStartEvent",
                "docstring": "AgentRunStepStartEvent.\n\nArgs:\n    task_id (str): Task ID.\n    step (Optional[TaskStep]): Task step.\n    input (Optional[str]): Optional input."
            },
            {
                "name": "AgentRunStepEndEvent",
                "docstring": "AgentRunStepEndEvent.\n\nArgs:\n    step_output (TaskStepOutput): Task step output."
            },
            {
                "name": "AgentChatWithStepStartEvent",
                "docstring": "AgentChatWithStepStartEvent.\n\nArgs:\n    user_msg (str): User input message."
            },
            {
                "name": "AgentChatWithStepEndEvent",
                "docstring": "AgentChatWithStepEndEvent.\n\nArgs:\n    response (Optional[AGENT_CHAT_RESPONSE_TYPE]): Agent chat response."
            },
            {
                "name": "AgentToolCallEvent",
                "docstring": "AgentToolCallEvent.\n\nArgs:\n    arguments (str): Arguments.\n    tool (ToolMetadata): Tool metadata."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "TaskStepOutput",
            "TaskStep",
            "model_validator",
            "field_validator",
            "BaseEvent",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "StreamingAgentChatResponse",
            "ToolMetadata"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/chat_engine.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "StreamChatStartEvent",
                "docstring": "StreamChatStartEvent.\n\nFired at the start of writing to the stream chat-engine queue."
            },
            {
                "name": "StreamChatEndEvent",
                "docstring": "StreamChatEndEvent.\n\nFired at the end of writing to the stream chat-engine queue."
            },
            {
                "name": "StreamChatErrorEvent",
                "docstring": "StreamChatErrorEvent.\n\nFired when an exception is raised during the stream chat-engine operation.\n\nArgs:\n    exception (Exception): Exception raised during the stream chat operation."
            },
            {
                "name": "StreamChatDeltaReceivedEvent",
                "docstring": "StreamChatDeltaReceivedEvent.\n\nArgs:\n    delta (str): Delta received from the stream chat."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/span.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "SpanDropEvent",
                "docstring": "SpanDropEvent.\n\nArgs:\n    err_str (str): Error string."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseEvent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/base.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Return class name."
            },
            {
                "name": "dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Keep for backwards compatibility."
            },
            {
                "name": "model_dump",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "BaseEvent",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "BaseModel",
            "Field",
            "ConfigDict",
            "uuid4",
            "datetime",
            "active_span_id"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/events/synthesis.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            }
        ],
        "classes": [
            {
                "name": "SynthesizeStartEvent",
                "docstring": "SynthesizeStartEvent.\n\nArgs:\n    query (QueryType): Query as a string or query bundle."
            },
            {
                "name": "SynthesizeEndEvent",
                "docstring": "SynthesizeEndEvent.\n\nArgs:\n    query (QueryType): Query as a string or query bundle.\n    response (RESPONSE_TYPE): Response."
            },
            {
                "name": "GetResponseStartEvent",
                "docstring": "GetResponseStartEvent.\n\nArgs:\n    query_str (str): Query string.\n    text_chunks (List[str]): List of text chunks."
            },
            {
                "name": "GetResponseEndEvent",
                "docstring": "GetResponseEndEvent."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "BaseEvent",
            "RESPONSE_TYPE",
            "QueryType"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span_handlers/null.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "span_enter",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": "Logic for entering a span."
            },
            {
                "name": "span_exit",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": "Logic for exiting a span."
            },
            {
                "name": "new_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "parent_span_id",
                        "default": null
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": "Create a span."
            },
            {
                "name": "prepare_to_exit_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": "Logic for exiting a span."
            },
            {
                "name": "prepare_to_drop_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "err",
                        "default": null
                    }
                ],
                "docstring": "Logic for droppping a span."
            }
        ],
        "classes": [
            {
                "name": "NullSpanHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "inspect",
            "Dict",
            "Optional",
            "Any",
            "BaseSpanHandler",
            "BaseSpan"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span_handlers/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BaseSpanHandler",
            "NullSpanHandler",
            "SimpleSpanHandler"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span_handlers/simple.py": {
        "functions": [
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "new_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "parent_span_id",
                        "default": null
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": "Create a span."
            },
            {
                "name": "prepare_to_exit_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": "Logic for preparing to drop a span."
            },
            {
                "name": "prepare_to_drop_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "err",
                        "default": null
                    }
                ],
                "docstring": "Logic for droppping a span."
            },
            {
                "name": "_get_parents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Helper method to get all parent/root spans."
            },
            {
                "name": "_build_tree_by_parent",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "parent",
                        "default": null
                    },
                    {
                        "name": "acc",
                        "default": null
                    },
                    {
                        "name": "spans",
                        "default": null
                    }
                ],
                "docstring": "Builds the tree by parent root."
            },
            {
                "name": "_get_trace_trees",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Method for getting trace trees."
            },
            {
                "name": "print_trace_trees",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Method for viewing trace trees."
            }
        ],
        "classes": [
            {
                "name": "SimpleSpanHandler",
                "docstring": "Span Handler that manages SimpleSpan's."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "inspect",
            "Any",
            "Dict",
            "cast",
            "List",
            "Optional",
            "TYPE_CHECKING",
            "SimpleSpan",
            "BaseSpanHandler",
            "datetime",
            "reduce",
            "warnings",
            "Tree",
            "Tree"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/instrumentation/span_handlers/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "open_spans",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "completed_spans",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "dropped_spans",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "current_span_ids",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": "Class name."
            },
            {
                "name": "lock",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "span_enter",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "parent_id",
                        "default": null
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": "Logic for entering a span."
            },
            {
                "name": "span_exit",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": "Logic for exiting a span."
            },
            {
                "name": "span_drop",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "err",
                        "default": null
                    }
                ],
                "docstring": "Logic for dropping a span i.e. early exit."
            },
            {
                "name": "new_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "parent_span_id",
                        "default": null
                    },
                    {
                        "name": "tags",
                        "default": null
                    }
                ],
                "docstring": "Create a span.\n\nSubclasses of BaseSpanHandler should create the respective span type T\nand return it. Only NullSpanHandler should return a None here."
            },
            {
                "name": "prepare_to_exit_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "result",
                        "default": null
                    }
                ],
                "docstring": "Logic for preparing to exit a span.\n\nSubclasses of BaseSpanHandler should return back the specific span T\nthat is to be exited. If None is returned, then the span won't actually\nbe exited."
            },
            {
                "name": "prepare_to_drop_span",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "id_",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "bound_args",
                        "default": null
                    },
                    {
                        "name": "instance",
                        "default": null
                    },
                    {
                        "name": "err",
                        "default": null
                    }
                ],
                "docstring": "Logic for preparing to drop a span.\n\nSubclasses of BaseSpanHandler should return back the specific span T\nthat is to be dropped. If None is returned, then the span won't actually\nbe dropped."
            }
        ],
        "classes": [
            {
                "name": "BaseSpanHandler",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "inspect",
            "threading",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Generic",
            "Optional",
            "TypeVar",
            "BaseModel",
            "Field",
            "PrivateAttr",
            "ConfigDict",
            "BaseSpan"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/retrieval/metrics.py": {
        "functions": [
            {
                "name": "discounted_gain",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "resolve_metrics",
                "parameters": [
                    {
                        "name": "metrics",
                        "default": null
                    }
                ],
                "docstring": "Resolve metrics from list of metric names."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute metric based on the provided inputs.\n\nParameters:\n    query (Optional[str]): The query string (not used in the current implementation).\n    expected_ids (Optional[List[str]]): Expected document IDs.\n    retrieved_ids (Optional[List[str]]): Retrieved document IDs.\n    expected_texts (Optional[List[str]]): Expected texts (not used in the current implementation).\n    retrieved_texts (Optional[List[str]]): Retrieved texts (not used in the current implementation).\n\nRaises:\n    ValueError: If the necessary IDs are not provided.\n\nReturns:\n    RetrievalMetricResult: The result with the computed hit rate score."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute MRR based on the provided inputs and selected method.\n\nParameters:\n    query (Optional[str]): The query string (not used in the current implementation).\n    expected_ids (Optional[List[str]]): Expected document IDs.\n    retrieved_ids (Optional[List[str]]): Retrieved document IDs.\n    expected_texts (Optional[List[str]]): Expected texts (not used in the current implementation).\n    retrieved_texts (Optional[List[str]]): Retrieved texts (not used in the current implementation).\n\nRaises:\n    ValueError: If the necessary IDs are not provided.\n\nReturns:\n    RetrievalMetricResult: The result with the computed MRR score."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute precision based on the provided inputs and selected method.\n\nParameters:\n    query (Optional[str]): The query string (not used in the current implementation).\n    expected_ids (Optional[List[str]]): Expected document IDs.\n    retrieved_ids (Optional[List[str]]): Retrieved document IDs.\n    expected_texts (Optional[List[str]]): Expected texts (not used in the current implementation).\n    retrieved_texts (Optional[List[str]]): Retrieved texts (not used in the current implementation).\n\nRaises:\n    ValueError: If the necessary IDs are not provided.\n\nReturns:\n    RetrievalMetricResult: The result with the computed precision score."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute recall based on the provided inputs and selected method.\n\nParameters:\n    query (Optional[str]): The query string (not used in the current implementation).\n    expected_ids (Optional[List[str]]): Expected document IDs.\n    retrieved_ids (Optional[List[str]]): Retrieved document IDs.\n    expected_texts (Optional[List[str]]): Expected texts (not used in the current implementation).\n    retrieved_texts (Optional[List[str]]): Retrieved texts (not used in the current implementation).\n\nRaises:\n    ValueError: If the necessary IDs are not provided.\n\nReturns:\n    RetrievalMetricResult: The result with the computed recall score."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute average precision based on the provided inputs and selected method.\n\nParameters:\n    query (Optional[str]): The query string (not used in the current implementation).\n    expected_ids (Optional[List[str]]): Expected document IDs.\n    retrieved_ids (Optional[List[str]]): Retrieved document IDs, ordered by relevance from highest to lowest.\n    expected_texts (Optional[List[str]]): Expected texts (not used in the current implementation).\n    retrieved_texts (Optional[List[str]]): Retrieved texts (not used in the current implementation).\n\nRaises:\n    ValueError: If the necessary IDs are not provided.\n\nReturns:\n    RetrievalMetricResult: The result with the computed average precision score."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute NDCG based on the provided inputs and selected method.\n\nParameters:\n    query (Optional[str]): The query string (not used in the current implementation).\n    expected_ids (Optional[List[str]]): Expected document IDs, unordered by relevance.\n    retrieved_ids (Optional[List[str]]): Retrieved document IDs, ordered by relevance from highest to lowest.\n    expected_texts (Optional[List[str]]): Expected texts (not used in the current implementation).\n    retrieved_texts (Optional[List[str]]): Retrieved texts (not used in the current implementation).\n\nRaises:\n    ValueError: If the necessary IDs are not provided.\n\nReturns:\n    RetrievalMetricResult: The result with the computed NDCG score."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='rerank-english-v2.0')"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_agg_func",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "agg",
                        "default": null
                    }
                ],
                "docstring": "Get agg func."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": "Constant(value='max')"
                    },
                    {
                        "name": "agg",
                        "default": null
                    }
                ],
                "docstring": "Compute metric."
            }
        ],
        "classes": [
            {
                "name": "HitRate",
                "docstring": "Hit rate metric: Compute hit rate with two calculation options.\n\n- The default method checks for a single match between any of the retrieved docs and expected docs.\n- The more granular method checks for all potential matches between retrieved docs and expected docs.\n\nAttributes:\n    metric_name (str): The name of the metric.\n    use_granular_hit_rate (bool): Determines whether to use the granular method for calculation."
            },
            {
                "name": "MRR",
                "docstring": "MRR (Mean Reciprocal Rank) metric with two calculation options.\n\n- The default method calculates the reciprocal rank of the first relevant retrieved document.\n- The more granular method sums the reciprocal ranks of all relevant retrieved documents and divides by the count of relevant documents.\n\nAttributes:\n    metric_name (str): The name of the metric.\n    use_granular_mrr (bool): Determines whether to use the granular method for calculation."
            },
            {
                "name": "Precision",
                "docstring": "Precision metric.\n\nThe `K`-value in `Precision@K` usually corresponds to `top_k` of the retriever.\n\nAttributes:\n    metric_name (str): The name of the metric."
            },
            {
                "name": "Recall",
                "docstring": "Recall metric.\n\nAttributes:\n    metric_name (str): The name of the metric."
            },
            {
                "name": "AveragePrecision",
                "docstring": "Average Precision (AP) metric.\n\nAttributes:\n    metric_name (str): The name of the metric."
            },
            {
                "name": "NDCG",
                "docstring": "NDCG (Normalized Discounted Cumulative Gain) metric.\n\nThe position `p` is taken as the size of the query results (which is usually\n`top_k` of the retriever).\n\nCurrently only supports binary relevance\n(``rel=1`` if document is in ``expected_ids``, otherwise ``rel=0``)\nsince we assume that ``expected_ids`` is unordered.\n\nAttributes:\n    metric_name (str): The name of the metric.\n    mode (DiscountedGainMode): Determines the formula for each item in the summation."
            },
            {
                "name": "CohereRerankRelevancyMetric",
                "docstring": "Cohere rerank relevancy metric."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "math",
            "os",
            "Any",
            "Callable",
            "ClassVar",
            "Dict",
            "List",
            "Literal",
            "Optional",
            "Type",
            "numpy",
            "Field",
            "PrivateAttr",
            "BaseRetrievalMetric",
            "RetrievalMetricResult",
            "assert_never",
            "Client"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/retrieval/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/retrieval/evaluator.py": {
        "functions": [],
        "classes": [
            {
                "name": "RetrieverEvaluator",
                "docstring": "Retriever evaluator.\n\nThis module will evaluate a retriever using a set of metrics.\n\nArgs:\n    metrics (List[BaseRetrievalMetric]): Sequence of metrics to evaluate\n    retriever: Retriever to evaluate.\n    node_postprocessors (Optional[List[BaseNodePostprocessor]]): Post-processor to apply after retrieval."
            },
            {
                "name": "MultiModalRetrieverEvaluator",
                "docstring": "Retriever evaluator.\n\nThis module will evaluate a retriever using a set of metrics.\n\nArgs:\n    metrics (List[BaseRetrievalMetric]): Sequence of metrics to evaluate\n    retriever: Retriever to evaluate.\n    node_postprocessors (Optional[List[BaseNodePostprocessor]]): Post-processor to apply after retrieval."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Tuple",
            "BaseRetriever",
            "Field",
            "SerializeAsAny",
            "BaseRetrievalEvaluator",
            "RetrievalEvalMode",
            "BaseRetriever",
            "BaseNodePostprocessor",
            "ImageNode",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/retrieval/base.py": {
        "functions": [
            {
                "name": "from_str",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "label",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metric_vals_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Dictionary of metric values."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "String representation."
            },
            {
                "name": "from_metric_names",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "metric_names",
                        "default": null
                    }
                ],
                "docstring": "Create evaluator from metric names.\n\nArgs:\n    metric_names (List[str]): List of metric names\n    **kwargs: Additional arguments for the evaluator"
            },
            {
                "name": "evaluate",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Attribute(value=Name(id='RetrievalEvalMode', ctx=Load()), attr='TEXT', ctx=Load())"
                    },
                    {
                        "name": "expected_ids",
                        "default": null
                    },
                    {
                        "name": "expected_texts",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Run evaluation results with query string and expected ids.\n\nArgs:\n    query (str): Query string\n    expected_ids (List[str]): Expected ids\n\nReturns:\n    RetrievalEvalResult: Evaluation result"
            }
        ],
        "classes": [
            {
                "name": "RetrievalEvalMode",
                "docstring": "Evaluation of retrieval modality."
            },
            {
                "name": "RetrievalEvalResult",
                "docstring": "Retrieval eval result.\n\nNOTE: this abstraction might change in the future.\n\nAttributes:\n    query (str): Query string\n    expected_ids (List[str]): Expected ids\n    retrieved_ids (List[str]): Retrieved ids\n    metric_dict (Dict[str, BaseRetrievalMetric]):             Metric dictionary for the evaluation"
            },
            {
                "name": "BaseRetrievalEvaluator",
                "docstring": "Base Retrieval Evaluator class."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "abstractmethod",
            "Enum",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "asyncio_run",
            "BaseModel",
            "Field",
            "ConfigDict",
            "resolve_metrics",
            "BaseRetrievalMetric",
            "RetrievalMetricResult",
            "EmbeddingQAFinetuneDataset",
            "tqdm_asyncio"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/retrieval/metrics_base.py": {
        "functions": [
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "String representation."
            },
            {
                "name": "__float__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Float representation."
            },
            {
                "name": "compute",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "expected_texts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "retrieved_texts",
                        "default": null
                    }
                ],
                "docstring": "Compute metric.\n\nArgs:\n    query (Optional[str]): Query string\n    expected_ids (Optional[List[str]]): Expected ids\n    retrieved_ids (Optional[List[str]]): Retrieved ids\n    **kwargs: Additional keyword arguments"
            }
        ],
        "classes": [
            {
                "name": "RetrievalMetricResult",
                "docstring": "Metric result.\n\nAttributes:\n    score (float): Score for the metric\n    metadata (Dict[str, Any]): Metadata for the metric result"
            },
            {
                "name": "BaseRetrievalMetric",
                "docstring": "Base class for retrieval metrics."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Any",
            "ClassVar",
            "Dict",
            "List",
            "Optional",
            "BaseModel",
            "Field",
            "ConfigDict"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/benchmarks/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "BeirEvaluator",
            "HotpotQAEvaluator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/benchmarks/hotpotqa.py": {
        "functions": [
            {
                "name": "normalize_answer",
                "parameters": [
                    {
                        "name": "s",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "f1_score",
                "parameters": [
                    {
                        "name": "prediction",
                        "default": null
                    },
                    {
                        "name": "ground_truth",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "exact_match_score",
                "parameters": [
                    {
                        "name": "prediction",
                        "default": null
                    },
                    {
                        "name": "ground_truth",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_download_datasets",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "queries",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "queries_fraction",
                        "default": null
                    },
                    {
                        "name": "show_result",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_objects",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "remove_articles",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "white_space_fix",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "remove_punc",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "lower",
                "parameters": [
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "HotpotQAEvaluator",
                "docstring": "Refer to https://hotpotqa.github.io/ for more details on the dataset."
            },
            {
                "name": "HotpotQARetriever",
                "docstring": "This is a mocked retriever for HotpotQA dataset. It is only meant to be used\nwith the hotpotqa dev dataset in the distractor setting. This is the setting that\ndoes not require retrieval but requires identifying the supporting facts from\na list of 10 sources."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "re",
            "string",
            "Counter",
            "rmtree",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "requests",
            "tqdm",
            "BaseQueryEngine",
            "BaseRetriever",
            "RetrieverQueryEngine",
            "NodeWithScore",
            "QueryBundle",
            "TextNode",
            "get_cache_dir"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/benchmarks/beir.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_download_datasets",
                "parameters": [
                    {
                        "name": "self",
                        "default": "List(elts=[Constant(value='nfcorpus')], ctx=Load())"
                    },
                    {
                        "name": "datasets",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "run",
                "parameters": [
                    {
                        "name": "self",
                        "default": "List(elts=[Constant(value='nfcorpus')], ctx=Load())"
                    },
                    {
                        "name": "create_retriever",
                        "default": "List(elts=[Constant(value=3), Constant(value=10)], ctx=Load())"
                    },
                    {
                        "name": "datasets",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metrics_k_values",
                        "default": null
                    },
                    {
                        "name": "node_postprocessors",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "BeirEvaluator",
                "docstring": "Refer to: https://github.com/beir-cellar/beir for a full list of supported datasets\nand a full description of BEIR."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "rmtree",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "tqdm",
            "BaseRetriever",
            "BaseNodePostprocessor",
            "Document",
            "QueryBundle",
            "get_cache_dir",
            "util",
            "GenericDataLoader",
            "EvaluateRetrieval"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/multi_modal/faithfulness.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "evaluate",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "contexts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_paths",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_urls",
                        "default": null
                    }
                ],
                "docstring": "Evaluate whether the response is faithful to the multi-modal contexts."
            }
        ],
        "classes": [
            {
                "name": "MultiModalFaithfulnessEvaluator",
                "docstring": "Multi-Modal Faithfulness evaluator.\n\nEvaluates whether a response is faithful to the contexts\n(i.e. whether the response is supported by the contexts or hallucinated.)\n\nThis evaluator only considers the response string and the list of context strings.\n\nArgs:\n    multi_modal_llm(Optional[MultiModalLLM]):\n        The Multi-Modal LLM Judge to use for evaluations.\n    raise_error(bool): Whether to raise an error when the response is invalid.\n        Defaults to False.\n    eval_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    refine_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for refining the evaluation."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "Any",
            "List",
            "Optional",
            "Sequence",
            "Union",
            "BaseEvaluator",
            "EvaluationResult",
            "MultiModalLLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "ImageNode",
            "OpenAIMultiModal"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/multi_modal/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MultiModalFaithfulnessEvaluator",
            "MultiModalRelevancyEvaluator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/evaluation/multi_modal/relevancy.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "multi_modal_llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "eval_template",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "refine_template",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "evaluate",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "contexts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_paths",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "image_urls",
                        "default": null
                    }
                ],
                "docstring": "Evaluate whether the multi-modal contexts and response are relevant to the query."
            }
        ],
        "classes": [
            {
                "name": "MultiModalRelevancyEvaluator",
                "docstring": "Relevancy evaluator.\n\nEvaluates the relevancy of retrieved image and textual contexts and response to a query.\nThis evaluator considers the query string, retrieved contexts, and response string.\n\nArgs:\n    multi_modal_llm(Optional[MultiModalLLM]):\n        The Multi-Modal LLM Judge to use for evaluations.\n    raise_error(Optional[bool]):\n        Whether to raise an error if the response is invalid.\n        Defaults to False.\n    eval_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for evaluation.\n    refine_template(Optional[Union[str, BasePromptTemplate]]):\n        The template to use for refinement."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "Any",
            "List",
            "Sequence",
            "Union",
            "BaseEvaluator",
            "EvaluationResult",
            "MultiModalLLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "ImageNode",
            "OpenAIMultiModal"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/file/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/readers/file/base.py": {
        "functions": [
            {
                "name": "_try_loading_included_file_formats",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "_format_file_timestamp",
                "parameters": [
                    {
                        "name": "timestamp",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "include_time",
                        "default": null
                    }
                ],
                "docstring": "Format file timestamp to a %Y-%m-%d string.\n\nArgs:\n    timestamp (float): timestamp in float\n    include_time (bool): whether to include time in the formatted string\n\nReturns:\n    str: formatted timestamp\n    None: if the timestamp passed was None"
            },
            {
                "name": "default_file_metadata_func",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Get some handy metadata from filesystem.\n\nArgs:\n    file_path: str: file path in str"
            },
            {
                "name": "get_default_fs",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "is_default_fs",
                "parameters": [
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "read_file_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input_file",
                        "default": null
                    }
                ],
                "docstring": "Read the bytes content of a file.\n\nArgs:\n    input_file (Path): Path to the file.\n\nReturns:\n    bytes: File content."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input_dir",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input_files",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "exclude",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "exclude_hidden",
                        "default": "Constant(value='ignore')"
                    },
                    {
                        "name": "errors",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "recursive",
                        "default": "Constant(value='utf-8')"
                    },
                    {
                        "name": "encoding",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "filename_as_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "required_exts",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file_extractor",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_files_limit",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file_metadata",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "raise_on_error",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Initialize with parameters."
            },
            {
                "name": "is_hidden",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_add_files",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input_dir",
                        "default": null
                    }
                ],
                "docstring": "Add files."
            },
            {
                "name": "_exclude_metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "documents",
                        "default": null
                    }
                ],
                "docstring": "Exclude metadata from documents.\n\nArgs:\n    documents (List[Document]): List of documents."
            },
            {
                "name": "list_resources",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "List files in the given filesystem."
            },
            {
                "name": "get_resource_info",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "resource_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_resource",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "resource_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "read_file_content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input_file",
                        "default": null
                    }
                ],
                "docstring": "Read file content."
            },
            {
                "name": "load_file",
                "parameters": [
                    {
                        "name": "input_file",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "file_metadata",
                        "default": "Constant(value='utf-8')"
                    },
                    {
                        "name": "file_extractor",
                        "default": "Constant(value='ignore')"
                    },
                    {
                        "name": "filename_as_id",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "encoding",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "errors",
                        "default": null
                    },
                    {
                        "name": "raise_on_error",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Static method for loading file.\n\nNOTE: necessarily as a static method for parallel processing.\n\nArgs:\n    input_file (Path): _description_\n    file_metadata (Callable[[str], Dict]): _description_\n    file_extractor (Dict[str, BaseReader]): _description_\n    filename_as_id (bool, optional): _description_. Defaults to False.\n    encoding (str, optional): _description_. Defaults to \"utf-8\".\n    errors (str, optional): _description_. Defaults to \"ignore\".\n    fs (Optional[fsspec.AbstractFileSystem], optional): _description_. Defaults to None.\n\ninput_file (Path): File path to read\nfile_metadata ([Callable[str, Dict]]): A function that takes\n    in a filename and returns a Dict of metadata for the Document.\nfile_extractor (Dict[str, BaseReader]): A mapping of file\n    extension to a BaseReader class that specifies how to convert that file\n    to text.\nfilename_as_id (bool): Whether to use the filename as the document id.\nencoding (str): Encoding of the files.\n    Default is utf-8.\nerrors (str): how encoding and decoding errors are to be handled,\n      see https://docs.python.org/3/library/functions.html#open\nraise_on_error (bool): Whether to raise an error if a file cannot be read.\nfs (Optional[fsspec.AbstractFileSystem]): File system to use. Defaults\n    to using the local file system. Can be changed to use any remote file system\n\nReturns:\n    List[Document]: loaded documents"
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "num_workers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load data from the input directory.\n\nArgs:\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False.\n    num_workers  (Optional[int]): Number of workers to parallelize data-loading over.\n    fs (Optional[fsspec.AbstractFileSystem]): File system to use. If fs was specified\n        in the constructor, it will override the fs parameter here.\n\nReturns:\n    List[Document]: A list of documents."
            },
            {
                "name": "iter_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Load data iteratively from the input directory.\n\nArgs:\n    show_progress (bool): Whether to show tqdm progress bars. Defaults to False.\n\nReturns:\n    Generator[List[Document]]: A list of documents."
            }
        ],
        "classes": [
            {
                "name": "FileSystemReaderMixin",
                "docstring": null
            },
            {
                "name": "_DefaultFileMetadataFunc",
                "docstring": "Default file metadata function wrapper which stores the fs.\nAllows for pickling of the function."
            },
            {
                "name": "SimpleDirectoryReader",
                "docstring": "Simple directory reader.\n\nLoad files from file directory.\nAutomatically select the best file reader given file extensions.\n\nArgs:\n    input_dir (Union[Path, str]): Path to the directory.\n    input_files (List): List of file paths to read\n        (Optional; overrides input_dir, exclude)\n    exclude (List): glob of python file paths to exclude (Optional)\n    exclude_hidden (bool): Whether to exclude hidden files (dotfiles).\n    encoding (str): Encoding of the files.\n        Default is utf-8.\n    errors (str): how encoding and decoding errors are to be handled,\n          see https://docs.python.org/3/library/functions.html#open\n    recursive (bool): Whether to recursively search in subdirectories.\n        False by default.\n    filename_as_id (bool): Whether to use the filename as the document id.\n        False by default.\n    required_exts (Optional[List[str]]): List of required extensions.\n        Default is None.\n    file_extractor (Optional[Dict[str, BaseReader]]): A mapping of file\n        extension to a BaseReader class that specifies how to convert that file\n        to text. If not specified, use default from DEFAULT_FILE_READER_CLS.\n    num_files_limit (Optional[int]): Maximum number of files to read.\n        Default is None.\n    file_metadata (Optional[Callable[str, Dict]]): A function that takes\n        in a filename and returns a Dict of metadata for the Document.\n        Default is None.\n    raise_on_error (bool): Whether to raise an error if a file cannot be read.\n    fs (Optional[fsspec.AbstractFileSystem]): File system to use. Defaults\n    to using the local file system. Can be changed to use any remote file system\n    exposed via the fsspec interface."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "asyncio",
            "logging",
            "mimetypes",
            "multiprocessing",
            "os",
            "warnings",
            "ABC",
            "abstractmethod",
            "datetime",
            "reduce",
            "repeat",
            "Path",
            "PurePosixPath",
            "Any",
            "Callable",
            "Generator",
            "Type",
            "cast",
            "fsspec",
            "LocalFileSystem",
            "tqdm",
            "get_asyncio_module",
            "run_jobs",
            "BaseReader",
            "ResourcesReaderMixin",
            "Document",
            "DocxReader",
            "EpubReader",
            "HWPReader",
            "ImageReader",
            "IPYNBReader",
            "MboxReader",
            "PandasCSVReader",
            "PandasExcelReader",
            "PDFReader",
            "PptxReader",
            "VideoAudioReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/jsonalyze/jsonalyze_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "JSONalyzeQueryEngine",
                "docstring": "JSONalyze query engine.\n\nDEPRECATED: Use `JSONalyzeQueryEngine` from `llama-index-experimental` instead."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/jsonalyze/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "JSONalyzeQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/flare/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/flare/output_parser.py": {
        "functions": [
            {
                "name": "default_parse_is_done_fn",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Default parse is done function."
            },
            {
                "name": "default_format_done_answer",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": "Default format done answer."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "is_done_fn",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "fmt_answer_fn",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Parse output."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Format a query with structured output formatting instructions."
            },
            {
                "name": "parse",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Parse output."
            },
            {
                "name": "format",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Format a query with structured output formatting instructions."
            }
        ],
        "classes": [
            {
                "name": "IsDoneOutputParser",
                "docstring": "Is done output parser."
            },
            {
                "name": "QueryTaskOutputParser",
                "docstring": "QueryTask output parser.\n\nBy default, parses output that contains \"[Search(query)]\" tags."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Optional",
            "QueryTask",
            "BaseOutputParser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/flare/answer_inserter.py": {
        "functions": [
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_tasks",
                        "default": null
                    },
                    {
                        "name": "answers",
                        "default": null
                    },
                    {
                        "name": "prev_response",
                        "default": null
                    }
                ],
                "docstring": "Insert answers into response."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "answer_insert_prompt",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_tasks",
                        "default": null
                    },
                    {
                        "name": "answers",
                        "default": null
                    },
                    {
                        "name": "prev_response",
                        "default": null
                    }
                ],
                "docstring": "Insert answers into response."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "insert",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "query_tasks",
                        "default": null
                    },
                    {
                        "name": "answers",
                        "default": null
                    },
                    {
                        "name": "prev_response",
                        "default": null
                    }
                ],
                "docstring": "Insert answers into response."
            }
        ],
        "classes": [
            {
                "name": "BaseLookaheadAnswerInserter",
                "docstring": "Lookahead answer inserter.\n\nThese are responsible for insert answers into a lookahead answer template.\n\nE.g.\nlookahead answer: Red is for [Search(What is the meaning of Ghana's\n    flag being red?)], green for forests, and gold for mineral wealth.\nquery: What is the meaning of Ghana's flag being red?\nquery answer: \"the blood of those who died in the country's struggle\n    for independence\"\nfinal answer: Red is for the blood of those who died in the country's\n    struggle for independence, green for forests, and gold for mineral wealth."
            },
            {
                "name": "LLMLookaheadAnswerInserter",
                "docstring": "LLM Lookahead answer inserter.\n\nTakes in a lookahead response and a list of query tasks, and the\n    lookahead answers, and inserts the answers into the lookahead response."
            },
            {
                "name": "DirectLookaheadAnswerInserter",
                "docstring": "Direct lookahead answer inserter.\n\nSimple inserter module that directly inserts answers into\n    the [Search(query)] tags in the lookahead response."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "QueryTask",
            "Settings"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/flare/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query_engine",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instruct_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "lookahead_answer_inserter",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "done_output_parser",
                        "default": "Constant(value=10)"
                    },
                    {
                        "name": "query_task_output_parser",
                        "default": "Constant(value=1)"
                    },
                    {
                        "name": "max_iterations",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_lookahead_query_tasks",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt sub-modules."
            },
            {
                "name": "_get_relevant_lookahead_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "updated_lookahead_resp",
                        "default": null
                    }
                ],
                "docstring": "Get relevant lookahead response."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": "Query and get response."
            },
            {
                "name": "retrieve",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "FLAREInstructQueryEngine",
                "docstring": "FLARE Instruct query engine.\n\nThis is the version of FLARE that uses retrieval-encouraging instructions.\n\nNOTE: this is a beta feature. Interfaces might change, and it might not\nalways give correct answers.\n\nArgs:\n    query_engine (BaseQueryEngine): query engine to use\n    llm (Optional[LLM]): LLM model. Defaults to None.\n    instruct_prompt (Optional[PromptTemplate]): instruct prompt. Defaults to None.\n    lookahead_answer_inserter (Optional[BaseLookaheadAnswerInserter]):\n        lookahead answer inserter. Defaults to None.\n    done_output_parser (Optional[IsDoneOutputParser]): done output parser.\n        Defaults to None.\n    query_task_output_parser (Optional[QueryTaskOutputParser]):\n        query task output parser. Defaults to None.\n    max_iterations (int): max iterations. Defaults to 10.\n    max_lookahead_query_tasks (int): max lookahead query tasks. Defaults to 1.\n    callback_manager (Optional[CallbackManager]): callback manager.\n        Defaults to None.\n    verbose (bool): give verbose outputs. Defaults to False."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "Optional",
            "List",
            "BaseQueryEngine",
            "RESPONSE_TYPE",
            "Response",
            "CallbackManager",
            "LLM",
            "BasePromptTemplate",
            "PromptTemplate",
            "PromptDictType",
            "PromptMixinType",
            "BaseLookaheadAnswerInserter",
            "LLMLookaheadAnswerInserter",
            "IsDoneOutputParser",
            "QueryTaskOutputParser",
            "RetrieverQueryEngine",
            "QueryBundle",
            "NodeWithScore",
            "Settings",
            "print_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/flare/schema.py": {
        "functions": [],
        "classes": [
            {
                "name": "QueryTask",
                "docstring": "Query task."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "dataclass"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/pandas/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PandasInstructionParser",
            "PandasQueryEngine"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/pandas/output_parser.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PandasInstructionParser",
                "docstring": "Pandas instruction parser.\n\nDEPRECATED: This class has been moved to `llama-index-experimental`."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/query_engine/pandas/pandas_query_engine.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PandasQueryEngine",
                "docstring": "Pandas query engine.\n\nDEPRECATED: Use `PandasQueryEngine` from `llama-index-experimental` instead."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/legacy/embedding.py": {
        "functions": [
            {
                "name": "generate_qa_embedding_pairs",
                "parameters": [
                    {
                        "name": "nodes",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Name(id='DEFAULT_QA_GENERATE_PROMPT_TMPL', ctx=Load())"
                    },
                    {
                        "name": "qa_generate_prompt_tmpl",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "num_questions_per_chunk",
                        "default": null
                    }
                ],
                "docstring": "Generate examples given a set of nodes."
            },
            {
                "name": "query_docid_pairs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get query, relevant doc ids."
            },
            {
                "name": "save_json",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Save json."
            },
            {
                "name": "from_json",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": "Load json."
            }
        ],
        "classes": [
            {
                "name": "EmbeddingQAFinetuneDataset",
                "docstring": "Embedding QA Finetuning Dataset.\n\nArgs:\n    queries (Dict[str, str]): Dict id -> query.\n    corpus (Dict[str, str]): Dict id -> string.\n    relevant_docs (Dict[str, List[str]]): Dict query id -> list of doc ids."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "re",
            "uuid",
            "warnings",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "BaseModel",
            "LLM",
            "MetadataMode",
            "TextNode",
            "Settings",
            "tqdm"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/llama_dataset/legacy/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/embeddings/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/embeddings/base_sparse.py": {
        "functions": [
            {
                "name": "sparse_similarity",
                "parameters": [
                    {
                        "name": "embedding1",
                        "default": null
                    },
                    {
                        "name": "embedding2",
                        "default": null
                    }
                ],
                "docstring": "Get sparse embedding similarity."
            },
            {
                "name": "mean_agg",
                "parameters": [
                    {
                        "name": "embeddings",
                        "default": null
                    }
                ],
                "docstring": "Get mean aggregation of embeddings."
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "custom_model_dump",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "handler",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Embed the input query synchronously."
            },
            {
                "name": "get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Embed the input query."
            },
            {
                "name": "get_agg_embedding_from_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "queries",
                        "default": null
                    },
                    {
                        "name": "agg_fn",
                        "default": null
                    }
                ],
                "docstring": "Get aggregated embedding from multiple queries."
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Embed the input text synchronously."
            },
            {
                "name": "_get_text_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": "Embed the input sequence of text synchronously.\n\nSubclasses can implement this method if batch queries are supported."
            },
            {
                "name": "get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Embed the input text."
            },
            {
                "name": "get_text_embedding_batch",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "texts",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Get a list of text embeddings, with batching."
            },
            {
                "name": "similarity",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "embedding1",
                        "default": null
                    },
                    {
                        "name": "embedding2",
                        "default": null
                    }
                ],
                "docstring": "Get sparse embedding similarity."
            }
        ],
        "classes": [
            {
                "name": "BaseSparseEmbedding",
                "docstring": "Base class for embeddings."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "math",
            "abstractmethod",
            "defaultdict",
            "Any",
            "Callable",
            "Coroutine",
            "Dict",
            "List",
            "Optional",
            "BaseModel",
            "Field",
            "ConfigDict",
            "model_serializer",
            "DEFAULT_EMBED_BATCH_SIZE",
            "DispatcherSpanMixin",
            "SparseEmbeddingEndEvent",
            "SparseEmbeddingStartEvent",
            "llama_index.core.instrumentation",
            "get_tqdm_iterable",
            "run_jobs",
            "tqdm_asyncio"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/embeddings/base.py": {
        "functions": [
            {
                "name": "mean_agg",
                "parameters": [
                    {
                        "name": "embeddings",
                        "default": null
                    }
                ],
                "docstring": "Mean aggregation for embeddings."
            },
            {
                "name": "similarity",
                "parameters": [
                    {
                        "name": "embedding1",
                        "default": "Attribute(value=Name(id='SimilarityMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "embedding2",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Get embedding similarity."
            },
            {
                "name": "check_callback_manager",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "v",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Embed the input query synchronously.\n\nSubclasses should implement this method. Reference get_query_embedding's\ndocstring for more information."
            },
            {
                "name": "get_query_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Embed the input query.\n\nWhen embedding a query, depending on the model, a special instruction\ncan be prepended to the raw query string. For example, \"Represent the\nquestion for retrieving supporting documents: \". If you're curious,\nother examples of predefined instructions can be found in\nembeddings/huggingface_utils.py."
            },
            {
                "name": "get_agg_embedding_from_queries",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "queries",
                        "default": null
                    },
                    {
                        "name": "agg_fn",
                        "default": null
                    }
                ],
                "docstring": "Get aggregated embedding from multiple queries."
            },
            {
                "name": "_get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Embed the input text synchronously.\n\nSubclasses should implement this method. Reference get_text_embedding's\ndocstring for more information."
            },
            {
                "name": "_get_text_embeddings",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "texts",
                        "default": null
                    }
                ],
                "docstring": "Embed the input sequence of text synchronously.\n\nSubclasses can implement this method if batch queries are supported."
            },
            {
                "name": "get_text_embedding",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": "Embed the input text.\n\nWhen embedding text, depending on the model, a special instruction\ncan be prepended to the raw text string. For example, \"Represent the\ndocument for retrieval: \". If you're curious, other examples of\npredefined instructions can be found in embeddings/huggingface_utils.py."
            },
            {
                "name": "get_text_embedding_batch",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "texts",
                        "default": null
                    },
                    {
                        "name": "show_progress",
                        "default": null
                    }
                ],
                "docstring": "Get a list of text embeddings, with batching."
            },
            {
                "name": "similarity",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='SimilarityMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "embedding1",
                        "default": null
                    },
                    {
                        "name": "embedding2",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Get embedding similarity."
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "SimilarityMode",
                "docstring": "Modes for similarity/distance."
            },
            {
                "name": "BaseEmbedding",
                "docstring": "Base class for embeddings."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "abstractmethod",
            "Enum",
            "Any",
            "Callable",
            "Coroutine",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "numpy",
            "Field",
            "ConfigDict",
            "field_validator",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "DEFAULT_EMBED_BATCH_SIZE",
            "DispatcherSpanMixin",
            "BaseNode",
            "MetadataMode",
            "TransformComponent",
            "get_tqdm_iterable",
            "run_jobs",
            "EmbeddingEndEvent",
            "EmbeddingStartEvent",
            "llama_index.core.instrumentation",
            "tqdm_asyncio"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/response/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/response/schema.py": {
        "functions": [
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to string representation."
            },
            {
                "name": "get_formatted_sources",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "length",
                        "default": null
                    }
                ],
                "docstring": "Get formatted sources text."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to string representation."
            },
            {
                "name": "__getattr__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "name",
                        "default": null
                    }
                ],
                "docstring": "Get attribute, but prioritize the pydantic  response object."
            },
            {
                "name": "__post_init_post_parse__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "This method is required.\n\nAccording to the Pydantic docs, if a stdlib dataclass (which this class\nis one) gets mixed with a BaseModel (in the sense that this gets used as a\nField in another BaseModel), then this stdlib dataclass will automatically\nget converted to a pydantic.v1.dataclass.\n\nHowever, it appears that in that automatic conversion, this method\nis left as NoneType, which raises an error. To safeguard against that,\nwe are expilcitly defining this method as something that can be called.\n\nSources:\n    - https://docs.pydantic.dev/1.10/usage/dataclasses/#use-of-stdlib-dataclasses-with-basemodel\n    - https://docs.pydantic.dev/1.10/usage/dataclasses/#initialize-hooks"
            },
            {
                "name": "get_formatted_sources",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "length",
                        "default": null
                    }
                ],
                "docstring": "Get formatted sources text."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a standard response object."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to string representation."
            },
            {
                "name": "get_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a standard response object."
            },
            {
                "name": "print_response_stream",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Print the response stream."
            },
            {
                "name": "get_formatted_sources",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "length",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "trim_text",
                        "default": null
                    }
                ],
                "docstring": "Get formatted sources text."
            },
            {
                "name": "__post_init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Convert to string representation."
            },
            {
                "name": "get_formatted_sources",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=100)"
                    },
                    {
                        "name": "length",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "trim_text",
                        "default": null
                    }
                ],
                "docstring": "Get formatted sources text."
            }
        ],
        "classes": [
            {
                "name": "Response",
                "docstring": "Response object.\n\nReturned if streaming=False.\n\nAttributes:\n    response: The response text."
            },
            {
                "name": "PydanticResponse",
                "docstring": "PydanticResponse object.\n\nReturned if streaming=False.\n\nAttributes:\n    response: The response text."
            },
            {
                "name": "StreamingResponse",
                "docstring": "StreamingResponse object.\n\nReturned if streaming=True.\n\nAttributes:\n    response_gen: The response generator."
            },
            {
                "name": "AsyncStreamingResponse",
                "docstring": "AsyncStreamingResponse object.\n\nReturned if streaming=True while using async.\n\nAttributes:\n    _async_response_gen: The response async generator."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "dataclass",
            "field",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union",
            "asyncio_run",
            "BaseModel",
            "NodeWithScore",
            "TokenGen",
            "TokenAsyncGen",
            "truncate_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/agent/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/agent/types.py": {
        "functions": [
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_bundle",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": null
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_next_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "step_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input",
                        "default": null
                    },
                    {
                        "name": "step_state",
                        "default": null
                    }
                ],
                "docstring": "Convenience function to get next step.\n\nPreserve task_id, memory, step_state."
            },
            {
                "name": "link_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "next_step",
                        "default": null
                    }
                ],
                "docstring": "Link to next step.\n\nAdd link from this step to next, and from next step to current."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "String representation."
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_get_prompt_modules",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompt modules."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "as_agent",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Return as an agent runner."
            }
        ],
        "classes": [
            {
                "name": "BaseAgent",
                "docstring": "Base Agent."
            },
            {
                "name": "TaskStep",
                "docstring": "Agent task step.\n\nRepresents a single input step within the execution run (\"Task\") of an agent\ngiven a user input.\n\nThe output is returned as a `TaskStepOutput`."
            },
            {
                "name": "TaskStepOutput",
                "docstring": "Agent task step output."
            },
            {
                "name": "Task",
                "docstring": "Agent Task.\n\nRepresents a \"run\" of an agent given a user input."
            },
            {
                "name": "BaseAgentWorker",
                "docstring": "Base agent worker."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "uuid",
            "abstractmethod",
            "Any",
            "Dict",
            "List",
            "Optional",
            "TYPE_CHECKING",
            "BaseQueryEngine",
            "ChatMessage",
            "RESPONSE_TYPE",
            "Response",
            "BaseModel",
            "Field",
            "SerializeAsAny",
            "ConfigDict",
            "CallbackManager",
            "trace_method",
            "BaseChatEngine",
            "StreamingAgentChatResponse",
            "DispatcherSpanMixin",
            "BaseMemory",
            "PromptDictType",
            "PromptMixin",
            "PromptMixinType",
            "QueryBundle",
            "AgentRunner",
            "AgentRunner"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/query_pipeline/query.py": {
        "functions": [
            {
                "name": "validate_and_convert_stringable",
                "parameters": [
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_keys",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "required_keys",
                        "default": null
                    },
                    {
                        "name": "optional_keys",
                        "default": null
                    }
                ],
                "docstring": "Create InputKeys from tuple."
            },
            {
                "name": "validate_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input_keys",
                        "default": null
                    }
                ],
                "docstring": "Validate input keys."
            },
            {
                "name": "__len__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Length of input keys."
            },
            {
                "name": "all",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get all input keys."
            },
            {
                "name": "from_keys",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "required_keys",
                        "default": null
                    }
                ],
                "docstring": "Create OutputKeys from tuple."
            },
            {
                "name": "validate_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input_keys",
                        "default": null
                    }
                ],
                "docstring": "Validate input keys."
            },
            {
                "name": "_as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get query component."
            },
            {
                "name": "as_query_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "partial",
                        "default": null
                    }
                ],
                "docstring": "Get query component."
            },
            {
                "name": "partial",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Update with partial arguments."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "free_req_input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get free input keys."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs during run_component."
            },
            {
                "name": "validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs."
            },
            {
                "name": "validate_component_outputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "output",
                        "default": null
                    }
                ],
                "docstring": "Validate component outputs."
            },
            {
                "name": "run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "_run_component",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Run component."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "sub_query_components",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get sub query components.\n\nCertain query components may have sub query components, e.g. a\nquery pipeline will have sub query components, and so will\nan IfElseComponent."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            },
            {
                "name": "_validate_component_inputs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Validate component inputs during run_component."
            },
            {
                "name": "_input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys dict."
            },
            {
                "name": "_optional_input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Optional input keys dict."
            },
            {
                "name": "_output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys dict."
            },
            {
                "name": "input_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Input keys."
            },
            {
                "name": "output_keys",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Output keys."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "src",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "dest",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "src_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "dest_key",
                        "default": null
                    },
                    {
                        "name": "condition_fn",
                        "default": null
                    },
                    {
                        "name": "input_fn",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "inputs",
                        "default": null
                    },
                    {
                        "name": "outputs",
                        "default": null
                    }
                ],
                "docstring": "Initialize."
            },
            {
                "name": "__repr__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "InputKeys",
                "docstring": "Input keys."
            },
            {
                "name": "OutputKeys",
                "docstring": "Output keys."
            },
            {
                "name": "ChainableMixin",
                "docstring": "Chainable mixin.\n\nA module that can produce a `QueryComponent` from a set of inputs through\n`as_query_component`.\n\nIf plugged in directly into a `QueryPipeline`, the `ChainableMixin` will be\nconverted into a `QueryComponent` with default parameters."
            },
            {
                "name": "QueryComponent",
                "docstring": "Query component.\n\nRepresents a component that can be run in a `QueryPipeline`."
            },
            {
                "name": "CustomQueryComponent",
                "docstring": "Custom query component."
            },
            {
                "name": "Link",
                "docstring": "Link between two components."
            },
            {
                "name": "ComponentIntermediates",
                "docstring": "Component intermediate inputs and outputs."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ABC",
            "abstractmethod",
            "Any",
            "Callable",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Set",
            "Union",
            "cast",
            "get_args",
            "ChatResponse",
            "ChatMessage",
            "CompletionResponse",
            "Response",
            "BaseModel",
            "Field",
            "ConfigDict",
            "CallbackManager",
            "NodeWithScore",
            "QueryBundle",
            "TextNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/query_pipeline/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/llms/generic_utils.py": {
        "functions": [
            {
                "name": "messages_to_history_str",
                "parameters": [
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Convert messages to a history string."
            },
            {
                "name": "messages_to_prompt",
                "parameters": [
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Convert messages to a prompt string."
            },
            {
                "name": "prompt_to_messages",
                "parameters": [
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Convert a string prompt to a sequence of messages."
            },
            {
                "name": "completion_response_to_chat_response",
                "parameters": [
                    {
                        "name": "completion_response",
                        "default": null
                    }
                ],
                "docstring": "Convert a completion response to a chat response."
            },
            {
                "name": "stream_completion_response_to_chat_response",
                "parameters": [
                    {
                        "name": "completion_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert a stream completion response to a stream chat response."
            },
            {
                "name": "astream_completion_response_to_chat_response",
                "parameters": [
                    {
                        "name": "completion_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert an async stream completion to an async stream chat response."
            },
            {
                "name": "chat_response_to_completion_response",
                "parameters": [
                    {
                        "name": "chat_response",
                        "default": null
                    }
                ],
                "docstring": "Convert a chat response to a completion response."
            },
            {
                "name": "stream_chat_response_to_completion_response",
                "parameters": [
                    {
                        "name": "chat_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert a stream chat response to a completion response."
            },
            {
                "name": "completion_to_chat_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a completion function to a chat function."
            },
            {
                "name": "stream_completion_to_chat_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a completion function to a chat function."
            },
            {
                "name": "chat_to_completion_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a chat function to a completion function."
            },
            {
                "name": "stream_chat_to_completion_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a chat function to a completion function."
            },
            {
                "name": "acompletion_to_chat_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a completion function to a chat function."
            },
            {
                "name": "achat_to_completion_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a chat function to a completion function."
            },
            {
                "name": "astream_completion_to_chat_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a completion function to a chat function."
            },
            {
                "name": "astream_chat_to_completion_decorator",
                "parameters": [
                    {
                        "name": "func",
                        "default": null
                    }
                ],
                "docstring": "Convert a chat function to a completion function."
            },
            {
                "name": "async_stream_completion_response_to_chat_response",
                "parameters": [
                    {
                        "name": "completion_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert a stream completion response to a stream chat response."
            },
            {
                "name": "astream_chat_response_to_completion_response",
                "parameters": [
                    {
                        "name": "chat_response_gen",
                        "default": null
                    }
                ],
                "docstring": "Convert a stream chat response to a completion response."
            },
            {
                "name": "get_from_param_or_env",
                "parameters": [
                    {
                        "name": "key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "param",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "env_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "default",
                        "default": null
                    }
                ],
                "docstring": "Get a value from a param or an environment variable."
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "Any",
            "Awaitable",
            "Callable",
            "List",
            "Optional",
            "Sequence",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "MessageRole"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/llms/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/llms/types.py": {
        "functions": [
            {
                "name": "urlstr_to_anyurl",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "url",
                        "default": null
                    }
                ],
                "docstring": "Store the url as Anyurl."
            },
            {
                "name": "image_to_base64",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Store the image as base64 and guess the mimetype when possible.\n\nIn case the model was built passing image data but without a mimetype,\nwe try to guess it using the filetype library. To avoid resource-intense\noperations, we won't load the path or the URL to guess the mimetype."
            },
            {
                "name": "resolve_image",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "as_base64",
                        "default": null
                    }
                ],
                "docstring": "Resolve an image such that PIL can read it.\n\nArgs:\n    as_base64 (bool): whether the resolved image should be returned as base64-encoded bytes"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "content",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Keeps backward compatibility with the old `content` field.\n\nIf content was passed and contained text, store a single TextBlock.\nIf content was passed and it was a list, assume it's a list of content blocks and store it."
            },
            {
                "name": "content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Keeps backward compatibility with the old `content` field.\n\nReturns:\n    The cumulative content of the blocks if they're all of type TextBlock, None otherwise."
            },
            {
                "name": "content",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Keeps backward compatibility with the old `content` field.\n\nRaises:\n    ValueError: if blocks contains more than a block, or a block that's not TextBlock."
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_str",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Attribute(value=Name(id='MessageRole', ctx=Load()), attr='USER', ctx=Load())"
                    },
                    {
                        "name": "content",
                        "default": null
                    },
                    {
                        "name": "role",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_recursive_serialization",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "serialize_additional_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "value",
                        "default": null
                    },
                    {
                        "name": "_info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__str__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "MessageRole",
                "docstring": "Message role."
            },
            {
                "name": "TextBlock",
                "docstring": null
            },
            {
                "name": "ImageBlock",
                "docstring": null
            },
            {
                "name": "ChatMessage",
                "docstring": "Chat message."
            },
            {
                "name": "LogProb",
                "docstring": "LogProb of a token."
            },
            {
                "name": "ChatResponse",
                "docstring": "Chat response."
            },
            {
                "name": "CompletionResponse",
                "docstring": "Completion response.\n\nFields:\n    text: Text content of the response if not streaming, or if streaming,\n        the current extent of streamed text.\n    additional_kwargs: Additional information on the response(i.e. token\n        counts, function calling information).\n    raw: Optional raw JSON that was parsed to populate text, if relevant.\n    delta: New text that just streamed in (only relevant when streaming)."
            },
            {
                "name": "LLMMetadata",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "annotations",
            "base64",
            "Enum",
            "BytesIO",
            "Annotated",
            "Any",
            "AsyncGenerator",
            "Generator",
            "List",
            "Literal",
            "Optional",
            "Union",
            "filetype",
            "requests",
            "Self",
            "AnyUrl",
            "BaseModel",
            "ConfigDict",
            "Field",
            "FilePath",
            "field_serializer",
            "field_validator",
            "model_validator",
            "DEFAULT_CONTEXT_WINDOW",
            "DEFAULT_NUM_OUTPUTS"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/core/base/llms/base.py": {
        "functions": [
            {
                "name": "check_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "LLM metadata.\n\nReturns:\n    LLMMetadata: LLM metadata containing various information about the LLM."
            },
            {
                "name": "convert_chat_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Convert chat messages to an LLM specific message format."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Chat endpoint for LLM.\n\nArgs:\n    messages (Sequence[ChatMessage]):\n        Sequence of chat messages.\n    kwargs (Any):\n        Additional keyword arguments to pass to the LLM.\n\nReturns:\n    ChatResponse: Chat response from the LLM.\n\nExamples:\n    ```python\n    from llama_index.core.llms import ChatMessage\n\n    response = llm.chat([ChatMessage(role=\"user\", content=\"Hello\")])\n    print(response.content)\n    ```"
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": "Completion endpoint for LLM.\n\nIf the LLM is a chat model, the prompt is transformed into a single `user` message.\n\nArgs:\n    prompt (str):\n        Prompt to send to the LLM.\n    formatted (bool, optional):\n        Whether the prompt is already formatted for the LLM, by default False.\n    kwargs (Any):\n        Additional keyword arguments to pass to the LLM.\n\nReturns:\n    CompletionResponse: Completion response from the LLM.\n\nExamples:\n    ```python\n    response = llm.complete(\"your prompt\")\n    print(response.text)\n    ```"
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": "Streaming chat endpoint for LLM.\n\nArgs:\n    messages (Sequence[ChatMessage]):\n        Sequence of chat messages.\n    kwargs (Any):\n        Additional keyword arguments to pass to the LLM.\n\nYields:\n    ChatResponse:\n        A generator of ChatResponse objects, each containing a new token of the response.\n\nExamples:\n    ```python\n    from llama_index.core.llms import ChatMessage\n\n    gen = llm.stream_chat([ChatMessage(role=\"user\", content=\"Hello\")])\n    for response in gen:\n        print(response.delta, end=\"\", flush=True)\n    ```"
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": "Streaming completion endpoint for LLM.\n\nIf the LLM is a chat model, the prompt is transformed into a single `user` message.\n\nArgs:\n    prompt (str):\n        Prompt to send to the LLM.\n    formatted (bool, optional):\n        Whether the prompt is already formatted for the LLM, by default False.\n    kwargs (Any):\n        Additional keyword arguments to pass to the LLM.\n\nYields:\n    CompletionResponse:\n        A generator of CompletionResponse objects, each containing a new token of the response.\n\nExamples:\n    ```python\n    gen = llm.stream_complete(\"your prompt\")\n    for response in gen:\n        print(response.text, end=\"\", flush=True)\n    ```"
            }
        ],
        "classes": [
            {
                "name": "BaseLLM",
                "docstring": "BaseLLM interface."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "abstractmethod",
            "Any",
            "List",
            "Sequence",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "LLMMetadata",
            "TextBlock",
            "ChainableMixin",
            "Field",
            "model_validator",
            "ConfigDict",
            "CallbackManager",
            "DispatcherSpanMixin",
            "BaseComponent"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/graph_stores/neo4j/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Neo4jGraphStore",
            "Schema",
            "CypherQueryCorrector",
            "Neo4jPGStore",
            "Neo4jPropertyGraphStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/graph_stores/neo4j/cypher_corrector.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "schemas",
                        "default": null
                    }
                ],
                "docstring": "Init function.\n\nArgs:\n    schemas: list of schemas"
            },
            {
                "name": "clean_node",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "node",
                        "default": null
                    }
                ],
                "docstring": "Strip node of parenthesis.\n\nArgs:\n    node: node in string format"
            },
            {
                "name": "detect_node_variables",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Detect node variables.\n\nArgs:\n    query: cypher query"
            },
            {
                "name": "extract_paths",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Extract paths.\n\nArgs:\n    query: cypher query"
            },
            {
                "name": "judge_direction",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "relation",
                        "default": null
                    }
                ],
                "docstring": "Judge direction.\n\nArgs:\n    relation: relation in string format"
            },
            {
                "name": "extract_node_variable",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "part",
                        "default": null
                    }
                ],
                "docstring": "Extract node variable.\n\nArgs:\n    part: node in string format"
            },
            {
                "name": "detect_labels",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_node",
                        "default": null
                    },
                    {
                        "name": "node_variable_dict",
                        "default": null
                    }
                ],
                "docstring": "Detect node labels.\n\nArgs:\n    str_node: node in string format\n    node_variable_dict: dictionary of node variables"
            },
            {
                "name": "verify_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "from_node_labels",
                        "default": null
                    },
                    {
                        "name": "relation_types",
                        "default": null
                    },
                    {
                        "name": "to_node_labels",
                        "default": null
                    }
                ],
                "docstring": "Verify schema.\n\nArgs:\n    from_node_labels: labels of the from node\n    relation_type: type of the relation\n    to_node_labels: labels of the to node"
            },
            {
                "name": "detect_relation_types",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "str_relation",
                        "default": null
                    }
                ],
                "docstring": "Detect relation types.\n\nArgs:\n    str_relation: relation in string format"
            },
            {
                "name": "correct_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Correct query.\n\nArgs:\n    query: cypher query"
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Correct the query to make it valid.\n\nArgs:\n    query: cypher query"
            }
        ],
        "classes": [
            {
                "name": "Schema",
                "docstring": null
            },
            {
                "name": "CypherQueryCorrector",
                "docstring": "Used to correct relationship direction in generated Cypher statements.\n\nThis code is copied from the winner's submission to the Cypher competition:\nhttps://github.com/sakusaku-rich/cypher-direction-competition"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "NamedTuple"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/graph_stores/neo4j/neo4j_property_graph.py": {
        "functions": [
            {
                "name": "remove_empty_values",
                "parameters": [
                    {
                        "name": "input_dict",
                        "default": null
                    }
                ],
                "docstring": "Remove entries with empty values from the dictionary.\n\nParameters:\ninput_dict (dict): The dictionary from which empty values need to be removed.\n\nReturns:\ndict: A new dictionary with all empty values removed."
            },
            {
                "name": "convert_operator",
                "parameters": [
                    {
                        "name": "operator",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='neo4j')"
                    },
                    {
                        "name": "username",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "password",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "url",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "database",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "refresh_schema",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sanitize_query_output",
                        "default": null
                    },
                    {
                        "name": "enhanced_schema",
                        "default": null
                    },
                    {
                        "name": "create_indexes",
                        "default": null
                    },
                    {
                        "name": "timeout",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "close",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "refresh_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Refresh the schema."
            },
            {
                "name": "upsert_nodes",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "nodes",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upsert_relations",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "relations",
                        "default": null
                    }
                ],
                "docstring": "Add relations."
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Get nodes."
            },
            {
                "name": "get_triplets",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "graph_nodes",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    },
                    {
                        "name": "ignore_rels",
                        "default": null
                    }
                ],
                "docstring": "Get depth-aware rel map."
            },
            {
                "name": "structured_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "param_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "vector_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": "Query the graph store with a vector store query."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "entity_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "relation_names",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "properties",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "ids",
                        "default": null
                    }
                ],
                "docstring": "Delete matching data."
            },
            {
                "name": "_enhanced_schema_cypher",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "label_or_type",
                        "default": null
                    },
                    {
                        "name": "properties",
                        "default": null
                    },
                    {
                        "name": "exhaustive",
                        "default": null
                    },
                    {
                        "name": "is_relationship",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_schema_str",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "exclude_types",
                        "default": "List(elts=[], ctx=Load())"
                    },
                    {
                        "name": "include_types",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "verify_version",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Check if the connected Neo4j database version supports vector indexing\nwithout specifying embedding dimension.\n\nQueries the Neo4j database to retrieve its version and compares it\nagainst a target version (5.23.0) that is known to support vector\nindexing. Raises a ValueError if the connected Neo4j version is\nnot supported."
            },
            {
                "name": "filter_func",
                "parameters": [
                    {
                        "name": "x",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Neo4jPropertyGraphStore",
                "docstring": "Neo4j Property Graph Store.\n\nThis class implements a Neo4j property graph store.\n\nIf you are using local Neo4j instead of aura, here's a helpful\ncommand for launching the docker container:\n\n```bash\ndocker run \\\n    -p 7474:7474 -p 7687:7687 \\\n    -v $PWD/data:/data -v $PWD/plugins:/plugins \\\n    --name neo4j-apoc \\\n    -e NEO4J_apoc_export_file_enabled=true \\\n    -e NEO4J_apoc_import_file_enabled=true \\\n    -e NEO4J_apoc_import_file_use__neo4j__config=true \\\n    -e NEO4JLABS_PLUGINS=\\\\[\\\"apoc\\\"\\\\] \\\n    neo4j:latest\n```\n\nArgs:\n    username (str): The username for the Neo4j database.\n    password (str): The password for the Neo4j database.\n    url (str): The URL for the Neo4j database.\n    database (Optional[str]): The name of the database to connect to. Defaults to \"neo4j\".\n    timeout (Optional[float]): The timeout for transactions in seconds.\n    Useful for terminating long-running queries.\n    By default, there is no timeout set.\n\nExamples:\n    `pip install llama-index-graph-stores-neo4j`\n\n    ```python\n    from llama_index.core.indices.property_graph import PropertyGraphIndex\n    from llama_index.graph_stores.neo4j import Neo4jPropertyGraphStore\n\n    # Create a Neo4jPropertyGraphStore instance\n    graph_store = Neo4jPropertyGraphStore(\n        username=\"neo4j\",\n        password=\"neo4j\",\n        url=\"bolt://localhost:7687\",\n        database=\"neo4j\"\n    )\n\n    # create the index\n    index = PropertyGraphIndex.from_documents(\n        documents,\n        property_graph_store=graph_store,\n    )\n\n    # Close the neo4j connection explicitly.\n    graph_store.close()\n    ```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "List",
            "Dict",
            "Optional",
            "Tuple",
            "DEFAULT_CYPHER_TEMPALTE",
            "PropertyGraphStore",
            "Triplet",
            "LabelledNode",
            "Relation",
            "EntityNode",
            "ChunkNode",
            "clean_string_values",
            "value_sanitize",
            "LIST_LIMIT",
            "PromptTemplate",
            "VectorStoreQuery",
            "neo4j"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/graph_stores/neo4j/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='neo4j')"
                    },
                    {
                        "name": "username",
                        "default": "Constant(value='Entity')"
                    },
                    {
                        "name": "password",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "url",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "database",
                        "default": null
                    },
                    {
                        "name": "node_label",
                        "default": null
                    },
                    {
                        "name": "refresh_schema",
                        "default": null
                    },
                    {
                        "name": "timeout",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    }
                ],
                "docstring": "Get triplets."
            },
            {
                "name": "get_rel_map",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "subjs",
                        "default": "Constant(value=2)"
                    },
                    {
                        "name": "depth",
                        "default": "Constant(value=30)"
                    },
                    {
                        "name": "limit",
                        "default": null
                    }
                ],
                "docstring": "Get flat rel map."
            },
            {
                "name": "upsert_triplet",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Add triplet."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    }
                ],
                "docstring": "Delete triplet."
            },
            {
                "name": "refresh_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Refreshes the Neo4j graph schema information."
            },
            {
                "name": "get_schema",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "refresh",
                        "default": null
                    }
                ],
                "docstring": "Get the schema of the Neo4jGraph store."
            },
            {
                "name": "query",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "query",
                        "default": null
                    },
                    {
                        "name": "param_map",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_rel",
                "parameters": [
                    {
                        "name": "subj",
                        "default": null
                    },
                    {
                        "name": "obj",
                        "default": null
                    },
                    {
                        "name": "rel",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "delete_entity",
                "parameters": [
                    {
                        "name": "entity",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "check_edges",
                "parameters": [
                    {
                        "name": "entity",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Neo4jGraphStore",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "List",
            "Optional",
            "GraphStore",
            "neo4j"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/multi_modal_llms/openai/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "OpenAIMultiModal"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/multi_modal_llms/openai/utils.py": {
        "functions": [
            {
                "name": "generate_openai_multi_modal_chat_message",
                "parameters": [
                    {
                        "name": "prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "role",
                        "default": "Constant(value='low')"
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    },
                    {
                        "name": "image_detail",
                        "default": null
                    }
                ],
                "docstring": "Create a ChatMessage to be used in a multimodal query."
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Path",
            "Optional",
            "Sequence",
            "ImageBlock",
            "ChatMessage",
            "ImageNode"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/multi_modal_llms/openai/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='gpt-4-vision-preview')"
                    },
                    {
                        "name": "model",
                        "default": "Name(id='DEFAULT_TEMPERATURE', ctx=Load())"
                    },
                    {
                        "name": "temperature",
                        "default": "Constant(value=300)"
                    },
                    {
                        "name": "max_new_tokens",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "additional_kwargs",
                        "default": "Name(id='DEFAULT_CONTEXT_WINDOW', ctx=Load())"
                    },
                    {
                        "name": "context_window",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "max_retries",
                        "default": "Constant(value=60.0)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value='low')"
                    },
                    {
                        "name": "image_detail",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_base",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_version",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "messages_to_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "completion_to_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "default_headers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "http_client",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_clients",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Multi Modal LLM metadata."
            },
            {
                "name": "_get_credential_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_multi_modal_chat_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "role",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_model_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_response_token_counts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "raw_response",
                        "default": null
                    }
                ],
                "docstring": "Get the token usage reported by the response."
            },
            {
                "name": "_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "image_documents",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "OpenAIMultiModal",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "cast",
            "httpx",
            "messages_to_prompt",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "MessageRole",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "DEFAULT_CONTEXT_WINDOW",
            "DEFAULT_NUM_OUTPUTS",
            "DEFAULT_TEMPERATURE",
            "llm_chat_callback",
            "llm_completion_callback",
            "MultiModalLLM",
            "MultiModalLLMMetadata",
            "ImageNode",
            "from_openai_message",
            "resolve_openai_credentials",
            "to_openai_message_dicts",
            "update_tool_calls",
            "AsyncOpenAI",
            "OpenAI",
            "ChatCompletionMessageParam",
            "ChatCompletionChunk",
            "ChoiceDelta",
            "ChoiceDeltaToolCall",
            "GPT4V_MODELS",
            "generate_openai_multi_modal_chat_message"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/agent/openai/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "OpenAIAgent",
            "OpenAIAssistantAgent",
            "OpenAIAgentWorker",
            "advanced_tool_call_parser"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/agent/openai/openai_assistant_agent.py": {
        "functions": [
            {
                "name": "from_openai_thread_message",
                "parameters": [
                    {
                        "name": "thread_message",
                        "default": null
                    }
                ],
                "docstring": "From OpenAI thread message."
            },
            {
                "name": "from_openai_thread_messages",
                "parameters": [
                    {
                        "name": "thread_messages",
                        "default": null
                    }
                ],
                "docstring": "From OpenAI thread messages."
            },
            {
                "name": "call_function",
                "parameters": [
                    {
                        "name": "tools",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "fn_obj",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Call a function and return the output as a string."
            },
            {
                "name": "_process_files",
                "parameters": [
                    {
                        "name": "client",
                        "default": null
                    },
                    {
                        "name": "files",
                        "default": null
                    }
                ],
                "docstring": "Process files."
            },
            {
                "name": "format_attachments",
                "parameters": [
                    {
                        "name": "file_ids",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "Create attachments from file_ids and include tools."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "assistant",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=0.1)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "thread_id",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "instructions_prefix",
                        "default": null
                    },
                    {
                        "name": "run_retrieve_sleep_time",
                        "default": null
                    },
                    {
                        "name": "file_dict",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_new",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "name",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instructions",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value='gpt-4-1106-preview')"
                    },
                    {
                        "name": "openai_tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "thread_id",
                        "default": "Constant(value=0.1)"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instructions_prefix",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "run_retrieve_sleep_time",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "files",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "file_ids",
                        "default": null
                    },
                    {
                        "name": "api_key",
                        "default": null
                    }
                ],
                "docstring": "From new assistant.\n\nArgs:\n    name: name of assistant\n    instructions: instructions for assistant\n    tools: list of tools\n    openai_tools: list of openai tools\n    thread_id: thread id\n    model: model\n    run_retrieve_sleep_time: run retrieve sleep time\n    files: files\n    instructions_prefix: instructions prefix\n    callback_manager: callback manager\n    verbose: verbose\n    file_ids: list of file ids\n    api_key: OpenAI API key"
            },
            {
                "name": "from_existing",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "assistant_id",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "thread_id",
                        "default": "Constant(value=0.1)"
                    },
                    {
                        "name": "instructions_prefix",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "run_retrieve_sleep_time",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "api_key",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "From existing assistant id.\n\nArgs:\n    assistant_id: id of assistant\n    tools: list of BaseTools Assistant can use\n    thread_id: thread id\n    run_retrieve_sleep_time: run retrieve sleep time\n    instructions_prefix: instructions prefix\n    callback_manager: callback manager\n    api_key: OpenAI API key\n    verbose: verbose"
            },
            {
                "name": "assistant",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get assistant."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get client."
            },
            {
                "name": "thread_id",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get thread id."
            },
            {
                "name": "files_dict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get files dict."
            },
            {
                "name": "chat_history",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "reset",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Delete and create a new thread."
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "message",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "upload_files",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "files",
                        "default": null
                    }
                ],
                "docstring": "Upload files."
            },
            {
                "name": "add_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file_ids",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    }
                ],
                "docstring": "Add message to assistant."
            },
            {
                "name": "_run_function_calling",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "run",
                        "default": null
                    }
                ],
                "docstring": "Run function calling."
            },
            {
                "name": "run_assistant",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "instructions_prefix",
                        "default": null
                    }
                ],
                "docstring": "Run assistant."
            },
            {
                "name": "latest_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get latest message."
            },
            {
                "name": "_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "function_call",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": "Main chat interface."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "function_call",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "message",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "chat_history",
                        "default": null
                    },
                    {
                        "name": "function_call",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "OpenAIAssistantAgent",
                "docstring": "OpenAIAssistant agent.\n\nWrapper around OpenAI assistant API: https://platform.openai.com/docs/assistants/overview"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "json",
            "logging",
            "time",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "Union",
            "cast",
            "build_error_tool_output",
            "build_missing_tool_message",
            "get_function_by_name",
            "BaseAgent",
            "ChatMessage",
            "MessageRole",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "ChatResponseMode",
            "StreamingAgentChatResponse",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "TextContentBlock",
            "Message",
            "Function",
            "Function",
            "OpenAI",
            "OpenAI",
            "Assistant",
            "OpenAI",
            "OpenAI",
            "Run",
            "Run"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/agent/openai/step.py": {
        "functions": [
            {
                "name": "call_tool_with_error_handling",
                "parameters": [
                    {
                        "name": "tool",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input_dict",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "error_message",
                        "default": null
                    },
                    {
                        "name": "raise_error",
                        "default": null
                    }
                ],
                "docstring": "Call tool with error handling.\n\nInput is a dictionary with args and kwargs"
            },
            {
                "name": "default_tool_call_parser",
                "parameters": [
                    {
                        "name": "tool_call",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "advanced_tool_call_parser",
                "parameters": [
                    {
                        "name": "tool_call",
                        "default": null
                    }
                ],
                "docstring": "Parse tool calls that are not standard json.\n\nAlso parses tool calls of the following forms:\nvariable = \\\"\\\"\\\"Some long text\\\"\\\"\\\"\nvariable = \"Some long text\"'\nvariable = '''Some long text'''\nvariable = 'Some long text'"
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "tools",
                        "default": "Name(id='DEFAULT_MAX_FUNCTION_CALLS', ctx=Load())"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_function_calls",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    },
                    {
                        "name": "tool_call_parser",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Name(id='DEFAULT_MAX_FUNCTION_CALLS', ctx=Load())"
                    },
                    {
                        "name": "max_function_calls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_call_parser",
                        "default": null
                    }
                ],
                "docstring": "Create an OpenAIAgent from a list of tools.\n\nSimilar to `from_defaults` in other classes, this method will\ninfer defaults for a variety of parameters, including the LLM,\nif they are not specified."
            },
            {
                "name": "get_all_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_latest_tool_calls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_llm_chat_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "openai_tools",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_process_message",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "chat_response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_stream_ai_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_agent_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_call_function",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "tool_call",
                        "default": null
                    },
                    {
                        "name": "memory",
                        "default": null
                    },
                    {
                        "name": "sources",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "initialize_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Initialize step from task."
            },
            {
                "name": "_should_continue",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tool_calls",
                        "default": null
                    },
                    {
                        "name": "n_function_calls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "input",
                        "default": null
                    }
                ],
                "docstring": "Get tools."
            },
            {
                "name": "_run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Attribute(value=Name(id='ChatResponseMode', ctx=Load()), attr='WAIT', ctx=Load())"
                    },
                    {
                        "name": "step",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "task",
                        "default": null
                    },
                    {
                        "name": "mode",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "run_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step."
            },
            {
                "name": "stream_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "step",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Run step (stream)."
            },
            {
                "name": "finalize_task",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Finalize task, after all the steps are completed."
            },
            {
                "name": "undo_step",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "task",
                        "default": null
                    }
                ],
                "docstring": "Undo step from task.\n\nIf this cannot be implemented, return None."
            },
            {
                "name": "set_callback_manager",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    }
                ],
                "docstring": "Set callback manager."
            }
        ],
        "classes": [
            {
                "name": "OpenAIAgentWorker",
                "docstring": "OpenAI Agent agent worker."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "json",
            "logging",
            "uuid",
            "partial",
            "Any",
            "Dict",
            "List",
            "Callable",
            "Optional",
            "Union",
            "cast",
            "get_args",
            "re",
            "resolve_tool_choice",
            "build_error_tool_output",
            "build_missing_tool_message",
            "get_function_by_name",
            "BaseAgentWorker",
            "Task",
            "TaskStep",
            "TaskStepOutput",
            "add_user_step_to_memory",
            "MessageRole",
            "CallbackManager",
            "CBEventType",
            "EventPayload",
            "trace_method",
            "AGENT_CHAT_RESPONSE_TYPE",
            "AgentChatResponse",
            "ChatResponseMode",
            "StreamingAgentChatResponse",
            "ChatMessage",
            "ChatResponse",
            "get_dispatcher",
            "AgentToolCallEvent",
            "LLM",
            "BaseMemory",
            "ChatMemoryBuffer",
            "ObjectRetriever",
            "Settings",
            "BaseTool",
            "ToolOutput",
            "adapt_to_async_tool",
            "ToolMetadata",
            "Thread",
            "OpenAI",
            "OpenAIToolCall"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/agent/openai/utils.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "resolve_tool_choice"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/agent/openai/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "tools",
                        "default": "Name(id='DEFAULT_MAX_FUNCTION_CALLS', ctx=Load())"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "memory",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_function_calls",
                        "default": null
                    },
                    {
                        "name": "default_tool_choice",
                        "default": null
                    },
                    {
                        "name": "callback_manager",
                        "default": null
                    },
                    {
                        "name": "tool_retriever",
                        "default": null
                    },
                    {
                        "name": "tool_call_parser",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_tools",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_retriever",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "memory",
                        "default": "Name(id='ChatMemoryBuffer', ctx=Load())"
                    },
                    {
                        "name": "memory_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Name(id='DEFAULT_MAX_FUNCTION_CALLS', ctx=Load())"
                    },
                    {
                        "name": "max_function_calls",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "default_tool_choice",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prefix_messages",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_call_parser",
                        "default": null
                    }
                ],
                "docstring": "Create an OpenAIAgent from a list of tools.\n\nSimilar to `from_defaults` in other classes, this method will\ninfer defaults for a variety of parameters, including the LLM,\nif they are not specified."
            }
        ],
        "classes": [
            {
                "name": "OpenAIAgent",
                "docstring": "OpenAI agent.\n\nSubclasses AgentRunner with a OpenAIAgentWorker.\n\nFor the legacy implementation see:\n```python\nfrom llama_index.agent.legacy.openai.base import OpenAIAgent\n```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Dict",
            "List",
            "Callable",
            "Optional",
            "Type",
            "OpenAIAgentWorker",
            "AgentRunner",
            "CallbackManager",
            "ChatMessage",
            "LLM",
            "ChatMemoryBuffer",
            "BaseMemory",
            "ObjectRetriever",
            "Settings",
            "BaseTool",
            "OpenAI",
            "OpenAIToolCall"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/upgrade/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "upgrade_dir",
            "upgrade_file"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/upgrade/base.py": {
        "functions": [
            {
                "name": "_parse_from_imports",
                "parameters": [
                    {
                        "name": "mappings",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "installed_modules",
                        "default": null
                    },
                    {
                        "name": "line_idx",
                        "default": null
                    },
                    {
                        "name": "lines",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_parse_hub_downloads",
                "parameters": [
                    {
                        "name": "mappings",
                        "default": null
                    },
                    {
                        "name": "installed_modules",
                        "default": null
                    },
                    {
                        "name": "line",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "parse_lines",
                "parameters": [
                    {
                        "name": "lines",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "installed_modules",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_cell_installs_llama_hub",
                "parameters": [
                    {
                        "name": "cell",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_format_new_installs",
                "parameters": [
                    {
                        "name": "new_installs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_nb_file",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_py_md_file",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_file",
                "parameters": [
                    {
                        "name": "file_path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_is_hidden",
                "parameters": [
                    {
                        "name": "path",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "upgrade_dir",
                "parameters": [
                    {
                        "name": "input_dir",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "os",
            "re",
            "Path",
            "Dict",
            "List",
            "Tuple"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/rag/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RagCLI",
            "default_ragcli_persist_dir"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/rag/base.py": {
        "functions": [
            {
                "name": "_try_load_openai_llm",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "default_ragcli_persist_dir",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "query_input",
                "parameters": [
                    {
                        "name": "query_str",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": null
            },
            {
                "name": "custom_query",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "query_str",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "query_pipeline_from_ingestion_pipeline",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "query_pipeline",
                        "default": null
                    },
                    {
                        "name": "values",
                        "default": null
                    }
                ],
                "docstring": "If query_pipeline is not provided, create one from ingestion_pipeline."
            },
            {
                "name": "chat_engine_from_query_pipeline",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "chat_engine",
                        "default": null
                    },
                    {
                        "name": "values",
                        "default": null
                    }
                ],
                "docstring": "If chat_engine is not provided, create one from query_pipeline."
            },
            {
                "name": "add_parser_args",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "parser",
                        "default": null
                    },
                    {
                        "name": "instance_generator",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "cli",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Entrypoint for CLI tool."
            }
        ],
        "classes": [
            {
                "name": "QueryPipelineQueryEngine",
                "docstring": null
            },
            {
                "name": "RagCLI",
                "docstring": "CLI tool for chatting with output of a IngestionPipeline via a QueryPipeline."
            },
            {
                "name": "Config",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "asyncio",
            "os",
            "shutil",
            "ArgumentParser",
            "iglob",
            "Path",
            "Any",
            "Callable",
            "Dict",
            "Optional",
            "Union",
            "cast",
            "Settings",
            "SimpleDirectoryReader",
            "VectorStoreIndex",
            "BaseEmbedding",
            "RESPONSE_TYPE",
            "StreamingResponse",
            "Response",
            "BaseModel",
            "Field",
            "field_validator",
            "CondenseQuestionChatEngine",
            "IngestionPipeline",
            "LLM",
            "CustomQueryEngine",
            "FnComponent",
            "QueryPipeline",
            "BaseReader",
            "CompactAndRefine",
            "get_cache_dir",
            "OpenAI"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/new_package/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "upgrade_dir",
            "upgrade_file"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/new_package/base.py": {
        "functions": [
            {
                "name": "_create_init_file",
                "parameters": [
                    {
                        "name": "dir",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_create_test_file",
                "parameters": [
                    {
                        "name": "filename",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_makedirs",
                "parameters": [
                    {
                        "name": "dir",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "init_new_package",
                "parameters": [
                    {
                        "name": "integration_type",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "integration_name",
                        "default": null
                    },
                    {
                        "name": "prefix",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "shutil",
            "Path",
            "pyproject_str",
            "readme_str",
            "init_str",
            "init_with_prefix_str",
            "Optional"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/new_package/templates/pyproject.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/new_package/templates/readme.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/new_package/templates/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "pyproject_str",
            "readme_str",
            "init_str",
            "init_with_prefix_str"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/cli/new_package/templates/init.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": []
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/storage/kvstore/redis/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RedisKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/storage/kvstore/redis/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='redis://127.0.0.1:6379')"
                    },
                    {
                        "name": "redis_uri",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "redis_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_redis_client",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "put",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "val",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Put a key-value pair into the store.\n\nArgs:\n    key (str): key\n    val (dict): value\n    collection (str): collection name"
            },
            {
                "name": "put_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "kv_pairs",
                        "default": "Name(id='DEFAULT_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "collection",
                        "default": null
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    }
                ],
                "docstring": "Put a dictionary of key-value pairs into the store.\n\nArgs:\n    kv_pairs (List[Tuple[str, dict]]): key-value pairs\n    collection (str): collection name"
            },
            {
                "name": "get",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Get a value from the store.\n\nArgs:\n    key (str): key\n    collection (str): collection name"
            },
            {
                "name": "get_all",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Get all values from the store."
            },
            {
                "name": "delete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_COLLECTION', ctx=Load())"
                    },
                    {
                        "name": "key",
                        "default": null
                    },
                    {
                        "name": "collection",
                        "default": null
                    }
                ],
                "docstring": "Delete a value from the store.\n\nArgs:\n    key (str): key\n    collection (str): collection name"
            },
            {
                "name": "from_host_and_port",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "host",
                        "default": null
                    },
                    {
                        "name": "port",
                        "default": null
                    }
                ],
                "docstring": "Load a RedisKVStore from a Redis host and port.\n\nArgs:\n    host (str): Redis host\n    port (int): Redis port"
            },
            {
                "name": "from_redis_client",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    },
                    {
                        "name": "redis_client",
                        "default": null
                    }
                ],
                "docstring": "Load a RedisKVStore from a Redis Client.\n\nArgs:\n    redis_client (Redis): Redis client"
            }
        ],
        "classes": [
            {
                "name": "RedisKVStore",
                "docstring": "Redis KV Store.\n\nArgs:\n    redis_uri (str): Redis URI\n    redis_client (Any): Redis client\n    async_redis_client (Any): Async Redis client\n\nRaises:\n        ValueError: If redis-py is not installed\n\nExamples:\n    >>> from llama_index.storage.kvstore.redis import RedisKVStore\n    >>> # Create a RedisKVStore\n    >>> redis_kv_store = RedisKVStore(\n    >>>     redis_url=\"redis://127.0.0.1:6379\")"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "DEFAULT_BATCH_SIZE",
            "DEFAULT_COLLECTION",
            "BaseKVStore",
            "Redis",
            "Redis"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/storage/docstore/redis/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RedisDocumentStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/storage/docstore/redis/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "redis_kvstore",
                        "default": "Name(id='DEFAULT_BATCH_SIZE', ctx=Load())"
                    },
                    {
                        "name": "namespace",
                        "default": null
                    },
                    {
                        "name": "batch_size",
                        "default": null
                    }
                ],
                "docstring": "Init a RedisDocumentStore."
            },
            {
                "name": "from_redis_client",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "redis_client",
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "default": null
                    }
                ],
                "docstring": "Load a RedisDocumentStore from a Redis Client."
            },
            {
                "name": "from_host_and_port",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "host",
                        "default": null
                    },
                    {
                        "name": "port",
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "default": null
                    }
                ],
                "docstring": "Load a RedisDocumentStore from a Redis host and port."
            }
        ],
        "classes": [
            {
                "name": "RedisDocumentStore",
                "docstring": "Redis Document (Node) store.\n\nA Redis store for Document and Node objects.\n\nArgs:\n    redis_kvstore (RedisKVStore): Redis key-value store\n    namespace (str): namespace for the docstore"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "KVDocumentStore",
            "DEFAULT_BATCH_SIZE",
            "RedisKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/storage/index_store/redis/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RedisIndexStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/storage/index_store/redis/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "redis_kvstore",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "namespace",
                        "default": null
                    },
                    {
                        "name": "collection_suffix",
                        "default": null
                    }
                ],
                "docstring": "Init a RedisIndexStore."
            },
            {
                "name": "from_redis_client",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "redis_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "namespace",
                        "default": null
                    },
                    {
                        "name": "collection_suffix",
                        "default": null
                    }
                ],
                "docstring": "Load a RedisIndexStore from a Redis Client."
            },
            {
                "name": "from_host_and_port",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "host",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "port",
                        "default": null
                    },
                    {
                        "name": "namespace",
                        "default": null
                    },
                    {
                        "name": "collection_suffix",
                        "default": null
                    }
                ],
                "docstring": "Load a RedisIndexStore from a Redis host and port."
            }
        ],
        "classes": [
            {
                "name": "RedisIndexStore",
                "docstring": "Redis Index store.\n\nArgs:\n    redis_kvstore (RedisKVStore): Redis key-value store\n    namespace (str): namespace for the index store"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Any",
            "Optional",
            "KVIndexStore",
            "DEFAULT_COLLECTION_SUFFIX",
            "RedisKVStore"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/program/openai/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "OpenAIPydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/program/openai/utils.py": {
        "functions": [
            {
                "name": "parse_partial_json",
                "parameters": [
                    {
                        "name": "s",
                        "default": null
                    }
                ],
                "docstring": "Parse an incomplete JSON string into a valid python dictionary.\n\nNOTE: This is adapted from\nhttps://github.com/OpenInterpreter/open-interpreter/blob/5b6080fae1f8c68938a1e4fa8667e3744084ee21/interpreter/utils/parse_partial_json.py"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/program/openai/base.py": {
        "functions": [
            {
                "name": "_default_tool_choice",
                "parameters": [
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "allow_multiple",
                        "default": null
                    }
                ],
                "docstring": "Default OpenAI tool to choose."
            },
            {
                "name": "_get_json_str",
                "parameters": [
                    {
                        "name": "raw_str",
                        "default": null
                    },
                    {
                        "name": "start_idx",
                        "default": null
                    }
                ],
                "docstring": "Extract JSON str from raw string and start index."
            },
            {
                "name": "_parse_tool_calls",
                "parameters": [
                    {
                        "name": "tool_calls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "allow_multiple",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    },
                    {
                        "name": "allow_multiple",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "allow_multiple",
                        "default": null
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "output_cls",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "prompt",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__call__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_list",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Streams a list of objects."
            },
            {
                "name": "stream_partial_objects",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Streams the intermediate partial object."
            },
            {
                "name": "_description_eval",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "OpenAIPydanticProgram",
                "docstring": "An OpenAI-based function that returns a pydantic model.\n\nNote: this interface is not yet stable."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Any",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Tuple",
            "Type",
            "Union",
            "cast",
            "ValidationError",
            "resolve_tool_choice",
            "LLM",
            "BaseLLMFunctionProgram",
            "create_list_model",
            "BasePromptTemplate",
            "PromptTemplate",
            "Settings",
            "Model",
            "OpenAI",
            "OpenAIToolCall",
            "to_openai_tool",
            "deprecated",
            "parse_partial_json"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DocxReader",
            "HWPReader",
            "PDFReader",
            "EpubReader",
            "FlatReader",
            "HTMLTagReader",
            "ImageReader",
            "ImageCaptionReader",
            "ImageTabularChartReader",
            "ImageVisionLLMReader",
            "IPYNBReader",
            "MarkdownReader",
            "MboxReader",
            "PagedCSVReader",
            "PyMuPDFReader",
            "RTFReader",
            "PptxReader",
            "CSVReader",
            "PandasCSVReader",
            "PandasExcelReader",
            "UnstructuredReader",
            "VideoAudioReader",
            "XMLReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/llama_parse/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "LlamaParse"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/pymu_pdf/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PyMuPDFReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/pymu_pdf/base.py": {
        "functions": [
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "file_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Loads list of documents from PDF file and also accepts extra information in dict format."
            },
            {
                "name": "load",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "file_path",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "metadata",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Loads list of documents from PDF file and also accepts extra information in dict format.\n\nArgs:\n    file_path (Union[Path, str]): file path of PDF file (accepts string or Path).\n    metadata (bool, optional): if metadata to be included or not. Defaults to True.\n    extra_info (Optional[Dict], optional): extra information related to each document in dict format. Defaults to None.\n\nRaises:\n    TypeError: if extra_info is not a dictionary.\n    TypeError: if file_path is not a string or Path.\n\nReturns:\n    List[Document]: list of documents."
            }
        ],
        "classes": [
            {
                "name": "PyMuPDFReader",
                "docstring": "Read PDF files using PyMuPDF library."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Dict",
            "List",
            "Optional",
            "Union",
            "BaseReader",
            "Document",
            "fitz"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/flat/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "FlatReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/flat/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Parse file into string."
            }
        ],
        "classes": [
            {
                "name": "FlatReader",
                "docstring": "Flat reader.\n\nExtract raw text from a file and save the file type in the metadata"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/rtf/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "RTFReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/rtf/base.py": {
        "functions": [
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "input_file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Load data from RTF file.\n\nArgs:\n    input_file (Path | str): Path for the RTF file.\n    extra_info (Dict[str, Any]): Path for the RTF file.\n\nReturns:\n    List[Document]: List of documents."
            }
        ],
        "classes": [
            {
                "name": "RTFReader",
                "docstring": "RTF (Rich Text Format) Reader. Reads rtf file and convert to Document."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "List",
            "Union",
            "Any",
            "Dict",
            "Optional",
            "BaseReader",
            "Document",
            "rtf_to_text"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image_vision_llm/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ImageVisionLLMReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image_vision_llm/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parser_config",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "keep_image",
                        "default": "Constant(value='Question: describe what you see in this image. Answer:')"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "ImageVisionLLMReader",
                "docstring": "Image parser.\n\nCaption image using Blip2 (a multimodal VisionLLM similar to GPT4)."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document",
            "ImageDocument",
            "infer_torch_device",
            "img_2_b64",
            "Image",
            "sentencepiece",
            "torch",
            "Image",
            "Blip2ForConditionalGeneration",
            "Blip2Processor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/video_audio/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "VideoAudioReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/video_audio/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init parser."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "VideoAudioReader",
                "docstring": "Video audio parser.\n\nExtract text from transcript of video/audio files."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "cast",
            "logging",
            "AbstractFileSystem",
            "BaseReader",
            "Document",
            "whisper",
            "whisper",
            "AudioSegment"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/markdown/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MarkdownReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/markdown/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "markdown_to_tups",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "markdown_text",
                        "default": null
                    }
                ],
                "docstring": "Convert a markdown file to a dictionary.\n\nThe keys are the headers and the values are the text under each header."
            },
            {
                "name": "remove_images",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Remove images in markdown content but keep the description."
            },
            {
                "name": "remove_hyperlinks",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "content",
                        "default": null
                    }
                ],
                "docstring": "Remove hyperlinks in markdown content."
            },
            {
                "name": "_init_parser",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize the parser with the config."
            },
            {
                "name": "parse_tups",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='ignore')"
                    },
                    {
                        "name": "filepath",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "errors",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file into tuples."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file into string."
            }
        ],
        "classes": [
            {
                "name": "MarkdownReader",
                "docstring": "Markdown parser.\n\nExtract text from markdown files.\nReturns dictionary with keys as headers and values as the text between headers."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Path",
            "AbstractFileSystem",
            "LocalFileSystem",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Tuple",
            "BaseReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/tabular/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "CSVReader",
            "PandasCSVReader",
            "PandasExcelReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/tabular/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Parse file.\n\nReturns:\n    Union[str, List[str]]: a string or a List of strings."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "CSVReader",
                "docstring": "CSV parser.\n\nArgs:\n    concat_rows (bool): whether to concatenate all rows into one document.\n        If set to False, a Document will be created for each row.\n        True by default."
            },
            {
                "name": "PandasCSVReader",
                "docstring": "Pandas-based CSV parser.\n\nParses CSVs using the separator detection from Pandas `read_csv`function.\nIf special parameters are required, use the `pandas_config` dict.\n\nArgs:\n    concat_rows (bool): whether to concatenate all rows into one document.\n        If set to False, a Document will be created for each row.\n        True by default.\n\n    col_joiner (str): Separator to use for joining cols per row.\n        Set to \", \" by default.\n\n    row_joiner (str): Separator to use for joining each row.\n        Only used when `concat_rows=True`.\n        Set to \"\\n\" by default.\n\n    pandas_config (dict): Options for the `pandas.read_csv` function call.\n        Refer to https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html\n        for more information.\n        Set to empty dict by default, this means pandas will try to figure\n        out the separators, table head, etc. on its own."
            },
            {
                "name": "PandasExcelReader",
                "docstring": "Pandas-based Excel parser.\n\nParses Excel files using the Pandas `read_excel`function.\nIf special parameters are required, use the `pandas_config` dict.\n\nArgs:\n    concat_rows (bool): whether to concatenate all rows into one document.\n        If set to False, a Document will be created for each row.\n        True by default.\n\n    sheet_name (str | int | None): Defaults to None, for all sheets, otherwise pass a str or int to specify the sheet to read.\n\n    pandas_config (dict): Options for the `pandas.read_excel` function call.\n        Refer to https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html\n        for more information.\n        Set to empty dict by default."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "AbstractFileSystem",
            "importlib",
            "pandas",
            "BaseReader",
            "Document",
            "csv"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/ipynb/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "IPYNBReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/ipynb/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parser_config",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "concatenate",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "IPYNBReader",
                "docstring": "Image parser."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Path",
            "Dict",
            "List",
            "Optional",
            "AbstractFileSystem",
            "BaseReader",
            "Document",
            "nbconvert"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/html/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "HTMLTagReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/html/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='section')"
                    },
                    {
                        "name": "tag",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "ignore_no_id",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_extract_text_from_tag",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tag",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "HTMLTagReader",
                "docstring": "Read HTML files and extract text from a specific tag with BeautifulSoup.\n\nBy default, reads the text from the ``<section>`` tag."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "TYPE_CHECKING",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document",
            "Tag",
            "BeautifulSoup",
            "NavigableString"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/docs/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "DocxReader",
            "HWPReader",
            "PDFReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/docs/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "return_full_document",
                        "default": null
                    }
                ],
                "docstring": "Initialize PDFReader."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Load data and extract table from Hwp file.\n\nArgs:\n    file (Path): Path for the Hwp file.\n\nReturns:\n    List[Document]"
            },
            {
                "name": "is_valid",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "dirs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_body_sections",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "dirs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_text_to_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "text",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_text",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "load_file",
                        "default": null
                    },
                    {
                        "name": "file_dirs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "is_compressed",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "load_file",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "get_text_from_section",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "load_file",
                        "default": null
                    },
                    {
                        "name": "section",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "PDFReader",
                "docstring": "PDF parser."
            },
            {
                "name": "DocxReader",
                "docstring": "Docx parser."
            },
            {
                "name": "HWPReader",
                "docstring": "Hwp Parser."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "io",
            "logging",
            "struct",
            "zlib",
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "retry",
            "stop_after_attempt",
            "AbstractFileSystem",
            "BaseReader",
            "get_default_fs",
            "is_default_fs",
            "Document",
            "olefile",
            "pypdf",
            "docx2txt"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ImageReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parser_config",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "keep_image",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "parse_text",
                        "default": "Constant(value='text')"
                    },
                    {
                        "name": "text_type",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "pytesseract_model_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Init parser."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "ImageReader",
                "docstring": "Image parser.\n\nExtract text from images using DONUT or pytesseract."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "Path",
            "Dict",
            "List",
            "Optional",
            "cast",
            "Any",
            "AbstractFileSystem",
            "BytesIO",
            "BaseReader",
            "Document",
            "ImageDocument",
            "infer_torch_device",
            "img_2_b64",
            "Image",
            "pytesseract",
            "pytesseract",
            "sentencepiece",
            "torch",
            "Image",
            "DonutProcessor",
            "VisionEncoderDecoderModel"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/xml/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "XMLReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/xml/base.py": {
        "functions": [
            {
                "name": "_get_leaf_nodes_up_to_level",
                "parameters": [
                    {
                        "name": "root",
                        "default": null
                    },
                    {
                        "name": "level",
                        "default": null
                    }
                ],
                "docstring": "Get collection of nodes up to certain level including leaf nodes.\n\nArgs:\n    root (ET.Element): XML Root Element\n    level (int): Levels to traverse in the tree\n\nReturns:\n    List[ET.Element]: List of target nodes"
            },
            {
                "name": "traverse",
                "parameters": [
                    {
                        "name": "current_node",
                        "default": null
                    },
                    {
                        "name": "current_level",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=0)"
                    },
                    {
                        "name": "tree_level_split",
                        "default": null
                    }
                ],
                "docstring": "Initialize with arguments."
            },
            {
                "name": "_parse_xmlelt_to_document",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "root",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Parse the xml object into a list of Documents.\n\nArgs:\n    root: The XML Element to be converted.\n    extra_info (Optional[Dict]): Additional information. Default is None.\n\nReturns:\n    Document: The documents."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Load data from the input file.\n\nArgs:\n    file (Path): Path to the input file.\n    extra_info (Optional[Dict]): Additional information. Default is None.\n\nReturns:\n    List[Document]: List of documents."
            }
        ],
        "classes": [
            {
                "name": "XMLReader",
                "docstring": "XML reader.\n\nReads XML documents with options to help suss out relationships between nodes.\n\nArgs:\n    tree_level_split (int): From which level in the xml tree we split documents,\n    the default level is the root which is level 0"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "re",
            "xml.etree.ElementTree",
            "Path",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/slides/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PptxReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/slides/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init parser."
            },
            {
                "name": "caption_image",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tmp_image_file",
                        "default": null
                    }
                ],
                "docstring": "Generate text caption of image."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "PptxReader",
                "docstring": "Powerpoint parser.\n\nExtract text, caption images, and specify slides."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "os",
            "tempfile",
            "Path",
            "Dict",
            "List",
            "Optional",
            "AbstractFileSystem",
            "BaseReader",
            "Document",
            "infer_torch_device",
            "Image",
            "Presentation",
            "torch",
            "Image",
            "Presentation",
            "AutoTokenizer",
            "VisionEncoderDecoderModel",
            "ViTFeatureExtractor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/mbox/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "MboxReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/mbox/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file into string."
            }
        ],
        "classes": [
            {
                "name": "MboxReader",
                "docstring": "Mbox parser.\n\nExtract messages from mailbox files.\nReturns string including date, subject, sender, receiver and\ncontent for each message."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "AbstractFileSystem",
            "BaseReader",
            "Document",
            "mailbox",
            "BytesParser",
            "default",
            "BeautifulSoup",
            "BeautifulSoup"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image_deplot/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ImageTabularChartReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image_deplot/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parser_config",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "keep_image",
                        "default": "Constant(value=512)"
                    },
                    {
                        "name": "max_output_tokens",
                        "default": "Constant(value='Generate underlying data table of the figure below:')"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "ImageTabularChartReader",
                "docstring": "Image parser.\n\nExtract tabular data from a chart or figure."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document",
            "ImageDocument",
            "img_2_b64",
            "Image",
            "torch",
            "Image",
            "Pix2StructForConditionalGeneration",
            "Pix2StructProcessor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/unstructured/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "UnstructuredReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/unstructured/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Initialize UnstructuredReader.\n\nArgs:\n    *args (Any): Additional arguments passed to the BaseReader.\n    api_key (str, optional): API key for accessing the Unstructured.io API. If provided, the reader will use the API for parsing files. Defaults to None.\n    url (str, optional): URL for the Unstructured.io API. If not provided and an api_key is given, defaults to \"http://localhost:8000\". Ignored if api_key is not provided. Defaults to None.\n    allowed_metadata_types (Optional[Tuple], optional): Tuple of types that are allowed in the metadata. Defaults to (str, int, float, type(None)).\n    excluded_metadata_keys (Optional[Set], optional): Set of metadata keys to exclude from the final document. Defaults to {\"orig_elements\"}.\n\nAttributes:\n    api_key (str or None): Stores the API key.\n    use_api (bool): Indicates whether to use the API for parsing files, based on the presence of the api_key.\n    url (str or None): URL for the Unstructured.io API if using the API.\n    allowed_metadata_types (Tuple): Tuple of types that are allowed in the metadata.\n    excluded_metadata_keys (Set): Set of metadata keys to exclude from the final document."
            },
            {
                "name": "from_api",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": null
                    },
                    {
                        "name": "url",
                        "default": null
                    }
                ],
                "docstring": "Set the server url and api key."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "unstructured_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "document_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "split_documents",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "excluded_metadata_keys",
                        "default": null
                    }
                ],
                "docstring": "Load data using Unstructured.io.\n\nDepending on the configuration, if url is set or use_api is True,\nit'll parse the file using an API call, otherwise it parses it locally.\nextra_info is extended by the returned metadata if split_documents is True.\n\nArgs:\n    file (Optional[Path]): Path to the file to be loaded.\n    unstructured_kwargs (Optional[Dict]): Additional arguments for unstructured partitioning.\n    document_kwargs (Optional[Dict]): Additional arguments for document creation.\n    extra_info (Optional[Dict]): Extra information to add to the document metadata.\n    split_documents (Optional[bool]): Whether to split the documents.\n    excluded_metadata_keys (Optional[List[str]]): Keys to exclude from the metadata.\n\nReturns:\n    List[Document]: List of parsed documents."
            },
            {
                "name": "_partition_elements",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "unstructured_kwargs",
                        "default": null
                    },
                    {
                        "name": "file",
                        "default": null
                    }
                ],
                "docstring": "Partition the elements from the file or via API.\n\nArgs:\n    file (Optional[Path]): Path to the file to be loaded.\n    unstructured_kwargs (Dict): Additional arguments for unstructured partitioning.\n\nReturns:\n    List[Element]: List of partitioned elements."
            },
            {
                "name": "_create_documents",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "elements",
                        "default": null
                    },
                    {
                        "name": "document_kwargs",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "split_documents",
                        "default": null
                    },
                    {
                        "name": "excluded_metadata_keys",
                        "default": null
                    }
                ],
                "docstring": "Create documents from partitioned elements.\n\nArgs:\n    elements (List): List of partitioned elements.\n    document_kwargs (Optional[Dict]): Additional arguments for document creation.\n    extra_info (Optional[Dict]): Extra information to add to the document metadata.\n    split_documents (Optional[bool]): Whether to split the documents.\n    excluded_metadata_keys (Optional[List[str]]): Keys to exclude from the metadata.\n\nReturns:\n    List[Document]: List of parsed documents."
            },
            {
                "name": "_merge_metadata",
                "parameters": [
                    {
                        "name": "element",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "sequence_number",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "UnstructuredReader",
                "docstring": "General unstructured text reader for a variety of files."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "json",
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Set",
            "Tuple",
            "BaseReader",
            "Document",
            "NodeRelationship",
            "TextNode",
            "Element",
            "partition_via_api",
            "partition"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/paged_csv/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "PagedCSVReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/paged_csv/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=',')"
                    },
                    {
                        "name": "extra_info",
                        "default": "Constant(value='\"')"
                    },
                    {
                        "name": "delimiter",
                        "default": null
                    },
                    {
                        "name": "quotechar",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "PagedCSVReader",
                "docstring": "Paged CSV parser.\n\nDisplayed each row in an LLM-friendly format on a separate document.\n\nArgs:\n    encoding (str): Encoding used to open the file.\n        utf-8 by default."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Any",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document",
            "csv"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image_caption/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "ImageCaptionReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/image_caption/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "parser_config",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "keep_image",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Init params."
            },
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": null
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "ImageCaptionReader",
                "docstring": "Image parser.\n\nCaption image using Blip."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Dict",
            "List",
            "Optional",
            "BaseReader",
            "Document",
            "ImageDocument",
            "infer_torch_device",
            "img_2_b64",
            "Image",
            "sentencepiece",
            "torch",
            "Image",
            "BlipForConditionalGeneration",
            "BlipProcessor"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/epub/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "EpubReader"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/readers/file/epub/base.py": {
        "functions": [
            {
                "name": "load_data",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "file",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "extra_info",
                        "default": null
                    },
                    {
                        "name": "fs",
                        "default": null
                    }
                ],
                "docstring": "Parse file."
            }
        ],
        "classes": [
            {
                "name": "EpubReader",
                "docstring": "Epub Parser."
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Path",
            "Dict",
            "List",
            "Optional",
            "logging",
            "AbstractFileSystem",
            "BaseReader",
            "Document",
            "ebooklib",
            "html2text",
            "epub"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/question_gen/openai/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "OpenAIQuestionGenerator"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/question_gen/openai/base.py": {
        "functions": [
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "program",
                        "default": null
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "from_defaults",
                "parameters": [
                    {
                        "name": "cls",
                        "default": "Name(id='DEFAULT_OPENAI_SUB_QUESTION_PROMPT_TMPL', ctx=Load())"
                    },
                    {
                        "name": "prompt_template_str",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "llm",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get prompts."
            },
            {
                "name": "_update_prompts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompts",
                        "default": null
                    }
                ],
                "docstring": "Update prompts."
            },
            {
                "name": "generate",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "query",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "OpenAIQuestionGenerator",
                "docstring": null
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "List",
            "Optional",
            "Sequence",
            "cast",
            "LLM",
            "PromptDictType",
            "build_tools_text",
            "BaseQuestionGenerator",
            "SubQuestion",
            "SubQuestionList",
            "QueryBundle",
            "Settings",
            "ToolMetadata",
            "OpenAIPydanticProgram"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/llms/ollama/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Ollama"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/llms/ollama/base.py": {
        "functions": [
            {
                "name": "get_additional_kwargs",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "exclude",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "force_single_tool_call",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value='http://localhost:11434')"
                    },
                    {
                        "name": "model",
                        "default": "Constant(value=0.75)"
                    },
                    {
                        "name": "base_url",
                        "default": "Name(id='DEFAULT_CONTEXT_WINDOW', ctx=Load())"
                    },
                    {
                        "name": "temperature",
                        "default": "Name(id='DEFAULT_REQUEST_TIMEOUT', ctx=Load())"
                    },
                    {
                        "name": "context_window",
                        "default": "Constant(value='prompt')"
                    },
                    {
                        "name": "request_timeout",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt_key",
                        "default": "Dict(keys=[], values=[])"
                    },
                    {
                        "name": "json_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "additional_kwargs",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "client",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "async_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "is_function_calling_model",
                        "default": null
                    },
                    {
                        "name": "keep_alive",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "LLM metadata."
            },
            {
                "name": "client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "async_client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_model_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_convert_to_ollama_messages",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_response_token_counts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "raw_response",
                        "default": null
                    }
                ],
                "docstring": "Get the token usage reported by the response."
            },
            {
                "name": "_prepare_chat_with_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_validate_chat_with_tools_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Validate the response from chat_with_tools."
            },
            {
                "name": "get_tool_calls_from_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "error_on_no_tool_call",
                        "default": null
                    }
                ],
                "docstring": "Predict and call the tool."
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "structured_predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_structured_predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    }
                ],
                "docstring": "Stream structured predictions as they are generated.\n\nArgs:\n    output_cls: The Pydantic class to parse responses into\n    prompt: The prompt template to use\n    llm_kwargs: Optional kwargs for the LLM\n    **prompt_args: Args to format the prompt with\n\nReturns:\n    Generator yielding partial objects as they are generated"
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [
                    {
                        "name": "output_cls",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "llm_kwargs",
                        "default": null
                    },
                    {
                        "name": "prompt_args",
                        "default": null
                    }
                ],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Ollama",
                "docstring": "Ollama LLM.\n\nVisit https://ollama.com/ to download and install Ollama.\n\nRun `ollama serve` to start a server.\n\nRun `ollama pull <name>` to download a model to run.\n\nExamples:\n    `pip install llama-index-llms-ollama`\n\n    ```python\n    from llama_index.llms.ollama import Ollama\n\n    llm = Ollama(model=\"llama2\", request_timeout=60.0)\n\n    response = llm.complete(\"What is the capital of France?\")\n    print(response)\n    ```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "Client",
            "AsyncClient",
            "TYPE_CHECKING",
            "Any",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "Type",
            "Union",
            "Generator",
            "AsyncGenerator",
            "chat_to_completion_decorator",
            "achat_to_completion_decorator",
            "stream_chat_to_completion_decorator",
            "astream_chat_to_completion_decorator",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseGen",
            "ChatResponseAsyncGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "LLMMetadata",
            "MessageRole",
            "BaseModel",
            "Field",
            "PrivateAttr",
            "DEFAULT_CONTEXT_WINDOW",
            "DEFAULT_NUM_OUTPUTS",
            "get_dispatcher",
            "llm_chat_callback",
            "llm_completion_callback",
            "FunctionCallingLLM",
            "PromptTemplate",
            "ToolSelection",
            "PydanticProgramMode",
            "process_streaming_objects",
            "BaseTool"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/llms/openai/__init__.py": {
        "functions": [],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "AsyncOpenAI",
            "OpenAI",
            "SyncOpenAI",
            "Tokenizer"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/llms/openai/utils.py": {
        "functions": [
            {
                "name": "create_retry_decorator",
                "parameters": [
                    {
                        "name": "max_retries",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "random_exponential",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "stop_after_delay_seconds",
                        "default": "Constant(value=4)"
                    },
                    {
                        "name": "min_seconds",
                        "default": "Constant(value=60)"
                    },
                    {
                        "name": "max_seconds",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "openai_modelname_to_contextsize",
                "parameters": [
                    {
                        "name": "modelname",
                        "default": null
                    }
                ],
                "docstring": "Calculate the maximum number of tokens possible to generate for a model.\n\nArgs:\n    modelname: The modelname we want to know the context size for.\n\nReturns:\n    The maximum context size\n\nExample:\n    .. code-block:: python\n\n        max_tokens = openai.modelname_to_contextsize(\"text-davinci-003\")\n\nModified from:\n    https://github.com/hwchase17/langchain/blob/master/langchain/llms/openai.py"
            },
            {
                "name": "is_chat_model",
                "parameters": [
                    {
                        "name": "model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "is_function_calling_model",
                "parameters": [
                    {
                        "name": "model",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "to_openai_message_dict",
                "parameters": [
                    {
                        "name": "message",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "drop_none",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "model",
                        "default": null
                    }
                ],
                "docstring": "Convert a ChatMessage to an OpenAI message dict."
            },
            {
                "name": "to_openai_message_dicts",
                "parameters": [
                    {
                        "name": "messages",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "drop_none",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "model",
                        "default": null
                    }
                ],
                "docstring": "Convert generic messages to OpenAI message dicts."
            },
            {
                "name": "from_openai_message",
                "parameters": [
                    {
                        "name": "openai_message",
                        "default": null
                    }
                ],
                "docstring": "Convert openai message dict to generic message."
            },
            {
                "name": "from_openai_token_logprob",
                "parameters": [
                    {
                        "name": "openai_token_logprob",
                        "default": null
                    }
                ],
                "docstring": "Convert a single openai token logprob to generic list of logprobs."
            },
            {
                "name": "from_openai_token_logprobs",
                "parameters": [
                    {
                        "name": "openai_token_logprobs",
                        "default": null
                    }
                ],
                "docstring": "Convert openai token logprobs to generic list of LogProb."
            },
            {
                "name": "from_openai_completion_logprob",
                "parameters": [
                    {
                        "name": "openai_completion_logprob",
                        "default": null
                    }
                ],
                "docstring": "Convert openai completion logprobs to generic list of LogProb."
            },
            {
                "name": "from_openai_completion_logprobs",
                "parameters": [
                    {
                        "name": "openai_completion_logprobs",
                        "default": null
                    }
                ],
                "docstring": "Convert openai completion logprobs to generic list of LogProb."
            },
            {
                "name": "from_openai_messages",
                "parameters": [
                    {
                        "name": "openai_messages",
                        "default": null
                    }
                ],
                "docstring": "Convert openai message dicts to generic messages."
            },
            {
                "name": "from_openai_message_dict",
                "parameters": [
                    {
                        "name": "message_dict",
                        "default": null
                    }
                ],
                "docstring": "Convert openai message dict to generic message."
            },
            {
                "name": "from_openai_message_dicts",
                "parameters": [
                    {
                        "name": "message_dicts",
                        "default": null
                    }
                ],
                "docstring": "Convert openai message dicts to generic messages."
            },
            {
                "name": "to_openai_function",
                "parameters": [
                    {
                        "name": "pydantic_class",
                        "default": null
                    }
                ],
                "docstring": "Deprecated in favor of `to_openai_tool`.\n\nConvert pydantic class to OpenAI function."
            },
            {
                "name": "to_openai_tool",
                "parameters": [
                    {
                        "name": "pydantic_class",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "description",
                        "default": null
                    }
                ],
                "docstring": "Convert pydantic class to OpenAI tool."
            },
            {
                "name": "resolve_openai_credentials",
                "parameters": [
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_base",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_version",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": "\"Resolve OpenAI credentials.\n\nThe order of precedence is:\n1. param\n2. env\n3. openai module\n4. default"
            },
            {
                "name": "validate_openai_api_key",
                "parameters": [
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    }
                ],
                "docstring": null
            },
            {
                "name": "resolve_tool_choice",
                "parameters": [
                    {
                        "name": "tool_choice",
                        "default": "Constant(value='auto')"
                    }
                ],
                "docstring": "Resolve tool choice.\n\nIf tool_choice is a function name string, return the appropriate dict."
            },
            {
                "name": "update_tool_calls",
                "parameters": [
                    {
                        "name": "tool_calls",
                        "default": null
                    },
                    {
                        "name": "tool_calls_delta",
                        "default": null
                    }
                ],
                "docstring": "Use the tool_calls_delta objects received from openai stream chunks\nto update the running tool_calls object.\n\nArgs:\n    tool_calls (List[ChoiceDeltaToolCall]): the list of tool calls\n    tool_calls_delta (ChoiceDeltaToolCall): the delta to update tool_calls\n\nReturns:\n    List[ChoiceDeltaToolCall]: the updated tool calls"
            }
        ],
        "classes": [],
        "docstrings": [],
        "todos": [],
        "imports": [
            "logging",
            "os",
            "Any",
            "Callable",
            "Dict",
            "List",
            "Optional",
            "Sequence",
            "Tuple",
            "Type",
            "Union",
            "deprecated",
            "before_sleep_log",
            "retry",
            "retry_if_exception_type",
            "stop_after_attempt",
            "stop_after_delay",
            "wait_exponential",
            "wait_random_exponential",
            "stop_base",
            "openai",
            "get_from_param_or_env",
            "ChatMessage",
            "ImageBlock",
            "LogProb",
            "TextBlock",
            "BaseModel",
            "ChatCompletionMessageParam",
            "ChatCompletionMessageToolCall",
            "ChoiceDeltaToolCall",
            "ChatCompletionMessage",
            "ChatCompletionTokenLogprob",
            "Logprobs"
        ]
    },
    "/Users/rob/repos/scramble/.venv/lib/python3.12/site-packages/llama_index/llms/openai/base.py": {
        "functions": [
            {
                "name": "llm_retry_decorator",
                "parameters": [
                    {
                        "name": "f",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "force_single_tool_call",
                "parameters": [
                    {
                        "name": "response",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "wrapper",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "encode",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "text",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "__init__",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Name(id='DEFAULT_OPENAI_MODEL', ctx=Load())"
                    },
                    {
                        "name": "model",
                        "default": "Name(id='DEFAULT_TEMPERATURE', ctx=Load())"
                    },
                    {
                        "name": "temperature",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "max_tokens",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "additional_kwargs",
                        "default": "Constant(value=3)"
                    },
                    {
                        "name": "max_retries",
                        "default": "Constant(value=60.0)"
                    },
                    {
                        "name": "timeout",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "reuse_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_key",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_base",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "api_version",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "callback_manager",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "default_headers",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "http_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_http_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "openai_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "async_openai_client",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "system_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "messages_to_prompt",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "completion_to_prompt",
                        "default": "Attribute(value=Name(id='PydanticProgramMode', ctx=Load()), attr='DEFAULT', ctx=Load())"
                    },
                    {
                        "name": "pydantic_program_mode",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "output_parser",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "strict",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_aclient",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_model_name",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_is_azure_client",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "class_name",
                "parameters": [
                    {
                        "name": "cls",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_tokenizer",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Get a tokenizer for this model, or None if a tokenizing method is unknown.\n\nOpenAI can do this using the tiktoken package, subclasses may not have\nthis convenience."
            },
            {
                "name": "metadata",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "prompt",
                        "default": null
                    },
                    {
                        "name": "formatted",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_use_chat_completions",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "kwargs",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_credential_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "is_async",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_get_model_kwargs",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_stream_chat",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "messages",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_stream_complete",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": null
            },
            {
                "name": "_update_max_tokens",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "all_kwargs",
                        "default": null
                    },
                    {
                        "name": "prompt",
                        "default": null
                    }
                ],
                "docstring": "Infer max_tokens for the payload, if possible."
            },
            {
                "name": "_get_response_token_counts",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    },
                    {
                        "name": "raw_response",
                        "default": null
                    }
                ],
                "docstring": "Get the token usage reported by the response."
            },
            {
                "name": "_prepare_chat_with_tools",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tools",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "user_msg",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "chat_history",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "verbose",
                        "default": "Constant(value='auto')"
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": "Constant(value=None)"
                    },
                    {
                        "name": "tool_choice",
                        "default": null
                    },
                    {
                        "name": "strict",
                        "default": null
                    }
                ],
                "docstring": "Predict and call the tool."
            },
            {
                "name": "_validate_chat_with_tools_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=False)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "tools",
                        "default": null
                    },
                    {
                        "name": "allow_parallel_tool_calls",
                        "default": null
                    }
                ],
                "docstring": "Validate the response from chat_with_tools."
            },
            {
                "name": "get_tool_calls_from_response",
                "parameters": [
                    {
                        "name": "self",
                        "default": "Constant(value=True)"
                    },
                    {
                        "name": "response",
                        "default": null
                    },
                    {
                        "name": "error_on_no_tool_call",
                        "default": null
                    }
                ],
                "docstring": "Predict and call the tool."
            },
            {
                "name": "structured_predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Structured predict."
            },
            {
                "name": "stream_structured_predict",
                "parameters": [
                    {
                        "name": "self",
                        "default": null
                    }
                ],
                "docstring": "Stream structured predict."
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            },
            {
                "name": "gen",
                "parameters": [],
                "docstring": null
            }
        ],
        "classes": [
            {
                "name": "Tokenizer",
                "docstring": "Tokenizers support an encode function that returns a list of ints."
            },
            {
                "name": "OpenAI",
                "docstring": "OpenAI LLM.\n\nArgs:\n    model: name of the OpenAI model to use.\n    temperature: a float from 0 to 1 controlling randomness in generation; higher will lead to more creative, less deterministic responses.\n    max_tokens: the maximum number of tokens to generate.\n    additional_kwargs: Add additional parameters to OpenAI request body.\n    max_retries: How many times to retry the API call if it fails.\n    timeout: How long to wait, in seconds, for an API call before failing.\n    reuse_client: Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.\n    api_key: Your OpenAI api key\n    api_base: The base URL of the API to call\n    api_version: the version of the API to call\n    callback_manager: the callback manager is used for observability.\n    default_headers: override the default headers for API requests.\n    http_client: pass in your own httpx.Client instance.\n    async_http_client: pass in your own httpx.AsyncClient instance.\n\nExamples:\n    `pip install llama-index-llms-openai`\n\n    ```python\n    import os\n    import openai\n\n    os.environ[\"OPENAI_API_KEY\"] = \"sk-...\"\n    openai.api_key = os.environ[\"OPENAI_API_KEY\"]\n\n    from llama_index.llms.openai import OpenAI\n\n    llm = OpenAI(model=\"gpt-3.5-turbo\")\n\n    stream = llm.stream(\"Hi, write a short story\")\n\n    for r in stream:\n        print(r.delta, end=\"\")\n    ```"
            }
        ],
        "docstrings": [],
        "todos": [],
        "imports": [
            "functools",
            "TYPE_CHECKING",
            "Any",
            "Awaitable",
            "Callable",
            "Dict",
            "Generator",
            "List",
            "Optional",
            "Protocol",
            "Sequence",
            "Union",
            "cast",
            "get_args",
            "runtime_checkable",
            "httpx",
            "tiktoken",
            "llama_index.core.instrumentation",
            "achat_to_completion_decorator",
            "acompletion_to_chat_decorator",
            "astream_chat_to_completion_decorator",
            "astream_completion_to_chat_decorator",
            "chat_to_completion_decorator",
            "completion_to_chat_decorator",
            "stream_chat_to_completion_decorator",
            "stream_completion_to_chat_decorator",
            "ChatMessage",
            "ChatResponse",
            "ChatResponseAsyncGen",
            "ChatResponseGen",
            "CompletionResponse",
            "CompletionResponseAsyncGen",
            "CompletionResponseGen",
            "LLMMetadata",
            "MessageRole",
            "BaseModel",
            "Field",
            "PrivateAttr",
            "CallbackManager",
            "DEFAULT_TEMPERATURE",
            "llm_chat_callback",
            "llm_completion_callback",
            "FunctionCallingLLM",
            "ToolSelection",
            "parse_partial_json",
            "BaseOutputParser",
            "Model",
            "PydanticProgramMode",
            "O1_MODELS",
            "OpenAIToolCall",
            "create_retry_decorator",
            "from_openai_completion_logprobs",
            "from_openai_message",
            "from_openai_token_logprobs",
            "is_chat_model",
            "is_function_calling_model",
            "openai_modelname_to_contextsize",
            "resolve_openai_credentials",
            "resolve_tool_choice",
            "to_openai_message_dicts",
            "update_tool_calls",
            "AsyncOpenAI",
            "AzureOpenAI",
            "OpenAI",
            "ChatCompletionChunk",
            "ChoiceDelta",
            "ChoiceDeltaToolCall",
            "BaseTool"
        ]
    }
}